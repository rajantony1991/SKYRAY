
stm32_1Phase_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  20000000  08003f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001cc  20000048  08003f80  00020048  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000214  08003f80  00020214  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001655c  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d0a  00000000  00000000  000365cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008f2b  00000000  00000000  000392d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c28  00000000  00000000  00042208  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b78  00000000  00000000  00042e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000063f8  00000000  00000000  000439a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003af4  00000000  00000000  00049da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d894  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002028  00000000  00000000  0004d910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cec 	.word	0x08003cec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	08003cec 	.word	0x08003cec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_ddiv>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4657      	mov	r7, sl
 80003f8:	4645      	mov	r5, r8
 80003fa:	46de      	mov	lr, fp
 80003fc:	464e      	mov	r6, r9
 80003fe:	b5e0      	push	{r5, r6, r7, lr}
 8000400:	004c      	lsls	r4, r1, #1
 8000402:	030e      	lsls	r6, r1, #12
 8000404:	b087      	sub	sp, #28
 8000406:	4683      	mov	fp, r0
 8000408:	4692      	mov	sl, r2
 800040a:	001d      	movs	r5, r3
 800040c:	4680      	mov	r8, r0
 800040e:	0b36      	lsrs	r6, r6, #12
 8000410:	0d64      	lsrs	r4, r4, #21
 8000412:	0fcf      	lsrs	r7, r1, #31
 8000414:	2c00      	cmp	r4, #0
 8000416:	d04f      	beq.n	80004b8 <__aeabi_ddiv+0xc4>
 8000418:	4b6f      	ldr	r3, [pc, #444]	; (80005d8 <__aeabi_ddiv+0x1e4>)
 800041a:	429c      	cmp	r4, r3
 800041c:	d035      	beq.n	800048a <__aeabi_ddiv+0x96>
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	0f42      	lsrs	r2, r0, #29
 8000422:	041b      	lsls	r3, r3, #16
 8000424:	00f6      	lsls	r6, r6, #3
 8000426:	4313      	orrs	r3, r2
 8000428:	4333      	orrs	r3, r6
 800042a:	4699      	mov	r9, r3
 800042c:	00c3      	lsls	r3, r0, #3
 800042e:	4698      	mov	r8, r3
 8000430:	4b6a      	ldr	r3, [pc, #424]	; (80005dc <__aeabi_ddiv+0x1e8>)
 8000432:	2600      	movs	r6, #0
 8000434:	469c      	mov	ip, r3
 8000436:	2300      	movs	r3, #0
 8000438:	4464      	add	r4, ip
 800043a:	9303      	str	r3, [sp, #12]
 800043c:	032b      	lsls	r3, r5, #12
 800043e:	0b1b      	lsrs	r3, r3, #12
 8000440:	469b      	mov	fp, r3
 8000442:	006b      	lsls	r3, r5, #1
 8000444:	0fed      	lsrs	r5, r5, #31
 8000446:	4650      	mov	r0, sl
 8000448:	0d5b      	lsrs	r3, r3, #21
 800044a:	9501      	str	r5, [sp, #4]
 800044c:	d05e      	beq.n	800050c <__aeabi_ddiv+0x118>
 800044e:	4a62      	ldr	r2, [pc, #392]	; (80005d8 <__aeabi_ddiv+0x1e4>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d053      	beq.n	80004fc <__aeabi_ddiv+0x108>
 8000454:	465a      	mov	r2, fp
 8000456:	00d1      	lsls	r1, r2, #3
 8000458:	2280      	movs	r2, #128	; 0x80
 800045a:	0f40      	lsrs	r0, r0, #29
 800045c:	0412      	lsls	r2, r2, #16
 800045e:	4302      	orrs	r2, r0
 8000460:	430a      	orrs	r2, r1
 8000462:	4693      	mov	fp, r2
 8000464:	4652      	mov	r2, sl
 8000466:	00d1      	lsls	r1, r2, #3
 8000468:	4a5c      	ldr	r2, [pc, #368]	; (80005dc <__aeabi_ddiv+0x1e8>)
 800046a:	4694      	mov	ip, r2
 800046c:	2200      	movs	r2, #0
 800046e:	4463      	add	r3, ip
 8000470:	0038      	movs	r0, r7
 8000472:	4068      	eors	r0, r5
 8000474:	4684      	mov	ip, r0
 8000476:	9002      	str	r0, [sp, #8]
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	4316      	orrs	r6, r2
 800047c:	2e0f      	cmp	r6, #15
 800047e:	d900      	bls.n	8000482 <__aeabi_ddiv+0x8e>
 8000480:	e0b4      	b.n	80005ec <__aeabi_ddiv+0x1f8>
 8000482:	4b57      	ldr	r3, [pc, #348]	; (80005e0 <__aeabi_ddiv+0x1ec>)
 8000484:	00b6      	lsls	r6, r6, #2
 8000486:	599b      	ldr	r3, [r3, r6]
 8000488:	469f      	mov	pc, r3
 800048a:	0003      	movs	r3, r0
 800048c:	4333      	orrs	r3, r6
 800048e:	4699      	mov	r9, r3
 8000490:	d16c      	bne.n	800056c <__aeabi_ddiv+0x178>
 8000492:	2300      	movs	r3, #0
 8000494:	4698      	mov	r8, r3
 8000496:	3302      	adds	r3, #2
 8000498:	2608      	movs	r6, #8
 800049a:	9303      	str	r3, [sp, #12]
 800049c:	e7ce      	b.n	800043c <__aeabi_ddiv+0x48>
 800049e:	46cb      	mov	fp, r9
 80004a0:	4641      	mov	r1, r8
 80004a2:	9a03      	ldr	r2, [sp, #12]
 80004a4:	9701      	str	r7, [sp, #4]
 80004a6:	2a02      	cmp	r2, #2
 80004a8:	d165      	bne.n	8000576 <__aeabi_ddiv+0x182>
 80004aa:	9b01      	ldr	r3, [sp, #4]
 80004ac:	4c4a      	ldr	r4, [pc, #296]	; (80005d8 <__aeabi_ddiv+0x1e4>)
 80004ae:	469c      	mov	ip, r3
 80004b0:	2300      	movs	r3, #0
 80004b2:	2200      	movs	r2, #0
 80004b4:	4698      	mov	r8, r3
 80004b6:	e06b      	b.n	8000590 <__aeabi_ddiv+0x19c>
 80004b8:	0003      	movs	r3, r0
 80004ba:	4333      	orrs	r3, r6
 80004bc:	4699      	mov	r9, r3
 80004be:	d04e      	beq.n	800055e <__aeabi_ddiv+0x16a>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d100      	bne.n	80004c6 <__aeabi_ddiv+0xd2>
 80004c4:	e1bc      	b.n	8000840 <__aeabi_ddiv+0x44c>
 80004c6:	0030      	movs	r0, r6
 80004c8:	f000 fe4c 	bl	8001164 <__clzsi2>
 80004cc:	0003      	movs	r3, r0
 80004ce:	3b0b      	subs	r3, #11
 80004d0:	2b1c      	cmp	r3, #28
 80004d2:	dd00      	ble.n	80004d6 <__aeabi_ddiv+0xe2>
 80004d4:	e1ac      	b.n	8000830 <__aeabi_ddiv+0x43c>
 80004d6:	221d      	movs	r2, #29
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	465a      	mov	r2, fp
 80004dc:	0001      	movs	r1, r0
 80004de:	40da      	lsrs	r2, r3
 80004e0:	3908      	subs	r1, #8
 80004e2:	408e      	lsls	r6, r1
 80004e4:	0013      	movs	r3, r2
 80004e6:	4333      	orrs	r3, r6
 80004e8:	4699      	mov	r9, r3
 80004ea:	465b      	mov	r3, fp
 80004ec:	408b      	lsls	r3, r1
 80004ee:	4698      	mov	r8, r3
 80004f0:	2300      	movs	r3, #0
 80004f2:	4c3c      	ldr	r4, [pc, #240]	; (80005e4 <__aeabi_ddiv+0x1f0>)
 80004f4:	2600      	movs	r6, #0
 80004f6:	1a24      	subs	r4, r4, r0
 80004f8:	9303      	str	r3, [sp, #12]
 80004fa:	e79f      	b.n	800043c <__aeabi_ddiv+0x48>
 80004fc:	4651      	mov	r1, sl
 80004fe:	465a      	mov	r2, fp
 8000500:	4311      	orrs	r1, r2
 8000502:	d129      	bne.n	8000558 <__aeabi_ddiv+0x164>
 8000504:	2200      	movs	r2, #0
 8000506:	4693      	mov	fp, r2
 8000508:	3202      	adds	r2, #2
 800050a:	e7b1      	b.n	8000470 <__aeabi_ddiv+0x7c>
 800050c:	4659      	mov	r1, fp
 800050e:	4301      	orrs	r1, r0
 8000510:	d01e      	beq.n	8000550 <__aeabi_ddiv+0x15c>
 8000512:	465b      	mov	r3, fp
 8000514:	2b00      	cmp	r3, #0
 8000516:	d100      	bne.n	800051a <__aeabi_ddiv+0x126>
 8000518:	e19e      	b.n	8000858 <__aeabi_ddiv+0x464>
 800051a:	4658      	mov	r0, fp
 800051c:	f000 fe22 	bl	8001164 <__clzsi2>
 8000520:	0003      	movs	r3, r0
 8000522:	3b0b      	subs	r3, #11
 8000524:	2b1c      	cmp	r3, #28
 8000526:	dd00      	ble.n	800052a <__aeabi_ddiv+0x136>
 8000528:	e18f      	b.n	800084a <__aeabi_ddiv+0x456>
 800052a:	0002      	movs	r2, r0
 800052c:	4659      	mov	r1, fp
 800052e:	3a08      	subs	r2, #8
 8000530:	4091      	lsls	r1, r2
 8000532:	468b      	mov	fp, r1
 8000534:	211d      	movs	r1, #29
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	4651      	mov	r1, sl
 800053a:	40d9      	lsrs	r1, r3
 800053c:	000b      	movs	r3, r1
 800053e:	4659      	mov	r1, fp
 8000540:	430b      	orrs	r3, r1
 8000542:	4651      	mov	r1, sl
 8000544:	469b      	mov	fp, r3
 8000546:	4091      	lsls	r1, r2
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <__aeabi_ddiv+0x1f0>)
 800054a:	2200      	movs	r2, #0
 800054c:	1a1b      	subs	r3, r3, r0
 800054e:	e78f      	b.n	8000470 <__aeabi_ddiv+0x7c>
 8000550:	2300      	movs	r3, #0
 8000552:	2201      	movs	r2, #1
 8000554:	469b      	mov	fp, r3
 8000556:	e78b      	b.n	8000470 <__aeabi_ddiv+0x7c>
 8000558:	4651      	mov	r1, sl
 800055a:	2203      	movs	r2, #3
 800055c:	e788      	b.n	8000470 <__aeabi_ddiv+0x7c>
 800055e:	2300      	movs	r3, #0
 8000560:	4698      	mov	r8, r3
 8000562:	3301      	adds	r3, #1
 8000564:	2604      	movs	r6, #4
 8000566:	2400      	movs	r4, #0
 8000568:	9303      	str	r3, [sp, #12]
 800056a:	e767      	b.n	800043c <__aeabi_ddiv+0x48>
 800056c:	2303      	movs	r3, #3
 800056e:	46b1      	mov	r9, r6
 8000570:	9303      	str	r3, [sp, #12]
 8000572:	260c      	movs	r6, #12
 8000574:	e762      	b.n	800043c <__aeabi_ddiv+0x48>
 8000576:	2a03      	cmp	r2, #3
 8000578:	d100      	bne.n	800057c <__aeabi_ddiv+0x188>
 800057a:	e25c      	b.n	8000a36 <__aeabi_ddiv+0x642>
 800057c:	9b01      	ldr	r3, [sp, #4]
 800057e:	2a01      	cmp	r2, #1
 8000580:	d000      	beq.n	8000584 <__aeabi_ddiv+0x190>
 8000582:	e1e4      	b.n	800094e <__aeabi_ddiv+0x55a>
 8000584:	4013      	ands	r3, r2
 8000586:	469c      	mov	ip, r3
 8000588:	2300      	movs	r3, #0
 800058a:	2400      	movs	r4, #0
 800058c:	2200      	movs	r2, #0
 800058e:	4698      	mov	r8, r3
 8000590:	2100      	movs	r1, #0
 8000592:	0312      	lsls	r2, r2, #12
 8000594:	0b13      	lsrs	r3, r2, #12
 8000596:	0d0a      	lsrs	r2, r1, #20
 8000598:	0512      	lsls	r2, r2, #20
 800059a:	431a      	orrs	r2, r3
 800059c:	0523      	lsls	r3, r4, #20
 800059e:	4c12      	ldr	r4, [pc, #72]	; (80005e8 <__aeabi_ddiv+0x1f4>)
 80005a0:	4640      	mov	r0, r8
 80005a2:	4022      	ands	r2, r4
 80005a4:	4313      	orrs	r3, r2
 80005a6:	4662      	mov	r2, ip
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	07d2      	lsls	r2, r2, #31
 80005ac:	085b      	lsrs	r3, r3, #1
 80005ae:	4313      	orrs	r3, r2
 80005b0:	0019      	movs	r1, r3
 80005b2:	b007      	add	sp, #28
 80005b4:	bc3c      	pop	{r2, r3, r4, r5}
 80005b6:	4690      	mov	r8, r2
 80005b8:	4699      	mov	r9, r3
 80005ba:	46a2      	mov	sl, r4
 80005bc:	46ab      	mov	fp, r5
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c0:	2300      	movs	r3, #0
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	469c      	mov	ip, r3
 80005c6:	0312      	lsls	r2, r2, #12
 80005c8:	4698      	mov	r8, r3
 80005ca:	4c03      	ldr	r4, [pc, #12]	; (80005d8 <__aeabi_ddiv+0x1e4>)
 80005cc:	e7e0      	b.n	8000590 <__aeabi_ddiv+0x19c>
 80005ce:	2300      	movs	r3, #0
 80005d0:	4c01      	ldr	r4, [pc, #4]	; (80005d8 <__aeabi_ddiv+0x1e4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	4698      	mov	r8, r3
 80005d6:	e7db      	b.n	8000590 <__aeabi_ddiv+0x19c>
 80005d8:	000007ff 	.word	0x000007ff
 80005dc:	fffffc01 	.word	0xfffffc01
 80005e0:	08003d24 	.word	0x08003d24
 80005e4:	fffffc0d 	.word	0xfffffc0d
 80005e8:	800fffff 	.word	0x800fffff
 80005ec:	45d9      	cmp	r9, fp
 80005ee:	d900      	bls.n	80005f2 <__aeabi_ddiv+0x1fe>
 80005f0:	e139      	b.n	8000866 <__aeabi_ddiv+0x472>
 80005f2:	d100      	bne.n	80005f6 <__aeabi_ddiv+0x202>
 80005f4:	e134      	b.n	8000860 <__aeabi_ddiv+0x46c>
 80005f6:	2300      	movs	r3, #0
 80005f8:	4646      	mov	r6, r8
 80005fa:	464d      	mov	r5, r9
 80005fc:	469a      	mov	sl, r3
 80005fe:	3c01      	subs	r4, #1
 8000600:	465b      	mov	r3, fp
 8000602:	0e0a      	lsrs	r2, r1, #24
 8000604:	021b      	lsls	r3, r3, #8
 8000606:	431a      	orrs	r2, r3
 8000608:	020b      	lsls	r3, r1, #8
 800060a:	0c17      	lsrs	r7, r2, #16
 800060c:	9303      	str	r3, [sp, #12]
 800060e:	0413      	lsls	r3, r2, #16
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	0039      	movs	r1, r7
 8000614:	0028      	movs	r0, r5
 8000616:	4690      	mov	r8, r2
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	f7ff fd75 	bl	8000108 <__udivsi3>
 800061e:	0002      	movs	r2, r0
 8000620:	9b01      	ldr	r3, [sp, #4]
 8000622:	4683      	mov	fp, r0
 8000624:	435a      	muls	r2, r3
 8000626:	0028      	movs	r0, r5
 8000628:	0039      	movs	r1, r7
 800062a:	4691      	mov	r9, r2
 800062c:	f7ff fdf2 	bl	8000214 <__aeabi_uidivmod>
 8000630:	0c35      	lsrs	r5, r6, #16
 8000632:	0409      	lsls	r1, r1, #16
 8000634:	430d      	orrs	r5, r1
 8000636:	45a9      	cmp	r9, r5
 8000638:	d90d      	bls.n	8000656 <__aeabi_ddiv+0x262>
 800063a:	465b      	mov	r3, fp
 800063c:	4445      	add	r5, r8
 800063e:	3b01      	subs	r3, #1
 8000640:	45a8      	cmp	r8, r5
 8000642:	d900      	bls.n	8000646 <__aeabi_ddiv+0x252>
 8000644:	e13a      	b.n	80008bc <__aeabi_ddiv+0x4c8>
 8000646:	45a9      	cmp	r9, r5
 8000648:	d800      	bhi.n	800064c <__aeabi_ddiv+0x258>
 800064a:	e137      	b.n	80008bc <__aeabi_ddiv+0x4c8>
 800064c:	2302      	movs	r3, #2
 800064e:	425b      	negs	r3, r3
 8000650:	469c      	mov	ip, r3
 8000652:	4445      	add	r5, r8
 8000654:	44e3      	add	fp, ip
 8000656:	464b      	mov	r3, r9
 8000658:	1aeb      	subs	r3, r5, r3
 800065a:	0039      	movs	r1, r7
 800065c:	0018      	movs	r0, r3
 800065e:	9304      	str	r3, [sp, #16]
 8000660:	f7ff fd52 	bl	8000108 <__udivsi3>
 8000664:	9b01      	ldr	r3, [sp, #4]
 8000666:	0005      	movs	r5, r0
 8000668:	4343      	muls	r3, r0
 800066a:	0039      	movs	r1, r7
 800066c:	9804      	ldr	r0, [sp, #16]
 800066e:	4699      	mov	r9, r3
 8000670:	f7ff fdd0 	bl	8000214 <__aeabi_uidivmod>
 8000674:	0433      	lsls	r3, r6, #16
 8000676:	0409      	lsls	r1, r1, #16
 8000678:	0c1b      	lsrs	r3, r3, #16
 800067a:	430b      	orrs	r3, r1
 800067c:	4599      	cmp	r9, r3
 800067e:	d909      	bls.n	8000694 <__aeabi_ddiv+0x2a0>
 8000680:	4443      	add	r3, r8
 8000682:	1e6a      	subs	r2, r5, #1
 8000684:	4598      	cmp	r8, r3
 8000686:	d900      	bls.n	800068a <__aeabi_ddiv+0x296>
 8000688:	e11a      	b.n	80008c0 <__aeabi_ddiv+0x4cc>
 800068a:	4599      	cmp	r9, r3
 800068c:	d800      	bhi.n	8000690 <__aeabi_ddiv+0x29c>
 800068e:	e117      	b.n	80008c0 <__aeabi_ddiv+0x4cc>
 8000690:	3d02      	subs	r5, #2
 8000692:	4443      	add	r3, r8
 8000694:	464a      	mov	r2, r9
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	465a      	mov	r2, fp
 800069a:	0412      	lsls	r2, r2, #16
 800069c:	432a      	orrs	r2, r5
 800069e:	9903      	ldr	r1, [sp, #12]
 80006a0:	4693      	mov	fp, r2
 80006a2:	0c10      	lsrs	r0, r2, #16
 80006a4:	0c0a      	lsrs	r2, r1, #16
 80006a6:	4691      	mov	r9, r2
 80006a8:	0409      	lsls	r1, r1, #16
 80006aa:	465a      	mov	r2, fp
 80006ac:	0c09      	lsrs	r1, r1, #16
 80006ae:	464e      	mov	r6, r9
 80006b0:	000d      	movs	r5, r1
 80006b2:	0412      	lsls	r2, r2, #16
 80006b4:	0c12      	lsrs	r2, r2, #16
 80006b6:	4345      	muls	r5, r0
 80006b8:	9105      	str	r1, [sp, #20]
 80006ba:	4351      	muls	r1, r2
 80006bc:	4372      	muls	r2, r6
 80006be:	4370      	muls	r0, r6
 80006c0:	1952      	adds	r2, r2, r5
 80006c2:	0c0e      	lsrs	r6, r1, #16
 80006c4:	18b2      	adds	r2, r6, r2
 80006c6:	4295      	cmp	r5, r2
 80006c8:	d903      	bls.n	80006d2 <__aeabi_ddiv+0x2de>
 80006ca:	2580      	movs	r5, #128	; 0x80
 80006cc:	026d      	lsls	r5, r5, #9
 80006ce:	46ac      	mov	ip, r5
 80006d0:	4460      	add	r0, ip
 80006d2:	0c15      	lsrs	r5, r2, #16
 80006d4:	0409      	lsls	r1, r1, #16
 80006d6:	0412      	lsls	r2, r2, #16
 80006d8:	0c09      	lsrs	r1, r1, #16
 80006da:	1828      	adds	r0, r5, r0
 80006dc:	1852      	adds	r2, r2, r1
 80006de:	4283      	cmp	r3, r0
 80006e0:	d200      	bcs.n	80006e4 <__aeabi_ddiv+0x2f0>
 80006e2:	e0ce      	b.n	8000882 <__aeabi_ddiv+0x48e>
 80006e4:	d100      	bne.n	80006e8 <__aeabi_ddiv+0x2f4>
 80006e6:	e0c8      	b.n	800087a <__aeabi_ddiv+0x486>
 80006e8:	1a1d      	subs	r5, r3, r0
 80006ea:	4653      	mov	r3, sl
 80006ec:	1a9e      	subs	r6, r3, r2
 80006ee:	45b2      	cmp	sl, r6
 80006f0:	4192      	sbcs	r2, r2
 80006f2:	4252      	negs	r2, r2
 80006f4:	1aab      	subs	r3, r5, r2
 80006f6:	469a      	mov	sl, r3
 80006f8:	4598      	cmp	r8, r3
 80006fa:	d100      	bne.n	80006fe <__aeabi_ddiv+0x30a>
 80006fc:	e117      	b.n	800092e <__aeabi_ddiv+0x53a>
 80006fe:	0039      	movs	r1, r7
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff fd01 	bl	8000108 <__udivsi3>
 8000706:	9b01      	ldr	r3, [sp, #4]
 8000708:	0005      	movs	r5, r0
 800070a:	4343      	muls	r3, r0
 800070c:	0039      	movs	r1, r7
 800070e:	4650      	mov	r0, sl
 8000710:	9304      	str	r3, [sp, #16]
 8000712:	f7ff fd7f 	bl	8000214 <__aeabi_uidivmod>
 8000716:	9804      	ldr	r0, [sp, #16]
 8000718:	040b      	lsls	r3, r1, #16
 800071a:	0c31      	lsrs	r1, r6, #16
 800071c:	4319      	orrs	r1, r3
 800071e:	4288      	cmp	r0, r1
 8000720:	d909      	bls.n	8000736 <__aeabi_ddiv+0x342>
 8000722:	4441      	add	r1, r8
 8000724:	1e6b      	subs	r3, r5, #1
 8000726:	4588      	cmp	r8, r1
 8000728:	d900      	bls.n	800072c <__aeabi_ddiv+0x338>
 800072a:	e107      	b.n	800093c <__aeabi_ddiv+0x548>
 800072c:	4288      	cmp	r0, r1
 800072e:	d800      	bhi.n	8000732 <__aeabi_ddiv+0x33e>
 8000730:	e104      	b.n	800093c <__aeabi_ddiv+0x548>
 8000732:	3d02      	subs	r5, #2
 8000734:	4441      	add	r1, r8
 8000736:	9b04      	ldr	r3, [sp, #16]
 8000738:	1acb      	subs	r3, r1, r3
 800073a:	0018      	movs	r0, r3
 800073c:	0039      	movs	r1, r7
 800073e:	9304      	str	r3, [sp, #16]
 8000740:	f7ff fce2 	bl	8000108 <__udivsi3>
 8000744:	9b01      	ldr	r3, [sp, #4]
 8000746:	4682      	mov	sl, r0
 8000748:	4343      	muls	r3, r0
 800074a:	0039      	movs	r1, r7
 800074c:	9804      	ldr	r0, [sp, #16]
 800074e:	9301      	str	r3, [sp, #4]
 8000750:	f7ff fd60 	bl	8000214 <__aeabi_uidivmod>
 8000754:	9801      	ldr	r0, [sp, #4]
 8000756:	040b      	lsls	r3, r1, #16
 8000758:	0431      	lsls	r1, r6, #16
 800075a:	0c09      	lsrs	r1, r1, #16
 800075c:	4319      	orrs	r1, r3
 800075e:	4288      	cmp	r0, r1
 8000760:	d90d      	bls.n	800077e <__aeabi_ddiv+0x38a>
 8000762:	4653      	mov	r3, sl
 8000764:	4441      	add	r1, r8
 8000766:	3b01      	subs	r3, #1
 8000768:	4588      	cmp	r8, r1
 800076a:	d900      	bls.n	800076e <__aeabi_ddiv+0x37a>
 800076c:	e0e8      	b.n	8000940 <__aeabi_ddiv+0x54c>
 800076e:	4288      	cmp	r0, r1
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x380>
 8000772:	e0e5      	b.n	8000940 <__aeabi_ddiv+0x54c>
 8000774:	2302      	movs	r3, #2
 8000776:	425b      	negs	r3, r3
 8000778:	469c      	mov	ip, r3
 800077a:	4441      	add	r1, r8
 800077c:	44e2      	add	sl, ip
 800077e:	9b01      	ldr	r3, [sp, #4]
 8000780:	042d      	lsls	r5, r5, #16
 8000782:	1ace      	subs	r6, r1, r3
 8000784:	4651      	mov	r1, sl
 8000786:	4329      	orrs	r1, r5
 8000788:	9d05      	ldr	r5, [sp, #20]
 800078a:	464f      	mov	r7, r9
 800078c:	002a      	movs	r2, r5
 800078e:	040b      	lsls	r3, r1, #16
 8000790:	0c08      	lsrs	r0, r1, #16
 8000792:	0c1b      	lsrs	r3, r3, #16
 8000794:	435a      	muls	r2, r3
 8000796:	4345      	muls	r5, r0
 8000798:	437b      	muls	r3, r7
 800079a:	4378      	muls	r0, r7
 800079c:	195b      	adds	r3, r3, r5
 800079e:	0c17      	lsrs	r7, r2, #16
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	429d      	cmp	r5, r3
 80007a4:	d903      	bls.n	80007ae <__aeabi_ddiv+0x3ba>
 80007a6:	2580      	movs	r5, #128	; 0x80
 80007a8:	026d      	lsls	r5, r5, #9
 80007aa:	46ac      	mov	ip, r5
 80007ac:	4460      	add	r0, ip
 80007ae:	0c1d      	lsrs	r5, r3, #16
 80007b0:	0412      	lsls	r2, r2, #16
 80007b2:	041b      	lsls	r3, r3, #16
 80007b4:	0c12      	lsrs	r2, r2, #16
 80007b6:	1828      	adds	r0, r5, r0
 80007b8:	189b      	adds	r3, r3, r2
 80007ba:	4286      	cmp	r6, r0
 80007bc:	d200      	bcs.n	80007c0 <__aeabi_ddiv+0x3cc>
 80007be:	e093      	b.n	80008e8 <__aeabi_ddiv+0x4f4>
 80007c0:	d100      	bne.n	80007c4 <__aeabi_ddiv+0x3d0>
 80007c2:	e08e      	b.n	80008e2 <__aeabi_ddiv+0x4ee>
 80007c4:	2301      	movs	r3, #1
 80007c6:	4319      	orrs	r1, r3
 80007c8:	4ba0      	ldr	r3, [pc, #640]	; (8000a4c <__aeabi_ddiv+0x658>)
 80007ca:	18e3      	adds	r3, r4, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dc00      	bgt.n	80007d2 <__aeabi_ddiv+0x3de>
 80007d0:	e099      	b.n	8000906 <__aeabi_ddiv+0x512>
 80007d2:	074a      	lsls	r2, r1, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_ddiv+0x3e4>
 80007d6:	e09e      	b.n	8000916 <__aeabi_ddiv+0x522>
 80007d8:	465a      	mov	r2, fp
 80007da:	01d2      	lsls	r2, r2, #7
 80007dc:	d506      	bpl.n	80007ec <__aeabi_ddiv+0x3f8>
 80007de:	465a      	mov	r2, fp
 80007e0:	4b9b      	ldr	r3, [pc, #620]	; (8000a50 <__aeabi_ddiv+0x65c>)
 80007e2:	401a      	ands	r2, r3
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	4693      	mov	fp, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	18e3      	adds	r3, r4, r3
 80007ec:	4a99      	ldr	r2, [pc, #612]	; (8000a54 <__aeabi_ddiv+0x660>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	dd68      	ble.n	80008c4 <__aeabi_ddiv+0x4d0>
 80007f2:	2301      	movs	r3, #1
 80007f4:	9a02      	ldr	r2, [sp, #8]
 80007f6:	4c98      	ldr	r4, [pc, #608]	; (8000a58 <__aeabi_ddiv+0x664>)
 80007f8:	401a      	ands	r2, r3
 80007fa:	2300      	movs	r3, #0
 80007fc:	4694      	mov	ip, r2
 80007fe:	4698      	mov	r8, r3
 8000800:	2200      	movs	r2, #0
 8000802:	e6c5      	b.n	8000590 <__aeabi_ddiv+0x19c>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	464b      	mov	r3, r9
 8000808:	0312      	lsls	r2, r2, #12
 800080a:	4213      	tst	r3, r2
 800080c:	d00a      	beq.n	8000824 <__aeabi_ddiv+0x430>
 800080e:	465b      	mov	r3, fp
 8000810:	4213      	tst	r3, r2
 8000812:	d106      	bne.n	8000822 <__aeabi_ddiv+0x42e>
 8000814:	431a      	orrs	r2, r3
 8000816:	0312      	lsls	r2, r2, #12
 8000818:	0b12      	lsrs	r2, r2, #12
 800081a:	46ac      	mov	ip, r5
 800081c:	4688      	mov	r8, r1
 800081e:	4c8e      	ldr	r4, [pc, #568]	; (8000a58 <__aeabi_ddiv+0x664>)
 8000820:	e6b6      	b.n	8000590 <__aeabi_ddiv+0x19c>
 8000822:	464b      	mov	r3, r9
 8000824:	431a      	orrs	r2, r3
 8000826:	0312      	lsls	r2, r2, #12
 8000828:	0b12      	lsrs	r2, r2, #12
 800082a:	46bc      	mov	ip, r7
 800082c:	4c8a      	ldr	r4, [pc, #552]	; (8000a58 <__aeabi_ddiv+0x664>)
 800082e:	e6af      	b.n	8000590 <__aeabi_ddiv+0x19c>
 8000830:	0003      	movs	r3, r0
 8000832:	465a      	mov	r2, fp
 8000834:	3b28      	subs	r3, #40	; 0x28
 8000836:	409a      	lsls	r2, r3
 8000838:	2300      	movs	r3, #0
 800083a:	4691      	mov	r9, r2
 800083c:	4698      	mov	r8, r3
 800083e:	e657      	b.n	80004f0 <__aeabi_ddiv+0xfc>
 8000840:	4658      	mov	r0, fp
 8000842:	f000 fc8f 	bl	8001164 <__clzsi2>
 8000846:	3020      	adds	r0, #32
 8000848:	e640      	b.n	80004cc <__aeabi_ddiv+0xd8>
 800084a:	0003      	movs	r3, r0
 800084c:	4652      	mov	r2, sl
 800084e:	3b28      	subs	r3, #40	; 0x28
 8000850:	409a      	lsls	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	4693      	mov	fp, r2
 8000856:	e677      	b.n	8000548 <__aeabi_ddiv+0x154>
 8000858:	f000 fc84 	bl	8001164 <__clzsi2>
 800085c:	3020      	adds	r0, #32
 800085e:	e65f      	b.n	8000520 <__aeabi_ddiv+0x12c>
 8000860:	4588      	cmp	r8, r1
 8000862:	d200      	bcs.n	8000866 <__aeabi_ddiv+0x472>
 8000864:	e6c7      	b.n	80005f6 <__aeabi_ddiv+0x202>
 8000866:	464b      	mov	r3, r9
 8000868:	07de      	lsls	r6, r3, #31
 800086a:	085d      	lsrs	r5, r3, #1
 800086c:	4643      	mov	r3, r8
 800086e:	085b      	lsrs	r3, r3, #1
 8000870:	431e      	orrs	r6, r3
 8000872:	4643      	mov	r3, r8
 8000874:	07db      	lsls	r3, r3, #31
 8000876:	469a      	mov	sl, r3
 8000878:	e6c2      	b.n	8000600 <__aeabi_ddiv+0x20c>
 800087a:	2500      	movs	r5, #0
 800087c:	4592      	cmp	sl, r2
 800087e:	d300      	bcc.n	8000882 <__aeabi_ddiv+0x48e>
 8000880:	e733      	b.n	80006ea <__aeabi_ddiv+0x2f6>
 8000882:	9e03      	ldr	r6, [sp, #12]
 8000884:	4659      	mov	r1, fp
 8000886:	46b4      	mov	ip, r6
 8000888:	44e2      	add	sl, ip
 800088a:	45b2      	cmp	sl, r6
 800088c:	41ad      	sbcs	r5, r5
 800088e:	426d      	negs	r5, r5
 8000890:	4445      	add	r5, r8
 8000892:	18eb      	adds	r3, r5, r3
 8000894:	3901      	subs	r1, #1
 8000896:	4598      	cmp	r8, r3
 8000898:	d207      	bcs.n	80008aa <__aeabi_ddiv+0x4b6>
 800089a:	4298      	cmp	r0, r3
 800089c:	d900      	bls.n	80008a0 <__aeabi_ddiv+0x4ac>
 800089e:	e07f      	b.n	80009a0 <__aeabi_ddiv+0x5ac>
 80008a0:	d100      	bne.n	80008a4 <__aeabi_ddiv+0x4b0>
 80008a2:	e0bc      	b.n	8000a1e <__aeabi_ddiv+0x62a>
 80008a4:	1a1d      	subs	r5, r3, r0
 80008a6:	468b      	mov	fp, r1
 80008a8:	e71f      	b.n	80006ea <__aeabi_ddiv+0x2f6>
 80008aa:	4598      	cmp	r8, r3
 80008ac:	d1fa      	bne.n	80008a4 <__aeabi_ddiv+0x4b0>
 80008ae:	9d03      	ldr	r5, [sp, #12]
 80008b0:	4555      	cmp	r5, sl
 80008b2:	d9f2      	bls.n	800089a <__aeabi_ddiv+0x4a6>
 80008b4:	4643      	mov	r3, r8
 80008b6:	468b      	mov	fp, r1
 80008b8:	1a1d      	subs	r5, r3, r0
 80008ba:	e716      	b.n	80006ea <__aeabi_ddiv+0x2f6>
 80008bc:	469b      	mov	fp, r3
 80008be:	e6ca      	b.n	8000656 <__aeabi_ddiv+0x262>
 80008c0:	0015      	movs	r5, r2
 80008c2:	e6e7      	b.n	8000694 <__aeabi_ddiv+0x2a0>
 80008c4:	465a      	mov	r2, fp
 80008c6:	08c9      	lsrs	r1, r1, #3
 80008c8:	0752      	lsls	r2, r2, #29
 80008ca:	430a      	orrs	r2, r1
 80008cc:	055b      	lsls	r3, r3, #21
 80008ce:	4690      	mov	r8, r2
 80008d0:	0d5c      	lsrs	r4, r3, #21
 80008d2:	465a      	mov	r2, fp
 80008d4:	2301      	movs	r3, #1
 80008d6:	9902      	ldr	r1, [sp, #8]
 80008d8:	0252      	lsls	r2, r2, #9
 80008da:	4019      	ands	r1, r3
 80008dc:	0b12      	lsrs	r2, r2, #12
 80008de:	468c      	mov	ip, r1
 80008e0:	e656      	b.n	8000590 <__aeabi_ddiv+0x19c>
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_ddiv+0x4f4>
 80008e6:	e76f      	b.n	80007c8 <__aeabi_ddiv+0x3d4>
 80008e8:	4446      	add	r6, r8
 80008ea:	1e4a      	subs	r2, r1, #1
 80008ec:	45b0      	cmp	r8, r6
 80008ee:	d929      	bls.n	8000944 <__aeabi_ddiv+0x550>
 80008f0:	0011      	movs	r1, r2
 80008f2:	4286      	cmp	r6, r0
 80008f4:	d000      	beq.n	80008f8 <__aeabi_ddiv+0x504>
 80008f6:	e765      	b.n	80007c4 <__aeabi_ddiv+0x3d0>
 80008f8:	9a03      	ldr	r2, [sp, #12]
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d000      	beq.n	8000900 <__aeabi_ddiv+0x50c>
 80008fe:	e761      	b.n	80007c4 <__aeabi_ddiv+0x3d0>
 8000900:	e762      	b.n	80007c8 <__aeabi_ddiv+0x3d4>
 8000902:	2101      	movs	r1, #1
 8000904:	4249      	negs	r1, r1
 8000906:	2001      	movs	r0, #1
 8000908:	1ac2      	subs	r2, r0, r3
 800090a:	2a38      	cmp	r2, #56	; 0x38
 800090c:	dd21      	ble.n	8000952 <__aeabi_ddiv+0x55e>
 800090e:	9b02      	ldr	r3, [sp, #8]
 8000910:	4003      	ands	r3, r0
 8000912:	469c      	mov	ip, r3
 8000914:	e638      	b.n	8000588 <__aeabi_ddiv+0x194>
 8000916:	220f      	movs	r2, #15
 8000918:	400a      	ands	r2, r1
 800091a:	2a04      	cmp	r2, #4
 800091c:	d100      	bne.n	8000920 <__aeabi_ddiv+0x52c>
 800091e:	e75b      	b.n	80007d8 <__aeabi_ddiv+0x3e4>
 8000920:	000a      	movs	r2, r1
 8000922:	1d11      	adds	r1, r2, #4
 8000924:	4291      	cmp	r1, r2
 8000926:	4192      	sbcs	r2, r2
 8000928:	4252      	negs	r2, r2
 800092a:	4493      	add	fp, r2
 800092c:	e754      	b.n	80007d8 <__aeabi_ddiv+0x3e4>
 800092e:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <__aeabi_ddiv+0x658>)
 8000930:	18e3      	adds	r3, r4, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	dde5      	ble.n	8000902 <__aeabi_ddiv+0x50e>
 8000936:	2201      	movs	r2, #1
 8000938:	4252      	negs	r2, r2
 800093a:	e7f2      	b.n	8000922 <__aeabi_ddiv+0x52e>
 800093c:	001d      	movs	r5, r3
 800093e:	e6fa      	b.n	8000736 <__aeabi_ddiv+0x342>
 8000940:	469a      	mov	sl, r3
 8000942:	e71c      	b.n	800077e <__aeabi_ddiv+0x38a>
 8000944:	42b0      	cmp	r0, r6
 8000946:	d839      	bhi.n	80009bc <__aeabi_ddiv+0x5c8>
 8000948:	d06e      	beq.n	8000a28 <__aeabi_ddiv+0x634>
 800094a:	0011      	movs	r1, r2
 800094c:	e73a      	b.n	80007c4 <__aeabi_ddiv+0x3d0>
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	e73a      	b.n	80007c8 <__aeabi_ddiv+0x3d4>
 8000952:	2a1f      	cmp	r2, #31
 8000954:	dc3c      	bgt.n	80009d0 <__aeabi_ddiv+0x5dc>
 8000956:	2320      	movs	r3, #32
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	000c      	movs	r4, r1
 800095c:	4658      	mov	r0, fp
 800095e:	4099      	lsls	r1, r3
 8000960:	4098      	lsls	r0, r3
 8000962:	1e4b      	subs	r3, r1, #1
 8000964:	4199      	sbcs	r1, r3
 8000966:	465b      	mov	r3, fp
 8000968:	40d4      	lsrs	r4, r2
 800096a:	40d3      	lsrs	r3, r2
 800096c:	4320      	orrs	r0, r4
 800096e:	4308      	orrs	r0, r1
 8000970:	001a      	movs	r2, r3
 8000972:	0743      	lsls	r3, r0, #29
 8000974:	d009      	beq.n	800098a <__aeabi_ddiv+0x596>
 8000976:	230f      	movs	r3, #15
 8000978:	4003      	ands	r3, r0
 800097a:	2b04      	cmp	r3, #4
 800097c:	d005      	beq.n	800098a <__aeabi_ddiv+0x596>
 800097e:	0001      	movs	r1, r0
 8000980:	1d08      	adds	r0, r1, #4
 8000982:	4288      	cmp	r0, r1
 8000984:	419b      	sbcs	r3, r3
 8000986:	425b      	negs	r3, r3
 8000988:	18d2      	adds	r2, r2, r3
 800098a:	0213      	lsls	r3, r2, #8
 800098c:	d53a      	bpl.n	8000a04 <__aeabi_ddiv+0x610>
 800098e:	2301      	movs	r3, #1
 8000990:	9a02      	ldr	r2, [sp, #8]
 8000992:	2401      	movs	r4, #1
 8000994:	401a      	ands	r2, r3
 8000996:	2300      	movs	r3, #0
 8000998:	4694      	mov	ip, r2
 800099a:	4698      	mov	r8, r3
 800099c:	2200      	movs	r2, #0
 800099e:	e5f7      	b.n	8000590 <__aeabi_ddiv+0x19c>
 80009a0:	2102      	movs	r1, #2
 80009a2:	4249      	negs	r1, r1
 80009a4:	468c      	mov	ip, r1
 80009a6:	9d03      	ldr	r5, [sp, #12]
 80009a8:	44e3      	add	fp, ip
 80009aa:	46ac      	mov	ip, r5
 80009ac:	44e2      	add	sl, ip
 80009ae:	45aa      	cmp	sl, r5
 80009b0:	41ad      	sbcs	r5, r5
 80009b2:	426d      	negs	r5, r5
 80009b4:	4445      	add	r5, r8
 80009b6:	18ed      	adds	r5, r5, r3
 80009b8:	1a2d      	subs	r5, r5, r0
 80009ba:	e696      	b.n	80006ea <__aeabi_ddiv+0x2f6>
 80009bc:	1e8a      	subs	r2, r1, #2
 80009be:	9903      	ldr	r1, [sp, #12]
 80009c0:	004d      	lsls	r5, r1, #1
 80009c2:	428d      	cmp	r5, r1
 80009c4:	4189      	sbcs	r1, r1
 80009c6:	4249      	negs	r1, r1
 80009c8:	4441      	add	r1, r8
 80009ca:	1876      	adds	r6, r6, r1
 80009cc:	9503      	str	r5, [sp, #12]
 80009ce:	e78f      	b.n	80008f0 <__aeabi_ddiv+0x4fc>
 80009d0:	201f      	movs	r0, #31
 80009d2:	4240      	negs	r0, r0
 80009d4:	1ac3      	subs	r3, r0, r3
 80009d6:	4658      	mov	r0, fp
 80009d8:	40d8      	lsrs	r0, r3
 80009da:	0003      	movs	r3, r0
 80009dc:	2a20      	cmp	r2, #32
 80009de:	d028      	beq.n	8000a32 <__aeabi_ddiv+0x63e>
 80009e0:	2040      	movs	r0, #64	; 0x40
 80009e2:	465d      	mov	r5, fp
 80009e4:	1a82      	subs	r2, r0, r2
 80009e6:	4095      	lsls	r5, r2
 80009e8:	4329      	orrs	r1, r5
 80009ea:	1e4a      	subs	r2, r1, #1
 80009ec:	4191      	sbcs	r1, r2
 80009ee:	4319      	orrs	r1, r3
 80009f0:	2307      	movs	r3, #7
 80009f2:	2200      	movs	r2, #0
 80009f4:	400b      	ands	r3, r1
 80009f6:	d009      	beq.n	8000a0c <__aeabi_ddiv+0x618>
 80009f8:	230f      	movs	r3, #15
 80009fa:	2200      	movs	r2, #0
 80009fc:	400b      	ands	r3, r1
 80009fe:	0008      	movs	r0, r1
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d1bd      	bne.n	8000980 <__aeabi_ddiv+0x58c>
 8000a04:	0001      	movs	r1, r0
 8000a06:	0753      	lsls	r3, r2, #29
 8000a08:	0252      	lsls	r2, r2, #9
 8000a0a:	0b12      	lsrs	r2, r2, #12
 8000a0c:	08c9      	lsrs	r1, r1, #3
 8000a0e:	4319      	orrs	r1, r3
 8000a10:	2301      	movs	r3, #1
 8000a12:	4688      	mov	r8, r1
 8000a14:	9902      	ldr	r1, [sp, #8]
 8000a16:	2400      	movs	r4, #0
 8000a18:	4019      	ands	r1, r3
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	e5b8      	b.n	8000590 <__aeabi_ddiv+0x19c>
 8000a1e:	4552      	cmp	r2, sl
 8000a20:	d8be      	bhi.n	80009a0 <__aeabi_ddiv+0x5ac>
 8000a22:	468b      	mov	fp, r1
 8000a24:	2500      	movs	r5, #0
 8000a26:	e660      	b.n	80006ea <__aeabi_ddiv+0x2f6>
 8000a28:	9d03      	ldr	r5, [sp, #12]
 8000a2a:	429d      	cmp	r5, r3
 8000a2c:	d3c6      	bcc.n	80009bc <__aeabi_ddiv+0x5c8>
 8000a2e:	0011      	movs	r1, r2
 8000a30:	e762      	b.n	80008f8 <__aeabi_ddiv+0x504>
 8000a32:	2500      	movs	r5, #0
 8000a34:	e7d8      	b.n	80009e8 <__aeabi_ddiv+0x5f4>
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	465b      	mov	r3, fp
 8000a3a:	0312      	lsls	r2, r2, #12
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	9b01      	ldr	r3, [sp, #4]
 8000a40:	0312      	lsls	r2, r2, #12
 8000a42:	0b12      	lsrs	r2, r2, #12
 8000a44:	469c      	mov	ip, r3
 8000a46:	4688      	mov	r8, r1
 8000a48:	4c03      	ldr	r4, [pc, #12]	; (8000a58 <__aeabi_ddiv+0x664>)
 8000a4a:	e5a1      	b.n	8000590 <__aeabi_ddiv+0x19c>
 8000a4c:	000003ff 	.word	0x000003ff
 8000a50:	feffffff 	.word	0xfeffffff
 8000a54:	000007fe 	.word	0x000007fe
 8000a58:	000007ff 	.word	0x000007ff

08000a5c <__aeabi_dmul>:
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	4657      	mov	r7, sl
 8000a60:	4645      	mov	r5, r8
 8000a62:	46de      	mov	lr, fp
 8000a64:	464e      	mov	r6, r9
 8000a66:	b5e0      	push	{r5, r6, r7, lr}
 8000a68:	030c      	lsls	r4, r1, #12
 8000a6a:	4698      	mov	r8, r3
 8000a6c:	004e      	lsls	r6, r1, #1
 8000a6e:	0b23      	lsrs	r3, r4, #12
 8000a70:	b087      	sub	sp, #28
 8000a72:	0007      	movs	r7, r0
 8000a74:	4692      	mov	sl, r2
 8000a76:	469b      	mov	fp, r3
 8000a78:	0d76      	lsrs	r6, r6, #21
 8000a7a:	0fcd      	lsrs	r5, r1, #31
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d06b      	beq.n	8000b58 <__aeabi_dmul+0xfc>
 8000a80:	4b6d      	ldr	r3, [pc, #436]	; (8000c38 <__aeabi_dmul+0x1dc>)
 8000a82:	429e      	cmp	r6, r3
 8000a84:	d035      	beq.n	8000af2 <__aeabi_dmul+0x96>
 8000a86:	2480      	movs	r4, #128	; 0x80
 8000a88:	465b      	mov	r3, fp
 8000a8a:	0f42      	lsrs	r2, r0, #29
 8000a8c:	0424      	lsls	r4, r4, #16
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	4314      	orrs	r4, r2
 8000a92:	431c      	orrs	r4, r3
 8000a94:	00c3      	lsls	r3, r0, #3
 8000a96:	4699      	mov	r9, r3
 8000a98:	4b68      	ldr	r3, [pc, #416]	; (8000c3c <__aeabi_dmul+0x1e0>)
 8000a9a:	46a3      	mov	fp, r4
 8000a9c:	469c      	mov	ip, r3
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2700      	movs	r7, #0
 8000aa2:	4466      	add	r6, ip
 8000aa4:	9302      	str	r3, [sp, #8]
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	031c      	lsls	r4, r3, #12
 8000aaa:	005a      	lsls	r2, r3, #1
 8000aac:	0fdb      	lsrs	r3, r3, #31
 8000aae:	4650      	mov	r0, sl
 8000ab0:	0b24      	lsrs	r4, r4, #12
 8000ab2:	0d52      	lsrs	r2, r2, #21
 8000ab4:	4698      	mov	r8, r3
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dmul+0x5e>
 8000ab8:	e076      	b.n	8000ba8 <__aeabi_dmul+0x14c>
 8000aba:	4b5f      	ldr	r3, [pc, #380]	; (8000c38 <__aeabi_dmul+0x1dc>)
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d06d      	beq.n	8000b9c <__aeabi_dmul+0x140>
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	0f41      	lsrs	r1, r0, #29
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	495c      	ldr	r1, [pc, #368]	; (8000c3c <__aeabi_dmul+0x1e0>)
 8000aca:	00e4      	lsls	r4, r4, #3
 8000acc:	468c      	mov	ip, r1
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	00c3      	lsls	r3, r0, #3
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	4462      	add	r2, ip
 8000ad6:	4641      	mov	r1, r8
 8000ad8:	18b6      	adds	r6, r6, r2
 8000ada:	4069      	eors	r1, r5
 8000adc:	1c72      	adds	r2, r6, #1
 8000ade:	9101      	str	r1, [sp, #4]
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	4307      	orrs	r7, r0
 8000ae4:	2f0f      	cmp	r7, #15
 8000ae6:	d900      	bls.n	8000aea <__aeabi_dmul+0x8e>
 8000ae8:	e0b0      	b.n	8000c4c <__aeabi_dmul+0x1f0>
 8000aea:	4a55      	ldr	r2, [pc, #340]	; (8000c40 <__aeabi_dmul+0x1e4>)
 8000aec:	00bf      	lsls	r7, r7, #2
 8000aee:	59d2      	ldr	r2, [r2, r7]
 8000af0:	4697      	mov	pc, r2
 8000af2:	465b      	mov	r3, fp
 8000af4:	4303      	orrs	r3, r0
 8000af6:	4699      	mov	r9, r3
 8000af8:	d000      	beq.n	8000afc <__aeabi_dmul+0xa0>
 8000afa:	e087      	b.n	8000c0c <__aeabi_dmul+0x1b0>
 8000afc:	2300      	movs	r3, #0
 8000afe:	469b      	mov	fp, r3
 8000b00:	3302      	adds	r3, #2
 8000b02:	2708      	movs	r7, #8
 8000b04:	9302      	str	r3, [sp, #8]
 8000b06:	e7ce      	b.n	8000aa6 <__aeabi_dmul+0x4a>
 8000b08:	4642      	mov	r2, r8
 8000b0a:	9201      	str	r2, [sp, #4]
 8000b0c:	2802      	cmp	r0, #2
 8000b0e:	d067      	beq.n	8000be0 <__aeabi_dmul+0x184>
 8000b10:	2803      	cmp	r0, #3
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dmul+0xba>
 8000b14:	e20e      	b.n	8000f34 <__aeabi_dmul+0x4d8>
 8000b16:	2801      	cmp	r0, #1
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dmul+0xc0>
 8000b1a:	e162      	b.n	8000de2 <__aeabi_dmul+0x386>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2400      	movs	r4, #0
 8000b20:	2200      	movs	r2, #0
 8000b22:	4699      	mov	r9, r3
 8000b24:	9901      	ldr	r1, [sp, #4]
 8000b26:	4001      	ands	r1, r0
 8000b28:	b2cd      	uxtb	r5, r1
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	0312      	lsls	r2, r2, #12
 8000b2e:	0d0b      	lsrs	r3, r1, #20
 8000b30:	0b12      	lsrs	r2, r2, #12
 8000b32:	051b      	lsls	r3, r3, #20
 8000b34:	4313      	orrs	r3, r2
 8000b36:	4a43      	ldr	r2, [pc, #268]	; (8000c44 <__aeabi_dmul+0x1e8>)
 8000b38:	0524      	lsls	r4, r4, #20
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	431c      	orrs	r4, r3
 8000b3e:	0064      	lsls	r4, r4, #1
 8000b40:	07ed      	lsls	r5, r5, #31
 8000b42:	0864      	lsrs	r4, r4, #1
 8000b44:	432c      	orrs	r4, r5
 8000b46:	4648      	mov	r0, r9
 8000b48:	0021      	movs	r1, r4
 8000b4a:	b007      	add	sp, #28
 8000b4c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b4e:	4690      	mov	r8, r2
 8000b50:	4699      	mov	r9, r3
 8000b52:	46a2      	mov	sl, r4
 8000b54:	46ab      	mov	fp, r5
 8000b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b58:	4303      	orrs	r3, r0
 8000b5a:	4699      	mov	r9, r3
 8000b5c:	d04f      	beq.n	8000bfe <__aeabi_dmul+0x1a2>
 8000b5e:	465b      	mov	r3, fp
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dmul+0x10a>
 8000b64:	e189      	b.n	8000e7a <__aeabi_dmul+0x41e>
 8000b66:	4658      	mov	r0, fp
 8000b68:	f000 fafc 	bl	8001164 <__clzsi2>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	3b0b      	subs	r3, #11
 8000b70:	2b1c      	cmp	r3, #28
 8000b72:	dd00      	ble.n	8000b76 <__aeabi_dmul+0x11a>
 8000b74:	e17a      	b.n	8000e6c <__aeabi_dmul+0x410>
 8000b76:	221d      	movs	r2, #29
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	003a      	movs	r2, r7
 8000b7c:	0001      	movs	r1, r0
 8000b7e:	465c      	mov	r4, fp
 8000b80:	40da      	lsrs	r2, r3
 8000b82:	3908      	subs	r1, #8
 8000b84:	408c      	lsls	r4, r1
 8000b86:	0013      	movs	r3, r2
 8000b88:	408f      	lsls	r7, r1
 8000b8a:	4323      	orrs	r3, r4
 8000b8c:	469b      	mov	fp, r3
 8000b8e:	46b9      	mov	r9, r7
 8000b90:	2300      	movs	r3, #0
 8000b92:	4e2d      	ldr	r6, [pc, #180]	; (8000c48 <__aeabi_dmul+0x1ec>)
 8000b94:	2700      	movs	r7, #0
 8000b96:	1a36      	subs	r6, r6, r0
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	e784      	b.n	8000aa6 <__aeabi_dmul+0x4a>
 8000b9c:	4653      	mov	r3, sl
 8000b9e:	4323      	orrs	r3, r4
 8000ba0:	d12a      	bne.n	8000bf8 <__aeabi_dmul+0x19c>
 8000ba2:	2400      	movs	r4, #0
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	e796      	b.n	8000ad6 <__aeabi_dmul+0x7a>
 8000ba8:	4653      	mov	r3, sl
 8000baa:	4323      	orrs	r3, r4
 8000bac:	d020      	beq.n	8000bf0 <__aeabi_dmul+0x194>
 8000bae:	2c00      	cmp	r4, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dmul+0x158>
 8000bb2:	e157      	b.n	8000e64 <__aeabi_dmul+0x408>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f000 fad5 	bl	8001164 <__clzsi2>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	3b0b      	subs	r3, #11
 8000bbe:	2b1c      	cmp	r3, #28
 8000bc0:	dd00      	ble.n	8000bc4 <__aeabi_dmul+0x168>
 8000bc2:	e149      	b.n	8000e58 <__aeabi_dmul+0x3fc>
 8000bc4:	211d      	movs	r1, #29
 8000bc6:	1acb      	subs	r3, r1, r3
 8000bc8:	4651      	mov	r1, sl
 8000bca:	0002      	movs	r2, r0
 8000bcc:	40d9      	lsrs	r1, r3
 8000bce:	4653      	mov	r3, sl
 8000bd0:	3a08      	subs	r2, #8
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	4093      	lsls	r3, r2
 8000bd6:	430c      	orrs	r4, r1
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <__aeabi_dmul+0x1ec>)
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e77a      	b.n	8000ad6 <__aeabi_dmul+0x7a>
 8000be0:	2501      	movs	r5, #1
 8000be2:	9b01      	ldr	r3, [sp, #4]
 8000be4:	4c14      	ldr	r4, [pc, #80]	; (8000c38 <__aeabi_dmul+0x1dc>)
 8000be6:	401d      	ands	r5, r3
 8000be8:	2300      	movs	r3, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	4699      	mov	r9, r3
 8000bee:	e79c      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_dmul+0x7a>
 8000bf8:	4653      	mov	r3, sl
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	e76b      	b.n	8000ad6 <__aeabi_dmul+0x7a>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	469b      	mov	fp, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	2704      	movs	r7, #4
 8000c06:	2600      	movs	r6, #0
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	e74c      	b.n	8000aa6 <__aeabi_dmul+0x4a>
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4681      	mov	r9, r0
 8000c10:	270c      	movs	r7, #12
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	e747      	b.n	8000aa6 <__aeabi_dmul+0x4a>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2500      	movs	r5, #0
 8000c1c:	0312      	lsls	r2, r2, #12
 8000c1e:	4699      	mov	r9, r3
 8000c20:	4c05      	ldr	r4, [pc, #20]	; (8000c38 <__aeabi_dmul+0x1dc>)
 8000c22:	e782      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000c24:	465c      	mov	r4, fp
 8000c26:	464b      	mov	r3, r9
 8000c28:	9802      	ldr	r0, [sp, #8]
 8000c2a:	e76f      	b.n	8000b0c <__aeabi_dmul+0xb0>
 8000c2c:	465c      	mov	r4, fp
 8000c2e:	464b      	mov	r3, r9
 8000c30:	9501      	str	r5, [sp, #4]
 8000c32:	9802      	ldr	r0, [sp, #8]
 8000c34:	e76a      	b.n	8000b0c <__aeabi_dmul+0xb0>
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	000007ff 	.word	0x000007ff
 8000c3c:	fffffc01 	.word	0xfffffc01
 8000c40:	08003d64 	.word	0x08003d64
 8000c44:	800fffff 	.word	0x800fffff
 8000c48:	fffffc0d 	.word	0xfffffc0d
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	4649      	mov	r1, r9
 8000c50:	0c17      	lsrs	r7, r2, #16
 8000c52:	0c1a      	lsrs	r2, r3, #16
 8000c54:	041b      	lsls	r3, r3, #16
 8000c56:	0c1b      	lsrs	r3, r3, #16
 8000c58:	0408      	lsls	r0, r1, #16
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	0c00      	lsrs	r0, r0, #16
 8000c5e:	4341      	muls	r1, r0
 8000c60:	0015      	movs	r5, r2
 8000c62:	4688      	mov	r8, r1
 8000c64:	0019      	movs	r1, r3
 8000c66:	437d      	muls	r5, r7
 8000c68:	4379      	muls	r1, r7
 8000c6a:	9503      	str	r5, [sp, #12]
 8000c6c:	4689      	mov	r9, r1
 8000c6e:	0029      	movs	r1, r5
 8000c70:	0015      	movs	r5, r2
 8000c72:	4345      	muls	r5, r0
 8000c74:	444d      	add	r5, r9
 8000c76:	9502      	str	r5, [sp, #8]
 8000c78:	4645      	mov	r5, r8
 8000c7a:	0c2d      	lsrs	r5, r5, #16
 8000c7c:	46aa      	mov	sl, r5
 8000c7e:	9d02      	ldr	r5, [sp, #8]
 8000c80:	4455      	add	r5, sl
 8000c82:	45a9      	cmp	r9, r5
 8000c84:	d906      	bls.n	8000c94 <__aeabi_dmul+0x238>
 8000c86:	468a      	mov	sl, r1
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0249      	lsls	r1, r1, #9
 8000c8c:	4689      	mov	r9, r1
 8000c8e:	44ca      	add	sl, r9
 8000c90:	4651      	mov	r1, sl
 8000c92:	9103      	str	r1, [sp, #12]
 8000c94:	0c29      	lsrs	r1, r5, #16
 8000c96:	9104      	str	r1, [sp, #16]
 8000c98:	4641      	mov	r1, r8
 8000c9a:	0409      	lsls	r1, r1, #16
 8000c9c:	042d      	lsls	r5, r5, #16
 8000c9e:	0c09      	lsrs	r1, r1, #16
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	0029      	movs	r1, r5
 8000ca4:	0c25      	lsrs	r5, r4, #16
 8000ca6:	0424      	lsls	r4, r4, #16
 8000ca8:	4441      	add	r1, r8
 8000caa:	0c24      	lsrs	r4, r4, #16
 8000cac:	9105      	str	r1, [sp, #20]
 8000cae:	0021      	movs	r1, r4
 8000cb0:	4341      	muls	r1, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	0021      	movs	r1, r4
 8000cb6:	4379      	muls	r1, r7
 8000cb8:	468a      	mov	sl, r1
 8000cba:	4368      	muls	r0, r5
 8000cbc:	4641      	mov	r1, r8
 8000cbe:	4450      	add	r0, sl
 8000cc0:	4681      	mov	r9, r0
 8000cc2:	0c08      	lsrs	r0, r1, #16
 8000cc4:	4448      	add	r0, r9
 8000cc6:	436f      	muls	r7, r5
 8000cc8:	4582      	cmp	sl, r0
 8000cca:	d903      	bls.n	8000cd4 <__aeabi_dmul+0x278>
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	0249      	lsls	r1, r1, #9
 8000cd0:	4689      	mov	r9, r1
 8000cd2:	444f      	add	r7, r9
 8000cd4:	0c01      	lsrs	r1, r0, #16
 8000cd6:	4689      	mov	r9, r1
 8000cd8:	0039      	movs	r1, r7
 8000cda:	4449      	add	r1, r9
 8000cdc:	9102      	str	r1, [sp, #8]
 8000cde:	4641      	mov	r1, r8
 8000ce0:	040f      	lsls	r7, r1, #16
 8000ce2:	9904      	ldr	r1, [sp, #16]
 8000ce4:	0c3f      	lsrs	r7, r7, #16
 8000ce6:	4688      	mov	r8, r1
 8000ce8:	0400      	lsls	r0, r0, #16
 8000cea:	19c0      	adds	r0, r0, r7
 8000cec:	4480      	add	r8, r0
 8000cee:	4641      	mov	r1, r8
 8000cf0:	9104      	str	r1, [sp, #16]
 8000cf2:	4659      	mov	r1, fp
 8000cf4:	0c0f      	lsrs	r7, r1, #16
 8000cf6:	0409      	lsls	r1, r1, #16
 8000cf8:	0c09      	lsrs	r1, r1, #16
 8000cfa:	4688      	mov	r8, r1
 8000cfc:	4359      	muls	r1, r3
 8000cfe:	468a      	mov	sl, r1
 8000d00:	0039      	movs	r1, r7
 8000d02:	4351      	muls	r1, r2
 8000d04:	4689      	mov	r9, r1
 8000d06:	4641      	mov	r1, r8
 8000d08:	434a      	muls	r2, r1
 8000d0a:	4651      	mov	r1, sl
 8000d0c:	0c09      	lsrs	r1, r1, #16
 8000d0e:	468b      	mov	fp, r1
 8000d10:	437b      	muls	r3, r7
 8000d12:	18d2      	adds	r2, r2, r3
 8000d14:	445a      	add	r2, fp
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d903      	bls.n	8000d22 <__aeabi_dmul+0x2c6>
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	469b      	mov	fp, r3
 8000d20:	44d9      	add	r9, fp
 8000d22:	4651      	mov	r1, sl
 8000d24:	0409      	lsls	r1, r1, #16
 8000d26:	0c09      	lsrs	r1, r1, #16
 8000d28:	468a      	mov	sl, r1
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	4361      	muls	r1, r4
 8000d2e:	437c      	muls	r4, r7
 8000d30:	0c13      	lsrs	r3, r2, #16
 8000d32:	0412      	lsls	r2, r2, #16
 8000d34:	444b      	add	r3, r9
 8000d36:	4452      	add	r2, sl
 8000d38:	46a1      	mov	r9, r4
 8000d3a:	468a      	mov	sl, r1
 8000d3c:	003c      	movs	r4, r7
 8000d3e:	4641      	mov	r1, r8
 8000d40:	436c      	muls	r4, r5
 8000d42:	434d      	muls	r5, r1
 8000d44:	4651      	mov	r1, sl
 8000d46:	444d      	add	r5, r9
 8000d48:	0c0f      	lsrs	r7, r1, #16
 8000d4a:	197d      	adds	r5, r7, r5
 8000d4c:	45a9      	cmp	r9, r5
 8000d4e:	d903      	bls.n	8000d58 <__aeabi_dmul+0x2fc>
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0249      	lsls	r1, r1, #9
 8000d54:	4688      	mov	r8, r1
 8000d56:	4444      	add	r4, r8
 8000d58:	9f04      	ldr	r7, [sp, #16]
 8000d5a:	9903      	ldr	r1, [sp, #12]
 8000d5c:	46b8      	mov	r8, r7
 8000d5e:	4441      	add	r1, r8
 8000d60:	468b      	mov	fp, r1
 8000d62:	4583      	cmp	fp, r0
 8000d64:	4180      	sbcs	r0, r0
 8000d66:	4241      	negs	r1, r0
 8000d68:	4688      	mov	r8, r1
 8000d6a:	4651      	mov	r1, sl
 8000d6c:	0408      	lsls	r0, r1, #16
 8000d6e:	042f      	lsls	r7, r5, #16
 8000d70:	0c00      	lsrs	r0, r0, #16
 8000d72:	183f      	adds	r7, r7, r0
 8000d74:	4658      	mov	r0, fp
 8000d76:	9902      	ldr	r1, [sp, #8]
 8000d78:	1810      	adds	r0, r2, r0
 8000d7a:	4689      	mov	r9, r1
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	4192      	sbcs	r2, r2
 8000d80:	444f      	add	r7, r9
 8000d82:	46ba      	mov	sl, r7
 8000d84:	4252      	negs	r2, r2
 8000d86:	4699      	mov	r9, r3
 8000d88:	4693      	mov	fp, r2
 8000d8a:	44c2      	add	sl, r8
 8000d8c:	44d1      	add	r9, sl
 8000d8e:	44cb      	add	fp, r9
 8000d90:	428f      	cmp	r7, r1
 8000d92:	41bf      	sbcs	r7, r7
 8000d94:	45c2      	cmp	sl, r8
 8000d96:	4189      	sbcs	r1, r1
 8000d98:	4599      	cmp	r9, r3
 8000d9a:	419b      	sbcs	r3, r3
 8000d9c:	4593      	cmp	fp, r2
 8000d9e:	4192      	sbcs	r2, r2
 8000da0:	427f      	negs	r7, r7
 8000da2:	4249      	negs	r1, r1
 8000da4:	0c2d      	lsrs	r5, r5, #16
 8000da6:	4252      	negs	r2, r2
 8000da8:	430f      	orrs	r7, r1
 8000daa:	425b      	negs	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	197f      	adds	r7, r7, r5
 8000db0:	18ff      	adds	r7, r7, r3
 8000db2:	465b      	mov	r3, fp
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	0ddb      	lsrs	r3, r3, #23
 8000db8:	9a05      	ldr	r2, [sp, #20]
 8000dba:	0264      	lsls	r4, r4, #9
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	0243      	lsls	r3, r0, #9
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	1e5d      	subs	r5, r3, #1
 8000dc4:	41ab      	sbcs	r3, r5
 8000dc6:	465a      	mov	r2, fp
 8000dc8:	0dc0      	lsrs	r0, r0, #23
 8000dca:	4303      	orrs	r3, r0
 8000dcc:	0252      	lsls	r2, r2, #9
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	01e2      	lsls	r2, r4, #7
 8000dd2:	d556      	bpl.n	8000e82 <__aeabi_dmul+0x426>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	085a      	lsrs	r2, r3, #1
 8000dd8:	4003      	ands	r3, r0
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	07e2      	lsls	r2, r4, #31
 8000dde:	4313      	orrs	r3, r2
 8000de0:	0864      	lsrs	r4, r4, #1
 8000de2:	485a      	ldr	r0, [pc, #360]	; (8000f4c <__aeabi_dmul+0x4f0>)
 8000de4:	4460      	add	r0, ip
 8000de6:	2800      	cmp	r0, #0
 8000de8:	dd4d      	ble.n	8000e86 <__aeabi_dmul+0x42a>
 8000dea:	075a      	lsls	r2, r3, #29
 8000dec:	d009      	beq.n	8000e02 <__aeabi_dmul+0x3a6>
 8000dee:	220f      	movs	r2, #15
 8000df0:	401a      	ands	r2, r3
 8000df2:	2a04      	cmp	r2, #4
 8000df4:	d005      	beq.n	8000e02 <__aeabi_dmul+0x3a6>
 8000df6:	1d1a      	adds	r2, r3, #4
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	419b      	sbcs	r3, r3
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	18e4      	adds	r4, r4, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	01e2      	lsls	r2, r4, #7
 8000e04:	d504      	bpl.n	8000e10 <__aeabi_dmul+0x3b4>
 8000e06:	2080      	movs	r0, #128	; 0x80
 8000e08:	4a51      	ldr	r2, [pc, #324]	; (8000f50 <__aeabi_dmul+0x4f4>)
 8000e0a:	00c0      	lsls	r0, r0, #3
 8000e0c:	4014      	ands	r4, r2
 8000e0e:	4460      	add	r0, ip
 8000e10:	4a50      	ldr	r2, [pc, #320]	; (8000f54 <__aeabi_dmul+0x4f8>)
 8000e12:	4290      	cmp	r0, r2
 8000e14:	dd00      	ble.n	8000e18 <__aeabi_dmul+0x3bc>
 8000e16:	e6e3      	b.n	8000be0 <__aeabi_dmul+0x184>
 8000e18:	2501      	movs	r5, #1
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	0762      	lsls	r2, r4, #29
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	0264      	lsls	r4, r4, #9
 8000e22:	9b01      	ldr	r3, [sp, #4]
 8000e24:	4691      	mov	r9, r2
 8000e26:	0b22      	lsrs	r2, r4, #12
 8000e28:	0544      	lsls	r4, r0, #21
 8000e2a:	0d64      	lsrs	r4, r4, #21
 8000e2c:	401d      	ands	r5, r3
 8000e2e:	e67c      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	4659      	mov	r1, fp
 8000e34:	0312      	lsls	r2, r2, #12
 8000e36:	4211      	tst	r1, r2
 8000e38:	d008      	beq.n	8000e4c <__aeabi_dmul+0x3f0>
 8000e3a:	4214      	tst	r4, r2
 8000e3c:	d106      	bne.n	8000e4c <__aeabi_dmul+0x3f0>
 8000e3e:	4322      	orrs	r2, r4
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	0b12      	lsrs	r2, r2, #12
 8000e44:	4645      	mov	r5, r8
 8000e46:	4699      	mov	r9, r3
 8000e48:	4c43      	ldr	r4, [pc, #268]	; (8000f58 <__aeabi_dmul+0x4fc>)
 8000e4a:	e66e      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000e4c:	465b      	mov	r3, fp
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	0312      	lsls	r2, r2, #12
 8000e52:	0b12      	lsrs	r2, r2, #12
 8000e54:	4c40      	ldr	r4, [pc, #256]	; (8000f58 <__aeabi_dmul+0x4fc>)
 8000e56:	e668      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	4654      	mov	r4, sl
 8000e5c:	3b28      	subs	r3, #40	; 0x28
 8000e5e:	409c      	lsls	r4, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	e6b9      	b.n	8000bd8 <__aeabi_dmul+0x17c>
 8000e64:	f000 f97e 	bl	8001164 <__clzsi2>
 8000e68:	3020      	adds	r0, #32
 8000e6a:	e6a6      	b.n	8000bba <__aeabi_dmul+0x15e>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	3b28      	subs	r3, #40	; 0x28
 8000e70:	409f      	lsls	r7, r3
 8000e72:	2300      	movs	r3, #0
 8000e74:	46bb      	mov	fp, r7
 8000e76:	4699      	mov	r9, r3
 8000e78:	e68a      	b.n	8000b90 <__aeabi_dmul+0x134>
 8000e7a:	f000 f973 	bl	8001164 <__clzsi2>
 8000e7e:	3020      	adds	r0, #32
 8000e80:	e674      	b.n	8000b6c <__aeabi_dmul+0x110>
 8000e82:	46b4      	mov	ip, r6
 8000e84:	e7ad      	b.n	8000de2 <__aeabi_dmul+0x386>
 8000e86:	2501      	movs	r5, #1
 8000e88:	1a2a      	subs	r2, r5, r0
 8000e8a:	2a38      	cmp	r2, #56	; 0x38
 8000e8c:	dd06      	ble.n	8000e9c <__aeabi_dmul+0x440>
 8000e8e:	9b01      	ldr	r3, [sp, #4]
 8000e90:	2400      	movs	r4, #0
 8000e92:	401d      	ands	r5, r3
 8000e94:	2300      	movs	r3, #0
 8000e96:	2200      	movs	r2, #0
 8000e98:	4699      	mov	r9, r3
 8000e9a:	e646      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000e9c:	2a1f      	cmp	r2, #31
 8000e9e:	dc21      	bgt.n	8000ee4 <__aeabi_dmul+0x488>
 8000ea0:	2520      	movs	r5, #32
 8000ea2:	0020      	movs	r0, r4
 8000ea4:	1aad      	subs	r5, r5, r2
 8000ea6:	001e      	movs	r6, r3
 8000ea8:	40ab      	lsls	r3, r5
 8000eaa:	40a8      	lsls	r0, r5
 8000eac:	40d6      	lsrs	r6, r2
 8000eae:	1e5d      	subs	r5, r3, #1
 8000eb0:	41ab      	sbcs	r3, r5
 8000eb2:	4330      	orrs	r0, r6
 8000eb4:	4318      	orrs	r0, r3
 8000eb6:	40d4      	lsrs	r4, r2
 8000eb8:	0743      	lsls	r3, r0, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_dmul+0x474>
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4003      	ands	r3, r0
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_dmul+0x474>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	1d18      	adds	r0, r3, #4
 8000ec8:	4298      	cmp	r0, r3
 8000eca:	419b      	sbcs	r3, r3
 8000ecc:	425b      	negs	r3, r3
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	0223      	lsls	r3, r4, #8
 8000ed2:	d521      	bpl.n	8000f18 <__aeabi_dmul+0x4bc>
 8000ed4:	2501      	movs	r5, #1
 8000ed6:	9b01      	ldr	r3, [sp, #4]
 8000ed8:	2401      	movs	r4, #1
 8000eda:	401d      	ands	r5, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4699      	mov	r9, r3
 8000ee2:	e622      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000ee4:	251f      	movs	r5, #31
 8000ee6:	0021      	movs	r1, r4
 8000ee8:	426d      	negs	r5, r5
 8000eea:	1a28      	subs	r0, r5, r0
 8000eec:	40c1      	lsrs	r1, r0
 8000eee:	0008      	movs	r0, r1
 8000ef0:	2a20      	cmp	r2, #32
 8000ef2:	d01d      	beq.n	8000f30 <__aeabi_dmul+0x4d4>
 8000ef4:	355f      	adds	r5, #95	; 0x5f
 8000ef6:	1aaa      	subs	r2, r5, r2
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	4323      	orrs	r3, r4
 8000efc:	1e5c      	subs	r4, r3, #1
 8000efe:	41a3      	sbcs	r3, r4
 8000f00:	2507      	movs	r5, #7
 8000f02:	4303      	orrs	r3, r0
 8000f04:	401d      	ands	r5, r3
 8000f06:	2200      	movs	r2, #0
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	d009      	beq.n	8000f20 <__aeabi_dmul+0x4c4>
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	2400      	movs	r4, #0
 8000f10:	401a      	ands	r2, r3
 8000f12:	0018      	movs	r0, r3
 8000f14:	2a04      	cmp	r2, #4
 8000f16:	d1d6      	bne.n	8000ec6 <__aeabi_dmul+0x46a>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	0765      	lsls	r5, r4, #29
 8000f1c:	0264      	lsls	r4, r4, #9
 8000f1e:	0b22      	lsrs	r2, r4, #12
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	432b      	orrs	r3, r5
 8000f24:	2501      	movs	r5, #1
 8000f26:	4699      	mov	r9, r3
 8000f28:	9b01      	ldr	r3, [sp, #4]
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	401d      	ands	r5, r3
 8000f2e:	e5fc      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000f30:	2400      	movs	r4, #0
 8000f32:	e7e2      	b.n	8000efa <__aeabi_dmul+0x49e>
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	2501      	movs	r5, #1
 8000f38:	0312      	lsls	r2, r2, #12
 8000f3a:	4322      	orrs	r2, r4
 8000f3c:	9901      	ldr	r1, [sp, #4]
 8000f3e:	0312      	lsls	r2, r2, #12
 8000f40:	0b12      	lsrs	r2, r2, #12
 8000f42:	400d      	ands	r5, r1
 8000f44:	4699      	mov	r9, r3
 8000f46:	4c04      	ldr	r4, [pc, #16]	; (8000f58 <__aeabi_dmul+0x4fc>)
 8000f48:	e5ef      	b.n	8000b2a <__aeabi_dmul+0xce>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	000003ff 	.word	0x000003ff
 8000f50:	feffffff 	.word	0xfeffffff
 8000f54:	000007fe 	.word	0x000007fe
 8000f58:	000007ff 	.word	0x000007ff

08000f5c <__aeabi_i2d>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d030      	beq.n	8000fc4 <__aeabi_i2d+0x68>
 8000f62:	17c3      	asrs	r3, r0, #31
 8000f64:	18c4      	adds	r4, r0, r3
 8000f66:	405c      	eors	r4, r3
 8000f68:	0fc5      	lsrs	r5, r0, #31
 8000f6a:	0020      	movs	r0, r4
 8000f6c:	f000 f8fa 	bl	8001164 <__clzsi2>
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <__aeabi_i2d+0x74>)
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <__aeabi_i2d+0x78>)
 8000f74:	1a1b      	subs	r3, r3, r0
 8000f76:	1ad2      	subs	r2, r2, r3
 8000f78:	2a1f      	cmp	r2, #31
 8000f7a:	dd18      	ble.n	8000fae <__aeabi_i2d+0x52>
 8000f7c:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <__aeabi_i2d+0x7c>)
 8000f7e:	1ad2      	subs	r2, r2, r3
 8000f80:	4094      	lsls	r4, r2
 8000f82:	2200      	movs	r2, #0
 8000f84:	0324      	lsls	r4, r4, #12
 8000f86:	055b      	lsls	r3, r3, #21
 8000f88:	0b24      	lsrs	r4, r4, #12
 8000f8a:	0d5b      	lsrs	r3, r3, #21
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	0010      	movs	r0, r2
 8000f90:	0324      	lsls	r4, r4, #12
 8000f92:	0d0a      	lsrs	r2, r1, #20
 8000f94:	0b24      	lsrs	r4, r4, #12
 8000f96:	0512      	lsls	r2, r2, #20
 8000f98:	4322      	orrs	r2, r4
 8000f9a:	4c10      	ldr	r4, [pc, #64]	; (8000fdc <__aeabi_i2d+0x80>)
 8000f9c:	051b      	lsls	r3, r3, #20
 8000f9e:	4022      	ands	r2, r4
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	07ed      	lsls	r5, r5, #31
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	432b      	orrs	r3, r5
 8000faa:	0019      	movs	r1, r3
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	0021      	movs	r1, r4
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	210b      	movs	r1, #11
 8000fb6:	1a08      	subs	r0, r1, r0
 8000fb8:	40c4      	lsrs	r4, r0
 8000fba:	055b      	lsls	r3, r3, #21
 8000fbc:	0324      	lsls	r4, r4, #12
 8000fbe:	0b24      	lsrs	r4, r4, #12
 8000fc0:	0d5b      	lsrs	r3, r3, #21
 8000fc2:	e7e3      	b.n	8000f8c <__aeabi_i2d+0x30>
 8000fc4:	2500      	movs	r5, #0
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2400      	movs	r4, #0
 8000fca:	2200      	movs	r2, #0
 8000fcc:	e7de      	b.n	8000f8c <__aeabi_i2d+0x30>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	0000041e 	.word	0x0000041e
 8000fd4:	00000433 	.word	0x00000433
 8000fd8:	00000413 	.word	0x00000413
 8000fdc:	800fffff 	.word	0x800fffff

08000fe0 <__aeabi_ui2d>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	1e04      	subs	r4, r0, #0
 8000fe4:	d028      	beq.n	8001038 <__aeabi_ui2d+0x58>
 8000fe6:	f000 f8bd 	bl	8001164 <__clzsi2>
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <__aeabi_ui2d+0x60>)
 8000fec:	4a15      	ldr	r2, [pc, #84]	; (8001044 <__aeabi_ui2d+0x64>)
 8000fee:	1a1b      	subs	r3, r3, r0
 8000ff0:	1ad2      	subs	r2, r2, r3
 8000ff2:	2a1f      	cmp	r2, #31
 8000ff4:	dd15      	ble.n	8001022 <__aeabi_ui2d+0x42>
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <__aeabi_ui2d+0x68>)
 8000ff8:	1ad2      	subs	r2, r2, r3
 8000ffa:	4094      	lsls	r4, r2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	0324      	lsls	r4, r4, #12
 8001000:	055b      	lsls	r3, r3, #21
 8001002:	0b24      	lsrs	r4, r4, #12
 8001004:	0d5b      	lsrs	r3, r3, #21
 8001006:	2100      	movs	r1, #0
 8001008:	0010      	movs	r0, r2
 800100a:	0324      	lsls	r4, r4, #12
 800100c:	0d0a      	lsrs	r2, r1, #20
 800100e:	0b24      	lsrs	r4, r4, #12
 8001010:	0512      	lsls	r2, r2, #20
 8001012:	4322      	orrs	r2, r4
 8001014:	4c0d      	ldr	r4, [pc, #52]	; (800104c <__aeabi_ui2d+0x6c>)
 8001016:	051b      	lsls	r3, r3, #20
 8001018:	4022      	ands	r2, r4
 800101a:	4313      	orrs	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	0859      	lsrs	r1, r3, #1
 8001020:	bd10      	pop	{r4, pc}
 8001022:	0021      	movs	r1, r4
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	210b      	movs	r1, #11
 800102a:	1a08      	subs	r0, r1, r0
 800102c:	40c4      	lsrs	r4, r0
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	0324      	lsls	r4, r4, #12
 8001032:	0b24      	lsrs	r4, r4, #12
 8001034:	0d5b      	lsrs	r3, r3, #21
 8001036:	e7e6      	b.n	8001006 <__aeabi_ui2d+0x26>
 8001038:	2300      	movs	r3, #0
 800103a:	2400      	movs	r4, #0
 800103c:	2200      	movs	r2, #0
 800103e:	e7e2      	b.n	8001006 <__aeabi_ui2d+0x26>
 8001040:	0000041e 	.word	0x0000041e
 8001044:	00000433 	.word	0x00000433
 8001048:	00000413 	.word	0x00000413
 800104c:	800fffff 	.word	0x800fffff

08001050 <__aeabi_d2f>:
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	004c      	lsls	r4, r1, #1
 8001054:	0d64      	lsrs	r4, r4, #21
 8001056:	030b      	lsls	r3, r1, #12
 8001058:	1c62      	adds	r2, r4, #1
 800105a:	0f45      	lsrs	r5, r0, #29
 800105c:	0a5b      	lsrs	r3, r3, #9
 800105e:	0552      	lsls	r2, r2, #21
 8001060:	432b      	orrs	r3, r5
 8001062:	0fc9      	lsrs	r1, r1, #31
 8001064:	00c5      	lsls	r5, r0, #3
 8001066:	0d52      	lsrs	r2, r2, #21
 8001068:	2a01      	cmp	r2, #1
 800106a:	dd28      	ble.n	80010be <__aeabi_d2f+0x6e>
 800106c:	4a3a      	ldr	r2, [pc, #232]	; (8001158 <__aeabi_d2f+0x108>)
 800106e:	18a6      	adds	r6, r4, r2
 8001070:	2efe      	cmp	r6, #254	; 0xfe
 8001072:	dc1b      	bgt.n	80010ac <__aeabi_d2f+0x5c>
 8001074:	2e00      	cmp	r6, #0
 8001076:	dd3e      	ble.n	80010f6 <__aeabi_d2f+0xa6>
 8001078:	0180      	lsls	r0, r0, #6
 800107a:	0002      	movs	r2, r0
 800107c:	1e50      	subs	r0, r2, #1
 800107e:	4182      	sbcs	r2, r0
 8001080:	0f6d      	lsrs	r5, r5, #29
 8001082:	432a      	orrs	r2, r5
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4313      	orrs	r3, r2
 8001088:	075a      	lsls	r2, r3, #29
 800108a:	d004      	beq.n	8001096 <__aeabi_d2f+0x46>
 800108c:	220f      	movs	r2, #15
 800108e:	401a      	ands	r2, r3
 8001090:	2a04      	cmp	r2, #4
 8001092:	d000      	beq.n	8001096 <__aeabi_d2f+0x46>
 8001094:	3304      	adds	r3, #4
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	04d2      	lsls	r2, r2, #19
 800109a:	401a      	ands	r2, r3
 800109c:	d05a      	beq.n	8001154 <__aeabi_d2f+0x104>
 800109e:	3601      	adds	r6, #1
 80010a0:	2eff      	cmp	r6, #255	; 0xff
 80010a2:	d003      	beq.n	80010ac <__aeabi_d2f+0x5c>
 80010a4:	019b      	lsls	r3, r3, #6
 80010a6:	0a5b      	lsrs	r3, r3, #9
 80010a8:	b2f4      	uxtb	r4, r6
 80010aa:	e001      	b.n	80010b0 <__aeabi_d2f+0x60>
 80010ac:	24ff      	movs	r4, #255	; 0xff
 80010ae:	2300      	movs	r3, #0
 80010b0:	0258      	lsls	r0, r3, #9
 80010b2:	05e4      	lsls	r4, r4, #23
 80010b4:	0a40      	lsrs	r0, r0, #9
 80010b6:	07c9      	lsls	r1, r1, #31
 80010b8:	4320      	orrs	r0, r4
 80010ba:	4308      	orrs	r0, r1
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010be:	2c00      	cmp	r4, #0
 80010c0:	d007      	beq.n	80010d2 <__aeabi_d2f+0x82>
 80010c2:	431d      	orrs	r5, r3
 80010c4:	d0f2      	beq.n	80010ac <__aeabi_d2f+0x5c>
 80010c6:	2080      	movs	r0, #128	; 0x80
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	0480      	lsls	r0, r0, #18
 80010cc:	4303      	orrs	r3, r0
 80010ce:	26ff      	movs	r6, #255	; 0xff
 80010d0:	e7da      	b.n	8001088 <__aeabi_d2f+0x38>
 80010d2:	432b      	orrs	r3, r5
 80010d4:	d003      	beq.n	80010de <__aeabi_d2f+0x8e>
 80010d6:	2305      	movs	r3, #5
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	2cff      	cmp	r4, #255	; 0xff
 80010dc:	d003      	beq.n	80010e6 <__aeabi_d2f+0x96>
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	0a5b      	lsrs	r3, r3, #9
 80010e2:	b2e4      	uxtb	r4, r4
 80010e4:	e7e4      	b.n	80010b0 <__aeabi_d2f+0x60>
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d032      	beq.n	8001150 <__aeabi_d2f+0x100>
 80010ea:	2080      	movs	r0, #128	; 0x80
 80010ec:	03c0      	lsls	r0, r0, #15
 80010ee:	4303      	orrs	r3, r0
 80010f0:	025b      	lsls	r3, r3, #9
 80010f2:	0a5b      	lsrs	r3, r3, #9
 80010f4:	e7dc      	b.n	80010b0 <__aeabi_d2f+0x60>
 80010f6:	0032      	movs	r2, r6
 80010f8:	3217      	adds	r2, #23
 80010fa:	db14      	blt.n	8001126 <__aeabi_d2f+0xd6>
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	271e      	movs	r7, #30
 8001100:	0412      	lsls	r2, r2, #16
 8001102:	4313      	orrs	r3, r2
 8001104:	1bbf      	subs	r7, r7, r6
 8001106:	2f1f      	cmp	r7, #31
 8001108:	dc0f      	bgt.n	800112a <__aeabi_d2f+0xda>
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <__aeabi_d2f+0x10c>)
 800110c:	4694      	mov	ip, r2
 800110e:	4464      	add	r4, ip
 8001110:	002a      	movs	r2, r5
 8001112:	40a5      	lsls	r5, r4
 8001114:	002e      	movs	r6, r5
 8001116:	40a3      	lsls	r3, r4
 8001118:	1e75      	subs	r5, r6, #1
 800111a:	41ae      	sbcs	r6, r5
 800111c:	40fa      	lsrs	r2, r7
 800111e:	4333      	orrs	r3, r6
 8001120:	4313      	orrs	r3, r2
 8001122:	2600      	movs	r6, #0
 8001124:	e7b0      	b.n	8001088 <__aeabi_d2f+0x38>
 8001126:	2400      	movs	r4, #0
 8001128:	e7d5      	b.n	80010d6 <__aeabi_d2f+0x86>
 800112a:	2202      	movs	r2, #2
 800112c:	4252      	negs	r2, r2
 800112e:	1b96      	subs	r6, r2, r6
 8001130:	001a      	movs	r2, r3
 8001132:	40f2      	lsrs	r2, r6
 8001134:	2f20      	cmp	r7, #32
 8001136:	d009      	beq.n	800114c <__aeabi_d2f+0xfc>
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <__aeabi_d2f+0x110>)
 800113a:	4684      	mov	ip, r0
 800113c:	4464      	add	r4, ip
 800113e:	40a3      	lsls	r3, r4
 8001140:	432b      	orrs	r3, r5
 8001142:	1e5d      	subs	r5, r3, #1
 8001144:	41ab      	sbcs	r3, r5
 8001146:	2600      	movs	r6, #0
 8001148:	4313      	orrs	r3, r2
 800114a:	e79d      	b.n	8001088 <__aeabi_d2f+0x38>
 800114c:	2300      	movs	r3, #0
 800114e:	e7f7      	b.n	8001140 <__aeabi_d2f+0xf0>
 8001150:	2300      	movs	r3, #0
 8001152:	e7ad      	b.n	80010b0 <__aeabi_d2f+0x60>
 8001154:	0034      	movs	r4, r6
 8001156:	e7bf      	b.n	80010d8 <__aeabi_d2f+0x88>
 8001158:	fffffc80 	.word	0xfffffc80
 800115c:	fffffc82 	.word	0xfffffc82
 8001160:	fffffca2 	.word	0xfffffca2

08001164 <__clzsi2>:
 8001164:	211c      	movs	r1, #28
 8001166:	2301      	movs	r3, #1
 8001168:	041b      	lsls	r3, r3, #16
 800116a:	4298      	cmp	r0, r3
 800116c:	d301      	bcc.n	8001172 <__clzsi2+0xe>
 800116e:	0c00      	lsrs	r0, r0, #16
 8001170:	3910      	subs	r1, #16
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	4298      	cmp	r0, r3
 8001176:	d301      	bcc.n	800117c <__clzsi2+0x18>
 8001178:	0a00      	lsrs	r0, r0, #8
 800117a:	3908      	subs	r1, #8
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	4298      	cmp	r0, r3
 8001180:	d301      	bcc.n	8001186 <__clzsi2+0x22>
 8001182:	0900      	lsrs	r0, r0, #4
 8001184:	3904      	subs	r1, #4
 8001186:	a202      	add	r2, pc, #8	; (adr r2, 8001190 <__clzsi2+0x2c>)
 8001188:	5c10      	ldrb	r0, [r2, r0]
 800118a:	1840      	adds	r0, r0, r1
 800118c:	4770      	bx	lr
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	02020304 	.word	0x02020304
 8001194:	01010101 	.word	0x01010101
	...

080011a0 <Display_event>:
const bool E[]={1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,1};
const bool F[]={1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0};
const bool G[]={0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,0,1};

void Display_event(uint8_t LED1 , uint8_t LED2 , uint8_t LED3 , uint8_t LED4 , uint8_t Blink)
{
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	0007      	movs	r7, r0
 80011a4:	000e      	movs	r6, r1
 80011a6:	0015      	movs	r5, r2
 80011a8:	001c      	movs	r4, r3
 80011aa:	ab06      	add	r3, sp, #24
 80011ac:	781a      	ldrb	r2, [r3, #0]

	  switch(Segment)
 80011ae:	4bcc      	ldr	r3, [pc, #816]	; (80014e0 <Display_event+0x340>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d100      	bne.n	80011ba <Display_event+0x1a>
 80011b8:	e0be      	b.n	8001338 <Display_event+0x198>
 80011ba:	d940      	bls.n	800123e <Display_event+0x9e>
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d100      	bne.n	80011c2 <Display_event+0x22>
 80011c0:	e13f      	b.n	8001442 <Display_event+0x2a2>
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d000      	beq.n	80011c8 <Display_event+0x28>
 80011c6:	e09d      	b.n	8001304 <Display_event+0x164>
			 	  	 GPIOA->BRR = (uint32_t)LED3_Pin;
			 	  	 break;
			 	   }
			 	   case 4:
			 	   {
			 	  	 GPIOA->BSRR =(uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 80011c8:	2390      	movs	r3, #144	; 0x90
 80011ca:	05db      	lsls	r3, r3, #23
 80011cc:	21f0      	movs	r1, #240	; 0xf0
 80011ce:	0109      	lsls	r1, r1, #4
 80011d0:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 80011d2:	2190      	movs	r1, #144	; 0x90
 80011d4:	0209      	lsls	r1, r1, #8
 80011d6:	6199      	str	r1, [r3, #24]
			 	  	 GPIOF->BSRR = B_Pin|C_Pin;
 80011d8:	21c0      	movs	r1, #192	; 0xc0
 80011da:	4bc2      	ldr	r3, [pc, #776]	; (80014e4 <Display_event+0x344>)
 80011dc:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 80011de:	21f0      	movs	r1, #240	; 0xf0
 80011e0:	0209      	lsls	r1, r1, #8
 80011e2:	4bc1      	ldr	r3, [pc, #772]	; (80014e8 <Display_event+0x348>)
 80011e4:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==4||Blink==5||Blink==7||Blink==9)
 80011e6:	1f13      	subs	r3, r2, #4
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d800      	bhi.n	80011f0 <Display_event+0x50>
 80011ee:	e1c4      	b.n	800157a <Display_event+0x3da>
 80011f0:	2a07      	cmp	r2, #7
 80011f2:	d100      	bne.n	80011f6 <Display_event+0x56>
 80011f4:	e1c1      	b.n	800157a <Display_event+0x3da>
 80011f6:	2a09      	cmp	r2, #9
 80011f8:	d100      	bne.n	80011fc <Display_event+0x5c>
 80011fa:	e1be      	b.n	800157a <Display_event+0x3da>
			 	  		}

			 	  	 }
			 	  	 else
			 	  	 {
			 	   	 GPIOA->BRR  = (A[LED4]<<15)|(D[LED4]<<12);
 80011fc:	4bbb      	ldr	r3, [pc, #748]	; (80014ec <Display_event+0x34c>)
 80011fe:	5d1b      	ldrb	r3, [r3, r4]
 8001200:	03db      	lsls	r3, r3, #15
 8001202:	4abb      	ldr	r2, [pc, #748]	; (80014f0 <Display_event+0x350>)
 8001204:	5d12      	ldrb	r2, [r2, r4]
 8001206:	0312      	lsls	r2, r2, #12
 8001208:	4313      	orrs	r3, r2
 800120a:	2290      	movs	r2, #144	; 0x90
 800120c:	05d2      	lsls	r2, r2, #23
 800120e:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOF->BRR  = (B[LED4]<<7) |(C[LED4]<<6);
 8001210:	4bb8      	ldr	r3, [pc, #736]	; (80014f4 <Display_event+0x354>)
 8001212:	5d1b      	ldrb	r3, [r3, r4]
 8001214:	01db      	lsls	r3, r3, #7
 8001216:	4ab8      	ldr	r2, [pc, #736]	; (80014f8 <Display_event+0x358>)
 8001218:	5d12      	ldrb	r2, [r2, r4]
 800121a:	0192      	lsls	r2, r2, #6
 800121c:	4313      	orrs	r3, r2
 800121e:	4ab1      	ldr	r2, [pc, #708]	; (80014e4 <Display_event+0x344>)
 8001220:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOB->BRR  = (E[LED4]<<15)|(F[LED4]<<14)|(G[LED4]<<13);
 8001222:	4bb6      	ldr	r3, [pc, #728]	; (80014fc <Display_event+0x35c>)
 8001224:	5d1b      	ldrb	r3, [r3, r4]
 8001226:	03db      	lsls	r3, r3, #15
 8001228:	4ab5      	ldr	r2, [pc, #724]	; (8001500 <Display_event+0x360>)
 800122a:	5d12      	ldrb	r2, [r2, r4]
 800122c:	0392      	lsls	r2, r2, #14
 800122e:	4313      	orrs	r3, r2
 8001230:	4ab4      	ldr	r2, [pc, #720]	; (8001504 <Display_event+0x364>)
 8001232:	5d12      	ldrb	r2, [r2, r4]
 8001234:	0352      	lsls	r2, r2, #13
 8001236:	4313      	orrs	r3, r2
 8001238:	4aab      	ldr	r2, [pc, #684]	; (80014e8 <Display_event+0x348>)
 800123a:	6293      	str	r3, [r2, #40]	; 0x28
 800123c:	e1c1      	b.n	80015c2 <Display_event+0x422>
	  switch(Segment)
 800123e:	2b01      	cmp	r3, #1
 8001240:	d160      	bne.n	8001304 <Display_event+0x164>
			 	  	 GPIOA->BSRR  = (uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8001242:	2390      	movs	r3, #144	; 0x90
 8001244:	05db      	lsls	r3, r3, #23
 8001246:	21f0      	movs	r1, #240	; 0xf0
 8001248:	0109      	lsls	r1, r1, #4
 800124a:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 800124c:	2190      	movs	r1, #144	; 0x90
 800124e:	0209      	lsls	r1, r1, #8
 8001250:	6199      	str	r1, [r3, #24]
			 	     GPIOF->BSRR = B_Pin|C_Pin;
 8001252:	21c0      	movs	r1, #192	; 0xc0
 8001254:	4ba3      	ldr	r3, [pc, #652]	; (80014e4 <Display_event+0x344>)
 8001256:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 8001258:	21f0      	movs	r1, #240	; 0xf0
 800125a:	0209      	lsls	r1, r1, #8
 800125c:	4ba2      	ldr	r3, [pc, #648]	; (80014e8 <Display_event+0x348>)
 800125e:	6199      	str	r1, [r3, #24]
                     if(Blink==1||Blink==5||Blink==6||Blink==8)
 8001260:	2a01      	cmp	r2, #1
 8001262:	d026      	beq.n	80012b2 <Display_event+0x112>
 8001264:	2a05      	cmp	r2, #5
 8001266:	d024      	beq.n	80012b2 <Display_event+0x112>
 8001268:	2a06      	cmp	r2, #6
 800126a:	d022      	beq.n	80012b2 <Display_event+0x112>
 800126c:	2a08      	cmp	r2, #8
 800126e:	d020      	beq.n	80012b2 <Display_event+0x112>
                      GPIOA->BRR  = (A[LED1]<<15)|(D[LED1]<<12);
 8001270:	4b9e      	ldr	r3, [pc, #632]	; (80014ec <Display_event+0x34c>)
 8001272:	5c1b      	ldrb	r3, [r3, r0]
 8001274:	03db      	lsls	r3, r3, #15
 8001276:	4a9e      	ldr	r2, [pc, #632]	; (80014f0 <Display_event+0x350>)
 8001278:	5c12      	ldrb	r2, [r2, r0]
 800127a:	0312      	lsls	r2, r2, #12
 800127c:	4313      	orrs	r3, r2
 800127e:	2290      	movs	r2, #144	; 0x90
 8001280:	05d2      	lsls	r2, r2, #23
 8001282:	6293      	str	r3, [r2, #40]	; 0x28
                      GPIOF->BRR  = (B[LED1]<<7) |(C[LED1]<<6);
 8001284:	4b9b      	ldr	r3, [pc, #620]	; (80014f4 <Display_event+0x354>)
 8001286:	5c1b      	ldrb	r3, [r3, r0]
 8001288:	01db      	lsls	r3, r3, #7
 800128a:	4a9b      	ldr	r2, [pc, #620]	; (80014f8 <Display_event+0x358>)
 800128c:	5c12      	ldrb	r2, [r2, r0]
 800128e:	0192      	lsls	r2, r2, #6
 8001290:	4313      	orrs	r3, r2
 8001292:	4a94      	ldr	r2, [pc, #592]	; (80014e4 <Display_event+0x344>)
 8001294:	6293      	str	r3, [r2, #40]	; 0x28
                      GPIOB->BRR  = (E[LED1]<<15)|(F[LED1]<<14)|(G[LED1]<<13);
 8001296:	4b99      	ldr	r3, [pc, #612]	; (80014fc <Display_event+0x35c>)
 8001298:	5c1b      	ldrb	r3, [r3, r0]
 800129a:	03db      	lsls	r3, r3, #15
 800129c:	4a98      	ldr	r2, [pc, #608]	; (8001500 <Display_event+0x360>)
 800129e:	5c12      	ldrb	r2, [r2, r0]
 80012a0:	0392      	lsls	r2, r2, #14
 80012a2:	4313      	orrs	r3, r2
 80012a4:	4a97      	ldr	r2, [pc, #604]	; (8001504 <Display_event+0x364>)
 80012a6:	5c12      	ldrb	r2, [r2, r0]
 80012a8:	0352      	lsls	r2, r2, #13
 80012aa:	4313      	orrs	r3, r2
 80012ac:	4a8e      	ldr	r2, [pc, #568]	; (80014e8 <Display_event+0x348>)
 80012ae:	6293      	str	r3, [r2, #40]	; 0x28
 80012b0:	e023      	b.n	80012fa <Display_event+0x15a>
                    	 if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 80012b2:	4b95      	ldr	r3, [pc, #596]	; (8001508 <Display_event+0x368>)
 80012b4:	789b      	ldrb	r3, [r3, #2]
 80012b6:	07db      	lsls	r3, r3, #31
 80012b8:	d431      	bmi.n	800131e <Display_event+0x17e>
                    	GPIOA->BRR  = (A[LED1]<<15)|(D[LED1]<<12);
 80012ba:	4b8c      	ldr	r3, [pc, #560]	; (80014ec <Display_event+0x34c>)
 80012bc:	5ddb      	ldrb	r3, [r3, r7]
 80012be:	03db      	lsls	r3, r3, #15
 80012c0:	4a8b      	ldr	r2, [pc, #556]	; (80014f0 <Display_event+0x350>)
 80012c2:	5dd2      	ldrb	r2, [r2, r7]
 80012c4:	0312      	lsls	r2, r2, #12
 80012c6:	4313      	orrs	r3, r2
 80012c8:	2290      	movs	r2, #144	; 0x90
 80012ca:	05d2      	lsls	r2, r2, #23
 80012cc:	6293      	str	r3, [r2, #40]	; 0x28
                    	GPIOF->BRR  = (B[LED1]<<7) |(C[LED1]<<6);
 80012ce:	4b89      	ldr	r3, [pc, #548]	; (80014f4 <Display_event+0x354>)
 80012d0:	5ddb      	ldrb	r3, [r3, r7]
 80012d2:	01db      	lsls	r3, r3, #7
 80012d4:	4a88      	ldr	r2, [pc, #544]	; (80014f8 <Display_event+0x358>)
 80012d6:	5dd2      	ldrb	r2, [r2, r7]
 80012d8:	0192      	lsls	r2, r2, #6
 80012da:	4313      	orrs	r3, r2
 80012dc:	4a81      	ldr	r2, [pc, #516]	; (80014e4 <Display_event+0x344>)
 80012de:	6293      	str	r3, [r2, #40]	; 0x28
                    	GPIOB->BRR  = (E[LED1]<<15)|(F[LED1]<<14)|(G[LED1]<<13);
 80012e0:	4b86      	ldr	r3, [pc, #536]	; (80014fc <Display_event+0x35c>)
 80012e2:	5ddb      	ldrb	r3, [r3, r7]
 80012e4:	03db      	lsls	r3, r3, #15
 80012e6:	4a86      	ldr	r2, [pc, #536]	; (8001500 <Display_event+0x360>)
 80012e8:	5dd2      	ldrb	r2, [r2, r7]
 80012ea:	0392      	lsls	r2, r2, #14
 80012ec:	4313      	orrs	r3, r2
 80012ee:	4a85      	ldr	r2, [pc, #532]	; (8001504 <Display_event+0x364>)
 80012f0:	5dd2      	ldrb	r2, [r2, r7]
 80012f2:	0352      	lsls	r2, r2, #13
 80012f4:	4313      	orrs	r3, r2
 80012f6:	4a7c      	ldr	r2, [pc, #496]	; (80014e8 <Display_event+0x348>)
 80012f8:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR = (uint32_t)LED1_Pin ;
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	2390      	movs	r3, #144	; 0x90
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
			 	   }



			 	   }
			  Segment++;
 8001304:	4a76      	ldr	r2, [pc, #472]	; (80014e0 <Display_event+0x340>)
 8001306:	7813      	ldrb	r3, [r2, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	7013      	strb	r3, [r2, #0]
			 	 	    if(Segment>4)
 800130e:	7813      	ldrb	r3, [r2, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b04      	cmp	r3, #4
 8001314:	d902      	bls.n	800131c <Display_event+0x17c>
			 	 	   {

			 	 	    Segment = 1;
 8001316:	2201      	movs	r2, #1
 8001318:	4b71      	ldr	r3, [pc, #452]	; (80014e0 <Display_event+0x340>)
 800131a:	701a      	strb	r2, [r3, #0]





}
 800131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    	 if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 800131e:	2110      	movs	r1, #16
 8001320:	4871      	ldr	r0, [pc, #452]	; (80014e8 <Display_event+0x348>)
 8001322:	f000 ff5d 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001326:	2800      	cmp	r0, #0
 8001328:	d0c7      	beq.n	80012ba <Display_event+0x11a>
 800132a:	2108      	movs	r1, #8
 800132c:	486e      	ldr	r0, [pc, #440]	; (80014e8 <Display_event+0x348>)
 800132e:	f000 ff57 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001332:	2800      	cmp	r0, #0
 8001334:	d1e1      	bne.n	80012fa <Display_event+0x15a>
 8001336:	e7c0      	b.n	80012ba <Display_event+0x11a>
			 	  	 GPIOA->BSRR   =(uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8001338:	2390      	movs	r3, #144	; 0x90
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	21f0      	movs	r1, #240	; 0xf0
 800133e:	0109      	lsls	r1, r1, #4
 8001340:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 8001342:	2190      	movs	r1, #144	; 0x90
 8001344:	0209      	lsls	r1, r1, #8
 8001346:	6199      	str	r1, [r3, #24]
			 	  	 GPIOF->BSRR = B_Pin|C_Pin;
 8001348:	21c0      	movs	r1, #192	; 0xc0
 800134a:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <Display_event+0x344>)
 800134c:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 800134e:	21f0      	movs	r1, #240	; 0xf0
 8001350:	0209      	lsls	r1, r1, #8
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <Display_event+0x348>)
 8001354:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==8||Blink==9||Blink==0)
 8001356:	0013      	movs	r3, r2
 8001358:	3b08      	subs	r3, #8
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d901      	bls.n	8001364 <Display_event+0x1c4>
 8001360:	2a00      	cmp	r2, #0
 8001362:	d10e      	bne.n	8001382 <Display_event+0x1e2>
			 	  		 if((Blink==0)&&(gTime.Seconds%2)==0)
 8001364:	2a00      	cmp	r2, #0
 8001366:	d108      	bne.n	800137a <Display_event+0x1da>
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <Display_event+0x368>)
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	07db      	lsls	r3, r3, #31
 800136e:	d404      	bmi.n	800137a <Display_event+0x1da>
			 	  		   GPIOB->BSRR  = DB_Pin;
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0149      	lsls	r1, r1, #5
 8001374:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <Display_event+0x348>)
 8001376:	6199      	str	r1, [r3, #24]
 8001378:	e003      	b.n	8001382 <Display_event+0x1e2>
			 	  	     GPIOB->BRR  = DB_Pin;
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	0149      	lsls	r1, r1, #5
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <Display_event+0x348>)
 8001380:	6299      	str	r1, [r3, #40]	; 0x28
			 	  	 if(Blink==2||Blink==5||Blink==6||Blink==8)
 8001382:	2a02      	cmp	r2, #2
 8001384:	d026      	beq.n	80013d4 <Display_event+0x234>
 8001386:	2a05      	cmp	r2, #5
 8001388:	d024      	beq.n	80013d4 <Display_event+0x234>
 800138a:	2a06      	cmp	r2, #6
 800138c:	d022      	beq.n	80013d4 <Display_event+0x234>
 800138e:	2a08      	cmp	r2, #8
 8001390:	d020      	beq.n	80013d4 <Display_event+0x234>
			 	  	 GPIOA->BRR  = (A[LED2]<<15)|(D[LED2]<<12);
 8001392:	4b56      	ldr	r3, [pc, #344]	; (80014ec <Display_event+0x34c>)
 8001394:	5d9b      	ldrb	r3, [r3, r6]
 8001396:	03db      	lsls	r3, r3, #15
 8001398:	4a55      	ldr	r2, [pc, #340]	; (80014f0 <Display_event+0x350>)
 800139a:	5d92      	ldrb	r2, [r2, r6]
 800139c:	0312      	lsls	r2, r2, #12
 800139e:	4313      	orrs	r3, r2
 80013a0:	2290      	movs	r2, #144	; 0x90
 80013a2:	05d2      	lsls	r2, r2, #23
 80013a4:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOF->BRR  = (B[LED2]<<7) |(C[LED2]<<6);
 80013a6:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <Display_event+0x354>)
 80013a8:	5d9b      	ldrb	r3, [r3, r6]
 80013aa:	01db      	lsls	r3, r3, #7
 80013ac:	4a52      	ldr	r2, [pc, #328]	; (80014f8 <Display_event+0x358>)
 80013ae:	5d92      	ldrb	r2, [r2, r6]
 80013b0:	0192      	lsls	r2, r2, #6
 80013b2:	4313      	orrs	r3, r2
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <Display_event+0x344>)
 80013b6:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOB->BRR  = (E[LED2]<<15)|(F[LED2]<<14)|(G[LED2]<<13);
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <Display_event+0x35c>)
 80013ba:	5d9b      	ldrb	r3, [r3, r6]
 80013bc:	03db      	lsls	r3, r3, #15
 80013be:	4a50      	ldr	r2, [pc, #320]	; (8001500 <Display_event+0x360>)
 80013c0:	5d92      	ldrb	r2, [r2, r6]
 80013c2:	0392      	lsls	r2, r2, #14
 80013c4:	4313      	orrs	r3, r2
 80013c6:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <Display_event+0x364>)
 80013c8:	5d92      	ldrb	r2, [r2, r6]
 80013ca:	0352      	lsls	r2, r2, #13
 80013cc:	4313      	orrs	r3, r2
 80013ce:	4a46      	ldr	r2, [pc, #280]	; (80014e8 <Display_event+0x348>)
 80013d0:	6293      	str	r3, [r2, #40]	; 0x28
 80013d2:	e023      	b.n	800141c <Display_event+0x27c>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 80013d4:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <Display_event+0x368>)
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	07db      	lsls	r3, r3, #31
 80013da:	d425      	bmi.n	8001428 <Display_event+0x288>
			 	  			GPIOA->BRR  = (A[LED2]<<15)|(D[LED2]<<12);
 80013dc:	4b43      	ldr	r3, [pc, #268]	; (80014ec <Display_event+0x34c>)
 80013de:	5d9b      	ldrb	r3, [r3, r6]
 80013e0:	03db      	lsls	r3, r3, #15
 80013e2:	4a43      	ldr	r2, [pc, #268]	; (80014f0 <Display_event+0x350>)
 80013e4:	5d92      	ldrb	r2, [r2, r6]
 80013e6:	0312      	lsls	r2, r2, #12
 80013e8:	4313      	orrs	r3, r2
 80013ea:	2290      	movs	r2, #144	; 0x90
 80013ec:	05d2      	lsls	r2, r2, #23
 80013ee:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOF->BRR  = (B[LED2]<<7) |(C[LED2]<<6);
 80013f0:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <Display_event+0x354>)
 80013f2:	5d9b      	ldrb	r3, [r3, r6]
 80013f4:	01db      	lsls	r3, r3, #7
 80013f6:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <Display_event+0x358>)
 80013f8:	5d92      	ldrb	r2, [r2, r6]
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	4313      	orrs	r3, r2
 80013fe:	4a39      	ldr	r2, [pc, #228]	; (80014e4 <Display_event+0x344>)
 8001400:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	        GPIOB->BRR  = (E[LED2]<<15)|(F[LED2]<<14)|(G[LED2]<<13);
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <Display_event+0x35c>)
 8001404:	5d9b      	ldrb	r3, [r3, r6]
 8001406:	03db      	lsls	r3, r3, #15
 8001408:	4a3d      	ldr	r2, [pc, #244]	; (8001500 <Display_event+0x360>)
 800140a:	5d92      	ldrb	r2, [r2, r6]
 800140c:	0392      	lsls	r2, r2, #14
 800140e:	4313      	orrs	r3, r2
 8001410:	4a3c      	ldr	r2, [pc, #240]	; (8001504 <Display_event+0x364>)
 8001412:	5d92      	ldrb	r2, [r2, r6]
 8001414:	0352      	lsls	r2, r2, #13
 8001416:	4313      	orrs	r3, r2
 8001418:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <Display_event+0x348>)
 800141a:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOA->BRR  =(uint32_t)LED2_Pin ;
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	00d2      	lsls	r2, r2, #3
 8001420:	2390      	movs	r3, #144	; 0x90
 8001422:	05db      	lsls	r3, r3, #23
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 8001426:	e76d      	b.n	8001304 <Display_event+0x164>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8001428:	2110      	movs	r1, #16
 800142a:	482f      	ldr	r0, [pc, #188]	; (80014e8 <Display_event+0x348>)
 800142c:	f000 fed8 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001430:	2800      	cmp	r0, #0
 8001432:	d0d3      	beq.n	80013dc <Display_event+0x23c>
 8001434:	2108      	movs	r1, #8
 8001436:	482c      	ldr	r0, [pc, #176]	; (80014e8 <Display_event+0x348>)
 8001438:	f000 fed2 	bl	80021e0 <HAL_GPIO_ReadPin>
 800143c:	2800      	cmp	r0, #0
 800143e:	d1ed      	bne.n	800141c <Display_event+0x27c>
 8001440:	e7cc      	b.n	80013dc <Display_event+0x23c>
			 	  	 GPIOA->BSRR =  (uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8001442:	2390      	movs	r3, #144	; 0x90
 8001444:	05db      	lsls	r3, r3, #23
 8001446:	21f0      	movs	r1, #240	; 0xf0
 8001448:	0109      	lsls	r1, r1, #4
 800144a:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 800144c:	2190      	movs	r1, #144	; 0x90
 800144e:	0209      	lsls	r1, r1, #8
 8001450:	6199      	str	r1, [r3, #24]
			 	     GPIOF->BSRR = B_Pin|C_Pin;
 8001452:	21c0      	movs	r1, #192	; 0xc0
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <Display_event+0x344>)
 8001456:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 8001458:	21f0      	movs	r1, #240	; 0xf0
 800145a:	0209      	lsls	r1, r1, #8
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <Display_event+0x348>)
 800145e:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==8||Blink==9||Blink==0)
 8001460:	0013      	movs	r3, r2
 8001462:	3b08      	subs	r3, #8
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d901      	bls.n	800146e <Display_event+0x2ce>
 800146a:	2a00      	cmp	r2, #0
 800146c:	d10e      	bne.n	800148c <Display_event+0x2ec>
			 	  		 if((Blink==0)&&(gTime.Seconds%2)==0)
 800146e:	2a00      	cmp	r2, #0
 8001470:	d108      	bne.n	8001484 <Display_event+0x2e4>
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <Display_event+0x368>)
 8001474:	789b      	ldrb	r3, [r3, #2]
 8001476:	07db      	lsls	r3, r3, #31
 8001478:	d404      	bmi.n	8001484 <Display_event+0x2e4>
			 	  		   GPIOB->BSRR  = G_Pin;
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	0189      	lsls	r1, r1, #6
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <Display_event+0x348>)
 8001480:	6199      	str	r1, [r3, #24]
 8001482:	e003      	b.n	800148c <Display_event+0x2ec>
			 	  	     GPIOB->BRR  = G_Pin;
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0189      	lsls	r1, r1, #6
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <Display_event+0x348>)
 800148a:	6299      	str	r1, [r3, #40]	; 0x28
			 	  	 if(Blink==3||Blink==5||Blink==7||Blink==9)
 800148c:	2a03      	cmp	r2, #3
 800148e:	d03d      	beq.n	800150c <Display_event+0x36c>
 8001490:	2a05      	cmp	r2, #5
 8001492:	d03b      	beq.n	800150c <Display_event+0x36c>
 8001494:	2a07      	cmp	r2, #7
 8001496:	d039      	beq.n	800150c <Display_event+0x36c>
 8001498:	2a09      	cmp	r2, #9
 800149a:	d037      	beq.n	800150c <Display_event+0x36c>
			 	  	 GPIOA->BRR  = (A[LED3]<<15)|(D[LED3]<<12);
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <Display_event+0x34c>)
 800149e:	5d5b      	ldrb	r3, [r3, r5]
 80014a0:	03db      	lsls	r3, r3, #15
 80014a2:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <Display_event+0x350>)
 80014a4:	5d52      	ldrb	r2, [r2, r5]
 80014a6:	0312      	lsls	r2, r2, #12
 80014a8:	4313      	orrs	r3, r2
 80014aa:	2290      	movs	r2, #144	; 0x90
 80014ac:	05d2      	lsls	r2, r2, #23
 80014ae:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOF->BRR  = (B[LED3]<<7) |(C[LED3]<<6);
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <Display_event+0x354>)
 80014b2:	5d5b      	ldrb	r3, [r3, r5]
 80014b4:	01db      	lsls	r3, r3, #7
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <Display_event+0x358>)
 80014b8:	5d52      	ldrb	r2, [r2, r5]
 80014ba:	0192      	lsls	r2, r2, #6
 80014bc:	4313      	orrs	r3, r2
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <Display_event+0x344>)
 80014c0:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOB->BRR  = (E[LED3]<<15)|(F[LED3]<<14)|(G[LED3]<<12);
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <Display_event+0x35c>)
 80014c4:	5d5b      	ldrb	r3, [r3, r5]
 80014c6:	03db      	lsls	r3, r3, #15
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <Display_event+0x360>)
 80014ca:	5d52      	ldrb	r2, [r2, r5]
 80014cc:	0392      	lsls	r2, r2, #14
 80014ce:	4313      	orrs	r3, r2
 80014d0:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <Display_event+0x364>)
 80014d2:	5d52      	ldrb	r2, [r2, r5]
 80014d4:	0312      	lsls	r2, r2, #12
 80014d6:	4313      	orrs	r3, r2
 80014d8:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <Display_event+0x348>)
 80014da:	6293      	str	r3, [r2, #40]	; 0x28
 80014dc:	e03a      	b.n	8001554 <Display_event+0x3b4>
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	20000000 	.word	0x20000000
 80014e4:	48001400 	.word	0x48001400
 80014e8:	48000400 	.word	0x48000400
 80014ec:	08003da4 	.word	0x08003da4
 80014f0:	08003e28 	.word	0x08003e28
 80014f4:	08003dd0 	.word	0x08003dd0
 80014f8:	08003dfc 	.word	0x08003dfc
 80014fc:	08003e54 	.word	0x08003e54
 8001500:	08003e80 	.word	0x08003e80
 8001504:	08003eac 	.word	0x08003eac
 8001508:	20000120 	.word	0x20000120
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <Display_event+0x448>)
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	07db      	lsls	r3, r3, #31
 8001512:	d425      	bmi.n	8001560 <Display_event+0x3c0>
			 	  			GPIOA->BRR  = (A[LED3]<<15)|(D[LED3]<<12);
 8001514:	4b35      	ldr	r3, [pc, #212]	; (80015ec <Display_event+0x44c>)
 8001516:	5d5b      	ldrb	r3, [r3, r5]
 8001518:	03db      	lsls	r3, r3, #15
 800151a:	4a35      	ldr	r2, [pc, #212]	; (80015f0 <Display_event+0x450>)
 800151c:	5d52      	ldrb	r2, [r2, r5]
 800151e:	0312      	lsls	r2, r2, #12
 8001520:	4313      	orrs	r3, r2
 8001522:	2290      	movs	r2, #144	; 0x90
 8001524:	05d2      	lsls	r2, r2, #23
 8001526:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOF->BRR  = (B[LED3]<<7) |(C[LED3]<<6);
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <Display_event+0x454>)
 800152a:	5d5b      	ldrb	r3, [r3, r5]
 800152c:	01db      	lsls	r3, r3, #7
 800152e:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <Display_event+0x458>)
 8001530:	5d52      	ldrb	r2, [r2, r5]
 8001532:	0192      	lsls	r2, r2, #6
 8001534:	4313      	orrs	r3, r2
 8001536:	4a31      	ldr	r2, [pc, #196]	; (80015fc <Display_event+0x45c>)
 8001538:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOB->BRR  = (E[LED3]<<15)|(F[LED3]<<14)|(G[LED3]<<12);
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <Display_event+0x460>)
 800153c:	5d5b      	ldrb	r3, [r3, r5]
 800153e:	03db      	lsls	r3, r3, #15
 8001540:	4a30      	ldr	r2, [pc, #192]	; (8001604 <Display_event+0x464>)
 8001542:	5d52      	ldrb	r2, [r2, r5]
 8001544:	0392      	lsls	r2, r2, #14
 8001546:	4313      	orrs	r3, r2
 8001548:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <Display_event+0x468>)
 800154a:	5d52      	ldrb	r2, [r2, r5]
 800154c:	0312      	lsls	r2, r2, #12
 800154e:	4313      	orrs	r3, r2
 8001550:	4a2e      	ldr	r2, [pc, #184]	; (800160c <Display_event+0x46c>)
 8001552:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR = (uint32_t)LED3_Pin;
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	2390      	movs	r3, #144	; 0x90
 800155a:	05db      	lsls	r3, r3, #23
 800155c:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 800155e:	e6d1      	b.n	8001304 <Display_event+0x164>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8001560:	2110      	movs	r1, #16
 8001562:	482a      	ldr	r0, [pc, #168]	; (800160c <Display_event+0x46c>)
 8001564:	f000 fe3c 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001568:	2800      	cmp	r0, #0
 800156a:	d0d3      	beq.n	8001514 <Display_event+0x374>
 800156c:	2108      	movs	r1, #8
 800156e:	4827      	ldr	r0, [pc, #156]	; (800160c <Display_event+0x46c>)
 8001570:	f000 fe36 	bl	80021e0 <HAL_GPIO_ReadPin>
 8001574:	2800      	cmp	r0, #0
 8001576:	d1ed      	bne.n	8001554 <Display_event+0x3b4>
 8001578:	e7cc      	b.n	8001514 <Display_event+0x374>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <Display_event+0x448>)
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	07db      	lsls	r3, r3, #31
 8001580:	d425      	bmi.n	80015ce <Display_event+0x42e>
			 	  		 GPIOA->BRR  = (A[LED4]<<15)|(D[LED4]<<12);
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <Display_event+0x44c>)
 8001584:	5d1b      	ldrb	r3, [r3, r4]
 8001586:	03db      	lsls	r3, r3, #15
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <Display_event+0x450>)
 800158a:	5d12      	ldrb	r2, [r2, r4]
 800158c:	0312      	lsls	r2, r2, #12
 800158e:	4313      	orrs	r3, r2
 8001590:	2290      	movs	r2, #144	; 0x90
 8001592:	05d2      	lsls	r2, r2, #23
 8001594:	6293      	str	r3, [r2, #40]	; 0x28
			 	  		 GPIOF->BRR  = (B[LED4]<<7) |(C[LED4]<<6);
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <Display_event+0x454>)
 8001598:	5d1b      	ldrb	r3, [r3, r4]
 800159a:	01db      	lsls	r3, r3, #7
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <Display_event+0x458>)
 800159e:	5d12      	ldrb	r2, [r2, r4]
 80015a0:	0192      	lsls	r2, r2, #6
 80015a2:	4313      	orrs	r3, r2
 80015a4:	4a15      	ldr	r2, [pc, #84]	; (80015fc <Display_event+0x45c>)
 80015a6:	6293      	str	r3, [r2, #40]	; 0x28
			 	  		 GPIOB->BRR  = (E[LED4]<<15)|(F[LED4]<<14)|(G[LED4]<<13);
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <Display_event+0x460>)
 80015aa:	5d1b      	ldrb	r3, [r3, r4]
 80015ac:	03db      	lsls	r3, r3, #15
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <Display_event+0x464>)
 80015b0:	5d12      	ldrb	r2, [r2, r4]
 80015b2:	0392      	lsls	r2, r2, #14
 80015b4:	4313      	orrs	r3, r2
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <Display_event+0x468>)
 80015b8:	5d12      	ldrb	r2, [r2, r4]
 80015ba:	0352      	lsls	r2, r2, #13
 80015bc:	4313      	orrs	r3, r2
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <Display_event+0x46c>)
 80015c0:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR  =(uint32_t)LED4_Pin ;
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	0052      	lsls	r2, r2, #1
 80015c6:	2390      	movs	r3, #144	; 0x90
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 80015cc:	e69a      	b.n	8001304 <Display_event+0x164>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 80015ce:	2110      	movs	r1, #16
 80015d0:	480e      	ldr	r0, [pc, #56]	; (800160c <Display_event+0x46c>)
 80015d2:	f000 fe05 	bl	80021e0 <HAL_GPIO_ReadPin>
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d0d3      	beq.n	8001582 <Display_event+0x3e2>
 80015da:	2108      	movs	r1, #8
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <Display_event+0x46c>)
 80015de:	f000 fdff 	bl	80021e0 <HAL_GPIO_ReadPin>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d1ed      	bne.n	80015c2 <Display_event+0x422>
 80015e6:	e7cc      	b.n	8001582 <Display_event+0x3e2>
 80015e8:	20000120 	.word	0x20000120
 80015ec:	08003da4 	.word	0x08003da4
 80015f0:	08003e28 	.word	0x08003e28
 80015f4:	08003dd0 	.word	0x08003dd0
 80015f8:	08003dfc 	.word	0x08003dfc
 80015fc:	48001400 	.word	0x48001400
 8001600:	08003e54 	.word	0x08003e54
 8001604:	08003e80 	.word	0x08003e80
 8001608:	08003eac 	.word	0x08003eac
 800160c:	48000400 	.word	0x48000400

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b510      	push	{r4, lr}
 8001612:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001614:	f001 f8fc 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8001618:	21fa      	movs	r1, #250	; 0xfa
 800161a:	0089      	lsls	r1, r1, #2
 800161c:	f7fe fd74 	bl	8000108 <__udivsi3>
 8001620:	f000 face 	bl	8001bc0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001624:	2200      	movs	r2, #0
 8001626:	0021      	movs	r1, r4
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	f000 fa8c 	bl	8001b48 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001630:	2000      	movs	r0, #0
 8001632:	bd10      	pop	{r4, pc}

08001634 <HAL_Init>:
{
 8001634:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_Init+0x1c>)
 8001638:	6813      	ldr	r3, [r2, #0]
 800163a:	2110      	movs	r1, #16
 800163c:	430b      	orrs	r3, r1
 800163e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff ffe5 	bl	8001610 <HAL_InitTick>
  HAL_MspInit();
 8001646:	f002 fa1b 	bl	8003a80 <HAL_MspInit>
}
 800164a:	2000      	movs	r0, #0
 800164c:	bd10      	pop	{r4, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001654:	4a02      	ldr	r2, [pc, #8]	; (8001660 <HAL_IncTick+0xc>)
 8001656:	6813      	ldr	r3, [r2, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	4770      	bx	lr
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	2000006c 	.word	0x2000006c

08001664 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001664:	4b01      	ldr	r3, [pc, #4]	; (800166c <HAL_GetTick+0x8>)
 8001666:	6818      	ldr	r0, [r3, #0]
}
 8001668:	4770      	bx	lr
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	2000006c 	.word	0x2000006c

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001670:	b530      	push	{r4, r5, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8001676:	f7ff fff5 	bl	8001664 <HAL_GetTick>
 800167a:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 800167c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	1c63      	adds	r3, r4, #1
 8001680:	d000      	beq.n	8001684 <HAL_Delay+0x14>
  {
     wait++;
 8001682:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	1b40      	subs	r0, r0, r5
 800168a:	42a0      	cmp	r0, r4
 800168c:	d3fa      	bcc.n	8001684 <HAL_Delay+0x14>
  {
  }
}
 800168e:	b003      	add	sp, #12
 8001690:	bd30      	pop	{r4, r5, pc}
	...

08001694 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001694:	b530      	push	{r4, r5, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800169e:	6802      	ldr	r2, [r0, #0]
 80016a0:	6891      	ldr	r1, [r2, #8]
 80016a2:	3303      	adds	r3, #3
 80016a4:	400b      	ands	r3, r1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d011      	beq.n	80016ce <ADC_Enable+0x3a>
 80016aa:	2300      	movs	r3, #0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d142      	bne.n	8001736 <ADC_Enable+0xa2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80016b0:	6891      	ldr	r1, [r2, #8]
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <ADC_Enable+0xa8>)
 80016b4:	4219      	tst	r1, r3
 80016b6:	d116      	bne.n	80016e6 <ADC_Enable+0x52>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016b8:	6893      	ldr	r3, [r2, #8]
 80016ba:	2101      	movs	r1, #1
 80016bc:	430b      	orrs	r3, r1
 80016be:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <ADC_Enable+0xac>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	491f      	ldr	r1, [pc, #124]	; (8001744 <ADC_Enable+0xb0>)
 80016c6:	f7fe fd1f 	bl	8000108 <__udivsi3>
 80016ca:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80016cc:	e018      	b.n	8001700 <ADC_Enable+0x6c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ce:	6813      	ldr	r3, [r2, #0]
 80016d0:	07db      	lsls	r3, r3, #31
 80016d2:	d404      	bmi.n	80016de <ADC_Enable+0x4a>
 80016d4:	68d3      	ldr	r3, [r2, #12]
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	d403      	bmi.n	80016e2 <ADC_Enable+0x4e>
 80016da:	2300      	movs	r3, #0
 80016dc:	e7e6      	b.n	80016ac <ADC_Enable+0x18>
 80016de:	2301      	movs	r3, #1
 80016e0:	e7e4      	b.n	80016ac <ADC_Enable+0x18>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e7e2      	b.n	80016ac <ADC_Enable+0x18>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016e8:	2210      	movs	r2, #16
 80016ea:	4313      	orrs	r3, r2
 80016ec:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80016f0:	3a0f      	subs	r2, #15
 80016f2:	4313      	orrs	r3, r2
 80016f4:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
 80016f8:	e01e      	b.n	8001738 <ADC_Enable+0xa4>
    {
      wait_loop_index--;
 80016fa:	9b01      	ldr	r3, [sp, #4]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f9      	bne.n	80016fa <ADC_Enable+0x66>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001706:	f7ff ffad 	bl	8001664 <HAL_GetTick>
 800170a:	0005      	movs	r5, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	07db      	lsls	r3, r3, #31
 8001712:	d40e      	bmi.n	8001732 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001714:	f7ff ffa6 	bl	8001664 <HAL_GetTick>
 8001718:	1b40      	subs	r0, r0, r5
 800171a:	2802      	cmp	r0, #2
 800171c:	d9f6      	bls.n	800170c <ADC_Enable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001720:	2210      	movs	r2, #16
 8001722:	4313      	orrs	r3, r2
 8001724:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001726:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001728:	3a0f      	subs	r2, #15
 800172a:	4313      	orrs	r3, r2
 800172c:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 800172e:	2001      	movs	r0, #1
 8001730:	e002      	b.n	8001738 <ADC_Enable+0xa4>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001732:	2000      	movs	r0, #0
 8001734:	e000      	b.n	8001738 <ADC_Enable+0xa4>
 8001736:	2000      	movs	r0, #0
}
 8001738:	b003      	add	sp, #12
 800173a:	bd30      	pop	{r4, r5, pc}
 800173c:	80000017 	.word	0x80000017
 8001740:	20000044 	.word	0x20000044
 8001744:	000f4240 	.word	0x000f4240

08001748 <HAL_ADC_Init>:
{
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800174c:	d100      	bne.n	8001750 <HAL_ADC_Init+0x8>
 800174e:	e0b9      	b.n	80018c4 <HAL_ADC_Init+0x17c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001750:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001752:	2b00      	cmp	r3, #0
 8001754:	d100      	bne.n	8001758 <HAL_ADC_Init+0x10>
 8001756:	e080      	b.n	800185a <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001758:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800175a:	06db      	lsls	r3, r3, #27
 800175c:	d500      	bpl.n	8001760 <HAL_ADC_Init+0x18>
 800175e:	e0ab      	b.n	80018b8 <HAL_ADC_Init+0x170>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001760:	6822      	ldr	r2, [r4, #0]
 8001762:	6893      	ldr	r3, [r2, #8]
 8001764:	2104      	movs	r1, #4
 8001766:	400b      	ands	r3, r1
      (tmp_hal_status == HAL_OK)                                &&
 8001768:	d000      	beq.n	800176c <HAL_ADC_Init+0x24>
 800176a:	e0a5      	b.n	80018b8 <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 800176c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800176e:	4856      	ldr	r0, [pc, #344]	; (80018c8 <HAL_ADC_Init+0x180>)
 8001770:	4001      	ands	r1, r0
 8001772:	3006      	adds	r0, #6
 8001774:	30ff      	adds	r0, #255	; 0xff
 8001776:	4301      	orrs	r1, r0
 8001778:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800177a:	6890      	ldr	r0, [r2, #8]
 800177c:	2103      	movs	r1, #3
 800177e:	4001      	ands	r1, r0
 8001780:	2901      	cmp	r1, #1
 8001782:	d070      	beq.n	8001866 <HAL_ADC_Init+0x11e>
 8001784:	2100      	movs	r1, #0
 8001786:	2900      	cmp	r1, #0
 8001788:	d10c      	bne.n	80017a4 <HAL_ADC_Init+0x5c>
      MODIFY_REG(hadc->Instance->CFGR1,
 800178a:	68d1      	ldr	r1, [r2, #12]
 800178c:	2018      	movs	r0, #24
 800178e:	4381      	bics	r1, r0
 8001790:	68a0      	ldr	r0, [r4, #8]
 8001792:	4301      	orrs	r1, r0
 8001794:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001796:	6821      	ldr	r1, [r4, #0]
 8001798:	690a      	ldr	r2, [r1, #16]
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	0892      	lsrs	r2, r2, #2
 800179e:	6860      	ldr	r0, [r4, #4]
 80017a0:	4302      	orrs	r2, r0
 80017a2:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80017a4:	6821      	ldr	r1, [r4, #0]
 80017a6:	68ca      	ldr	r2, [r1, #12]
 80017a8:	4848      	ldr	r0, [pc, #288]	; (80018cc <HAL_ADC_Init+0x184>)
 80017aa:	4002      	ands	r2, r0
 80017ac:	60ca      	str	r2, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80017ae:	69a2      	ldr	r2, [r4, #24]
 80017b0:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80017b2:	69e1      	ldr	r1, [r4, #28]
 80017b4:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80017b6:	430a      	orrs	r2, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80017b8:	6a20      	ldr	r0, [r4, #32]
 80017ba:	0341      	lsls	r1, r0, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80017bc:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80017be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017c0:	2901      	cmp	r1, #1
 80017c2:	d05c      	beq.n	800187e <HAL_ADC_Init+0x136>
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	0149      	lsls	r1, r1, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80017c8:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80017ca:	68e1      	ldr	r1, [r4, #12]
 80017cc:	430a      	orrs	r2, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80017ce:	6921      	ldr	r1, [r4, #16]
 80017d0:	2902      	cmp	r1, #2
 80017d2:	d056      	beq.n	8001882 <HAL_ADC_Init+0x13a>
                 hadc->Init.DataAlign                                   |
 80017d4:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80017d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017d8:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80017da:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017de:	2a01      	cmp	r2, #1
 80017e0:	d051      	beq.n	8001886 <HAL_ADC_Init+0x13e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017e4:	21c2      	movs	r1, #194	; 0xc2
 80017e6:	31ff      	adds	r1, #255	; 0xff
 80017e8:	428a      	cmp	r2, r1
 80017ea:	d002      	beq.n	80017f2 <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80017ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017ee:	430a      	orrs	r2, r1
 80017f0:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80017f2:	6821      	ldr	r1, [r4, #0]
 80017f4:	68ca      	ldr	r2, [r1, #12]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0549      	lsls	r1, r1, #21
 8001800:	428a      	cmp	r2, r1
 8001802:	d00d      	beq.n	8001820 <HAL_ADC_Init+0xd8>
 8001804:	2a01      	cmp	r2, #1
 8001806:	d00b      	beq.n	8001820 <HAL_ADC_Init+0xd8>
 8001808:	2a02      	cmp	r2, #2
 800180a:	d009      	beq.n	8001820 <HAL_ADC_Init+0xd8>
 800180c:	2a03      	cmp	r2, #3
 800180e:	d007      	beq.n	8001820 <HAL_ADC_Init+0xd8>
 8001810:	2a04      	cmp	r2, #4
 8001812:	d005      	beq.n	8001820 <HAL_ADC_Init+0xd8>
 8001814:	2a05      	cmp	r2, #5
 8001816:	d003      	beq.n	8001820 <HAL_ADC_Init+0xd8>
 8001818:	2a06      	cmp	r2, #6
 800181a:	d001      	beq.n	8001820 <HAL_ADC_Init+0xd8>
 800181c:	2a07      	cmp	r2, #7
 800181e:	d10a      	bne.n	8001836 <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	6941      	ldr	r1, [r0, #20]
 8001824:	2207      	movs	r2, #7
 8001826:	4391      	bics	r1, r2
 8001828:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800182a:	6820      	ldr	r0, [r4, #0]
 800182c:	6941      	ldr	r1, [r0, #20]
 800182e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001830:	402a      	ands	r2, r5
 8001832:	430a      	orrs	r2, r1
 8001834:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	68d2      	ldr	r2, [r2, #12]
 800183a:	4925      	ldr	r1, [pc, #148]	; (80018d0 <HAL_ADC_Init+0x188>)
 800183c:	400a      	ands	r2, r1
 800183e:	4293      	cmp	r3, r2
 8001840:	d030      	beq.n	80018a4 <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 8001842:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001844:	2212      	movs	r2, #18
 8001846:	4393      	bics	r3, r2
 8001848:	3a02      	subs	r2, #2
 800184a:	4313      	orrs	r3, r2
 800184c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001850:	3a0f      	subs	r2, #15
 8001852:	4313      	orrs	r3, r2
 8001854:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001856:	2001      	movs	r0, #1
 8001858:	e033      	b.n	80018c2 <HAL_ADC_Init+0x17a>
    ADC_CLEAR_ERRORCODE(hadc);
 800185a:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800185c:	2240      	movs	r2, #64	; 0x40
 800185e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8001860:	f002 f938 	bl	8003ad4 <HAL_ADC_MspInit>
 8001864:	e778      	b.n	8001758 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001866:	6811      	ldr	r1, [r2, #0]
 8001868:	07c9      	lsls	r1, r1, #31
 800186a:	d404      	bmi.n	8001876 <HAL_ADC_Init+0x12e>
 800186c:	68d1      	ldr	r1, [r2, #12]
 800186e:	0409      	lsls	r1, r1, #16
 8001870:	d403      	bmi.n	800187a <HAL_ADC_Init+0x132>
 8001872:	2100      	movs	r1, #0
 8001874:	e787      	b.n	8001786 <HAL_ADC_Init+0x3e>
 8001876:	2101      	movs	r1, #1
 8001878:	e785      	b.n	8001786 <HAL_ADC_Init+0x3e>
 800187a:	2101      	movs	r1, #1
 800187c:	e783      	b.n	8001786 <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800187e:	0019      	movs	r1, r3
 8001880:	e7a2      	b.n	80017c8 <HAL_ADC_Init+0x80>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001882:	2304      	movs	r3, #4
 8001884:	e7a6      	b.n	80017d4 <HAL_ADC_Init+0x8c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001886:	2800      	cmp	r0, #0
 8001888:	d103      	bne.n	8001892 <HAL_ADC_Init+0x14a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	0252      	lsls	r2, r2, #9
 800188e:	4313      	orrs	r3, r2
 8001890:	e7a7      	b.n	80017e2 <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001892:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001894:	2120      	movs	r1, #32
 8001896:	430a      	orrs	r2, r1
 8001898:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800189c:	391f      	subs	r1, #31
 800189e:	430a      	orrs	r2, r1
 80018a0:	64a2      	str	r2, [r4, #72]	; 0x48
 80018a2:	e79e      	b.n	80017e2 <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	2300      	movs	r3, #0
 80018a6:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80018a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018aa:	2203      	movs	r2, #3
 80018ac:	4393      	bics	r3, r2
 80018ae:	3a02      	subs	r2, #2
 80018b0:	4313      	orrs	r3, r2
 80018b2:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2000      	movs	r0, #0
 80018b6:	e004      	b.n	80018c2 <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018ba:	2210      	movs	r2, #16
 80018bc:	4313      	orrs	r3, r2
 80018be:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80018c0:	2001      	movs	r0, #1
}
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80018c4:	2001      	movs	r0, #1
 80018c6:	e7fc      	b.n	80018c2 <HAL_ADC_Init+0x17a>
 80018c8:	fffffefd 	.word	0xfffffefd
 80018cc:	fffe0219 	.word	0xfffe0219
 80018d0:	833fffe7 	.word	0x833fffe7

080018d4 <HAL_ADC_Start_DMA>:
{
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d6:	0004      	movs	r4, r0
 80018d8:	000e      	movs	r6, r1
 80018da:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018dc:	6803      	ldr	r3, [r0, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	075b      	lsls	r3, r3, #29
 80018e2:	d502      	bpl.n	80018ea <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 80018e4:	2502      	movs	r5, #2
}
 80018e6:	0028      	movs	r0, r5
 80018e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80018ea:	2340      	movs	r3, #64	; 0x40
 80018ec:	5cc3      	ldrb	r3, [r0, r3]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d03a      	beq.n	8001968 <HAL_ADC_Start_DMA+0x94>
 80018f2:	2201      	movs	r2, #1
 80018f4:	2340      	movs	r3, #64	; 0x40
 80018f6:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018f8:	69c3      	ldr	r3, [r0, #28]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d032      	beq.n	8001964 <HAL_ADC_Start_DMA+0x90>
      tmp_hal_status = ADC_Enable(hadc);
 80018fe:	f7ff fec9 	bl	8001694 <ADC_Enable>
 8001902:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 8001904:	2d00      	cmp	r5, #0
 8001906:	d1ee      	bne.n	80018e6 <HAL_ADC_Start_DMA+0x12>
      ADC_STATE_CLR_SET(hadc->State,
 8001908:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800190a:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_ADC_Start_DMA+0x98>)
 800190c:	401a      	ands	r2, r3
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4313      	orrs	r3, r2
 8001914:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8001916:	2300      	movs	r3, #0
 8001918:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800191a:	2240      	movs	r2, #64	; 0x40
 800191c:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800191e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001920:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_ADC_Start_DMA+0x9c>)
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001924:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_ADC_Start_DMA+0xa0>)
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800192a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <HAL_ADC_Start_DMA+0xa4>)
 800192e:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	221c      	movs	r2, #28
 8001934:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001936:	6822      	ldr	r2, [r4, #0]
 8001938:	6853      	ldr	r3, [r2, #4]
 800193a:	2110      	movs	r1, #16
 800193c:	430b      	orrs	r3, r1
 800193e:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	68d3      	ldr	r3, [r2, #12]
 8001944:	390f      	subs	r1, #15
 8001946:	430b      	orrs	r3, r1
 8001948:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800194a:	6821      	ldr	r1, [r4, #0]
 800194c:	3140      	adds	r1, #64	; 0x40
 800194e:	003b      	movs	r3, r7
 8001950:	0032      	movs	r2, r6
 8001952:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001954:	f000 f9ba 	bl	8001ccc <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	6893      	ldr	r3, [r2, #8]
 800195c:	2104      	movs	r1, #4
 800195e:	430b      	orrs	r3, r1
 8001960:	6093      	str	r3, [r2, #8]
 8001962:	e7c0      	b.n	80018e6 <HAL_ADC_Start_DMA+0x12>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2500      	movs	r5, #0
 8001966:	e7cd      	b.n	8001904 <HAL_ADC_Start_DMA+0x30>
    __HAL_LOCK(hadc);
 8001968:	2502      	movs	r5, #2
 800196a:	e7bc      	b.n	80018e6 <HAL_ADC_Start_DMA+0x12>
 800196c:	fffff0fe 	.word	0xfffff0fe
 8001970:	0800197d 	.word	0x0800197d
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019fb 	.word	0x080019fb

0800197c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800197c:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800197e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001982:	2150      	movs	r1, #80	; 0x50
 8001984:	4211      	tst	r1, r2
 8001986:	d12b      	bne.n	80019e0 <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001988:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	430a      	orrs	r2, r1
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68d0      	ldr	r0, [r2, #12]
 8001996:	21c0      	movs	r1, #192	; 0xc0
 8001998:	0109      	lsls	r1, r1, #4
 800199a:	4208      	tst	r0, r1
 800199c:	d113      	bne.n	80019c6 <ADC_DMAConvCplt+0x4a>
 800199e:	6a19      	ldr	r1, [r3, #32]
 80019a0:	2900      	cmp	r1, #0
 80019a2:	d110      	bne.n	80019c6 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80019a4:	6811      	ldr	r1, [r2, #0]
 80019a6:	0709      	lsls	r1, r1, #28
 80019a8:	d50d      	bpl.n	80019c6 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019aa:	6891      	ldr	r1, [r2, #8]
 80019ac:	0749      	lsls	r1, r1, #29
 80019ae:	d40e      	bmi.n	80019ce <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019b0:	6851      	ldr	r1, [r2, #4]
 80019b2:	200c      	movs	r0, #12
 80019b4:	4381      	bics	r1, r0
 80019b6:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80019b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ba:	490b      	ldr	r1, [pc, #44]	; (80019e8 <ADC_DMAConvCplt+0x6c>)
 80019bc:	400a      	ands	r2, r1
 80019be:	3104      	adds	r1, #4
 80019c0:	31ff      	adds	r1, #255	; 0xff
 80019c2:	430a      	orrs	r2, r1
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80019c6:	0018      	movs	r0, r3
 80019c8:	f001 ff30 	bl	800382c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80019cc:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019d0:	2120      	movs	r1, #32
 80019d2:	430a      	orrs	r2, r1
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019d8:	391f      	subs	r1, #31
 80019da:	430a      	orrs	r2, r1
 80019dc:	649a      	str	r2, [r3, #72]	; 0x48
 80019de:	e7f2      	b.n	80019c6 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4798      	blx	r3
}
 80019e6:	e7f1      	b.n	80019cc <ADC_DMAConvCplt+0x50>
 80019e8:	fffffefe 	.word	0xfffffefe

080019ec <HAL_ADC_ConvHalfCpltCallback>:
}
 80019ec:	4770      	bx	lr

080019ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019ee:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80019f2:	f7ff fffb 	bl	80019ec <HAL_ADC_ConvHalfCpltCallback>
}
 80019f6:	bd10      	pop	{r4, pc}

080019f8 <HAL_ADC_ErrorCallback>:
}
 80019f8:	4770      	bx	lr

080019fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019fa:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	4313      	orrs	r3, r2
 8001a04:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a06:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001a08:	3a3c      	subs	r2, #60	; 0x3c
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001a0e:	f7ff fff3 	bl	80019f8 <HAL_ADC_ErrorCallback>
}
 8001a12:	bd10      	pop	{r4, pc}

08001a14 <HAL_ADC_ConfigChannel>:
{
 8001a14:	b530      	push	{r4, r5, lr}
 8001a16:	b083      	sub	sp, #12
 8001a18:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001a1e:	3340      	adds	r3, #64	; 0x40
 8001a20:	5cc3      	ldrb	r3, [r0, r3]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d100      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x14>
 8001a26:	e081      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x118>
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2340      	movs	r3, #64	; 0x40
 8001a2c:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a2e:	6803      	ldr	r3, [r0, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	0752      	lsls	r2, r2, #29
 8001a34:	d470      	bmi.n	8001b18 <HAL_ADC_ConfigChannel+0x104>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a36:	4a3e      	ldr	r2, [pc, #248]	; (8001b30 <HAL_ADC_ConfigChannel+0x11c>)
 8001a38:	6848      	ldr	r0, [r1, #4]
 8001a3a:	4290      	cmp	r0, r2
 8001a3c:	d053      	beq.n	8001ae6 <HAL_ADC_ConfigChannel+0xd2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a40:	2001      	movs	r0, #1
 8001a42:	680d      	ldr	r5, [r1, #0]
 8001a44:	40a8      	lsls	r0, r5
 8001a46:	4302      	orrs	r2, r0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	0552      	lsls	r2, r2, #21
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d01e      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d01c      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d01a      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d018      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d016      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d014      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
 8001a68:	2b06      	cmp	r3, #6
 8001a6a:	d012      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d010      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001a70:	6822      	ldr	r2, [r4, #0]
 8001a72:	6950      	ldr	r0, [r2, #20]
 8001a74:	2307      	movs	r3, #7
 8001a76:	4003      	ands	r3, r0
 8001a78:	6888      	ldr	r0, [r1, #8]
 8001a7a:	4298      	cmp	r0, r3
 8001a7c:	d009      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a7e:	6950      	ldr	r0, [r2, #20]
 8001a80:	2307      	movs	r3, #7
 8001a82:	4398      	bics	r0, r3
 8001a84:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001a86:	6820      	ldr	r0, [r4, #0]
 8001a88:	6942      	ldr	r2, [r0, #20]
 8001a8a:	688d      	ldr	r5, [r1, #8]
 8001a8c:	402b      	ands	r3, r5
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a92:	680b      	ldr	r3, [r1, #0]
 8001a94:	001a      	movs	r2, r3
 8001a96:	3a10      	subs	r2, #16
 8001a98:	2a01      	cmp	r2, #1
 8001a9a:	d901      	bls.n	8001aa0 <HAL_ADC_ConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e040      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001aa0:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <HAL_ADC_ConfigChannel+0x120>)
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d009      	beq.n	8001abc <HAL_ADC_ConfigChannel+0xa8>
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	03db      	lsls	r3, r3, #15
 8001aac:	4313      	orrs	r3, r2
 8001aae:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <HAL_ADC_ConfigChannel+0x120>)
 8001ab0:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ab2:	680b      	ldr	r3, [r1, #0]
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d004      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2000      	movs	r0, #0
 8001aba:	e032      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	e7f4      	b.n	8001aac <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_ADC_ConfigChannel+0x124>)
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	491d      	ldr	r1, [pc, #116]	; (8001b3c <HAL_ADC_ConfigChannel+0x128>)
 8001ac8:	f7fe fb1e 	bl	8000108 <__udivsi3>
 8001acc:	0083      	lsls	r3, r0, #2
 8001ace:	1818      	adds	r0, r3, r0
 8001ad0:	0043      	lsls	r3, r0, #1
 8001ad2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001ad4:	e002      	b.n	8001adc <HAL_ADC_ConfigChannel+0xc8>
            wait_loop_index--;
 8001ad6:	9b01      	ldr	r3, [sp, #4]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001adc:	9b01      	ldr	r3, [sp, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f9      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e01d      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x10e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae8:	2001      	movs	r0, #1
 8001aea:	680d      	ldr	r5, [r1, #0]
 8001aec:	40a8      	lsls	r0, r5
 8001aee:	4382      	bics	r2, r0
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001af2:	680b      	ldr	r3, [r1, #0]
 8001af4:	001a      	movs	r2, r3
 8001af6:	3a10      	subs	r2, #16
 8001af8:	2a01      	cmp	r2, #1
 8001afa:	d901      	bls.n	8001b00 <HAL_ADC_ConfigChannel+0xec>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afc:	2000      	movs	r0, #0
 8001afe:	e010      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b00:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_ADC_ConfigChannel+0x120>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d005      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x100>
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_ADC_ConfigChannel+0x12c>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_ADC_ConfigChannel+0x120>)
 8001b0e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b10:	2000      	movs	r0, #0
 8001b12:	e006      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_ADC_ConfigChannel+0x130>)
 8001b16:	e7f8      	b.n	8001b0a <HAL_ADC_ConfigChannel+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2340      	movs	r3, #64	; 0x40
 8001b26:	54e2      	strb	r2, [r4, r3]
}
 8001b28:	b003      	add	sp, #12
 8001b2a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	e7fb      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x114>
 8001b30:	00001001 	.word	0x00001001
 8001b34:	40012708 	.word	0x40012708
 8001b38:	20000044 	.word	0x20000044
 8001b3c:	000f4240 	.word	0x000f4240
 8001b40:	ffbfffff 	.word	0xffbfffff
 8001b44:	ff7fffff 	.word	0xff7fffff

08001b48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b48:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	db11      	blt.n	8001b72 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b4e:	0883      	lsrs	r3, r0, #2
 8001b50:	4d14      	ldr	r5, [pc, #80]	; (8001ba4 <HAL_NVIC_SetPriority+0x5c>)
 8001b52:	33c0      	adds	r3, #192	; 0xc0
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	595c      	ldr	r4, [r3, r5]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4010      	ands	r0, r2
 8001b5c:	00c0      	lsls	r0, r0, #3
 8001b5e:	32fc      	adds	r2, #252	; 0xfc
 8001b60:	0016      	movs	r6, r2
 8001b62:	4086      	lsls	r6, r0
 8001b64:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b66:	0189      	lsls	r1, r1, #6
 8001b68:	400a      	ands	r2, r1
 8001b6a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b6c:	4322      	orrs	r2, r4
 8001b6e:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b72:	b2c0      	uxtb	r0, r0
 8001b74:	230f      	movs	r3, #15
 8001b76:	4003      	ands	r3, r0
 8001b78:	3b08      	subs	r3, #8
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3306      	adds	r3, #6
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_NVIC_SetPriority+0x60>)
 8001b82:	4694      	mov	ip, r2
 8001b84:	4463      	add	r3, ip
 8001b86:	685d      	ldr	r5, [r3, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4010      	ands	r0, r2
 8001b8c:	00c0      	lsls	r0, r0, #3
 8001b8e:	24ff      	movs	r4, #255	; 0xff
 8001b90:	0022      	movs	r2, r4
 8001b92:	4082      	lsls	r2, r0
 8001b94:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b96:	0189      	lsls	r1, r1, #6
 8001b98:	400c      	ands	r4, r1
 8001b9a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b9c:	432c      	orrs	r4, r5
 8001b9e:	605c      	str	r4, [r3, #4]
 8001ba0:	e7e6      	b.n	8001b70 <HAL_NVIC_SetPriority+0x28>
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001bac:	231f      	movs	r3, #31
 8001bae:	4018      	ands	r0, r3
 8001bb0:	3b1e      	subs	r3, #30
 8001bb2:	4083      	lsls	r3, r0
 8001bb4:	4a01      	ldr	r2, [pc, #4]	; (8001bbc <HAL_NVIC_EnableIRQ+0x10>)
 8001bb6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bb8:	4770      	bx	lr
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	3801      	subs	r0, #1
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_SYSTICK_Config+0x2c>)
 8001bc4:	4298      	cmp	r0, r3
 8001bc6:	d80f      	bhi.n	8001be8 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc8:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_SYSTICK_Config+0x30>)
 8001bca:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <HAL_SYSTICK_Config+0x34>)
 8001bce:	6a03      	ldr	r3, [r0, #32]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	21c0      	movs	r1, #192	; 0xc0
 8001bd6:	0609      	lsls	r1, r1, #24
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be0:	3307      	adds	r3, #7
 8001be2:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001be6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001be8:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001bea:	e7fc      	b.n	8001be6 <HAL_SYSTICK_Config+0x26>
 8001bec:	00ffffff 	.word	0x00ffffff
 8001bf0:	e000e010 	.word	0xe000e010
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001bf8:	2804      	cmp	r0, #4
 8001bfa:	d005      	beq.n	8001c08 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001bfe:	6813      	ldr	r3, [r2, #0]
 8001c00:	2104      	movs	r1, #4
 8001c02:	438b      	bics	r3, r1
 8001c04:	6013      	str	r3, [r2, #0]
  }
}
 8001c06:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001c08:	4a02      	ldr	r2, [pc, #8]	; (8001c14 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001c0a:	6813      	ldr	r3, [r2, #0]
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e7f8      	b.n	8001c06 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001c18:	4770      	bx	lr

08001c1a <HAL_SYSTICK_IRQHandler>:
{
 8001c1a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8001c1c:	f7ff fffc 	bl	8001c18 <HAL_SYSTICK_Callback>
}
 8001c20:	bd10      	pop	{r4, pc}

08001c22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c22:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c24:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001c26:	2401      	movs	r4, #1
 8001c28:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001c2a:	40b4      	lsls	r4, r6
 8001c2c:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c2e:	6804      	ldr	r4, [r0, #0]
 8001c30:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c32:	6843      	ldr	r3, [r0, #4]
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d004      	beq.n	8001c42 <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c38:	6803      	ldr	r3, [r0, #0]
 8001c3a:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c3c:	6803      	ldr	r3, [r0, #0]
 8001c3e:	60da      	str	r2, [r3, #12]
  }
}
 8001c40:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8001c42:	6803      	ldr	r3, [r0, #0]
 8001c44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c46:	6803      	ldr	r3, [r0, #0]
 8001c48:	60d9      	str	r1, [r3, #12]
 8001c4a:	e7f9      	b.n	8001c40 <DMA_SetConfig+0x1e>

08001c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b510      	push	{r4, lr}
 8001c4e:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <DMA_CalcBaseAndBitshift+0x20>)
 8001c54:	4694      	mov	ip, r2
 8001c56:	4463      	add	r3, ip
 8001c58:	0018      	movs	r0, r3
 8001c5a:	2114      	movs	r1, #20
 8001c5c:	f7fe fa54 	bl	8000108 <__udivsi3>
 8001c60:	0080      	lsls	r0, r0, #2
 8001c62:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <DMA_CalcBaseAndBitshift+0x24>)
 8001c66:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 8001c68:	bd10      	pop	{r4, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	bffdfff8 	.word	0xbffdfff8
 8001c70:	40020000 	.word	0x40020000

08001c74 <HAL_DMA_Init>:
{ 
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 8001c78:	d024      	beq.n	8001cc4 <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c7a:	2521      	movs	r5, #33	; 0x21
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 8001c80:	6801      	ldr	r1, [r0, #0]
 8001c82:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c84:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_DMA_Init+0x54>)
 8001c86:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001c88:	6843      	ldr	r3, [r0, #4]
 8001c8a:	6880      	ldr	r0, [r0, #8]
 8001c8c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8e:	68e0      	ldr	r0, [r4, #12]
 8001c90:	4303      	orrs	r3, r0
 8001c92:	6920      	ldr	r0, [r4, #16]
 8001c94:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	6960      	ldr	r0, [r4, #20]
 8001c98:	4303      	orrs	r3, r0
 8001c9a:	69a0      	ldr	r0, [r4, #24]
 8001c9c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c9e:	69e0      	ldr	r0, [r4, #28]
 8001ca0:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001ca2:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001ca4:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f7ff ffd0 	bl	8001c4c <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001cb2:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001cb4:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb6:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001cbc:	321f      	adds	r2, #31
 8001cbe:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001cc0:	2000      	movs	r0, #0
}  
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	e7fc      	b.n	8001cc2 <HAL_DMA_Init+0x4e>
 8001cc8:	ffffc00f 	.word	0xffffc00f

08001ccc <HAL_DMA_Start_IT>:
{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001cd0:	2020      	movs	r0, #32
 8001cd2:	5c20      	ldrb	r0, [r4, r0]
 8001cd4:	2801      	cmp	r0, #1
 8001cd6:	d032      	beq.n	8001d3e <HAL_DMA_Start_IT+0x72>
 8001cd8:	2501      	movs	r5, #1
 8001cda:	2020      	movs	r0, #32
 8001cdc:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cde:	3001      	adds	r0, #1
 8001ce0:	5c20      	ldrb	r0, [r4, r0]
 8001ce2:	2801      	cmp	r0, #1
 8001ce4:	d004      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2320      	movs	r3, #32
 8001cea:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001cec:	2002      	movs	r0, #2
} 
 8001cee:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001cf0:	3501      	adds	r5, #1
 8001cf2:	3020      	adds	r0, #32
 8001cf4:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cfa:	6825      	ldr	r5, [r4, #0]
 8001cfc:	6828      	ldr	r0, [r5, #0]
 8001cfe:	2601      	movs	r6, #1
 8001d00:	43b0      	bics	r0, r6
 8001d02:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d04:	0020      	movs	r0, r4
 8001d06:	f7ff ff8c 	bl	8001c22 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001d0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d10:	6822      	ldr	r2, [r4, #0]
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	210e      	movs	r1, #14
 8001d16:	430b      	orrs	r3, r1
 8001d18:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	2101      	movs	r1, #1
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001d24:	2000      	movs	r0, #0
 8001d26:	e7e2      	b.n	8001cee <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d28:	6822      	ldr	r2, [r4, #0]
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	210a      	movs	r1, #10
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	6813      	ldr	r3, [r2, #0]
 8001d36:	3906      	subs	r1, #6
 8001d38:	438b      	bics	r3, r1
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e7ed      	b.n	8001d1a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001d3e:	2002      	movs	r0, #2
 8001d40:	e7d5      	b.n	8001cee <HAL_DMA_Start_IT+0x22>

08001d42 <HAL_DMA_IRQHandler>:
{
 8001d42:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d44:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001d46:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d48:	6804      	ldr	r4, [r0, #0]
 8001d4a:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d4e:	2304      	movs	r3, #4
 8001d50:	408b      	lsls	r3, r1
 8001d52:	4213      	tst	r3, r2
 8001d54:	d012      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x3a>
 8001d56:	076b      	lsls	r3, r5, #29
 8001d58:	d510      	bpl.n	8001d7c <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	069b      	lsls	r3, r3, #26
 8001d5e:	d403      	bmi.n	8001d68 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	2204      	movs	r2, #4
 8001d64:	4393      	bics	r3, r2
 8001d66:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d6e:	408b      	lsls	r3, r1
 8001d70:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d000      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8001d78:	4798      	blx	r3
}  
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	408b      	lsls	r3, r1
 8001d80:	4213      	tst	r3, r2
 8001d82:	d018      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x74>
 8001d84:	07ab      	lsls	r3, r5, #30
 8001d86:	d516      	bpl.n	8001db6 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	069b      	lsls	r3, r3, #26
 8001d8c:	d406      	bmi.n	8001d9c <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	220a      	movs	r2, #10
 8001d92:	4393      	bics	r3, r2
 8001d94:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001d96:	3a09      	subs	r2, #9
 8001d98:	2321      	movs	r3, #33	; 0x21
 8001d9a:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001d9e:	2302      	movs	r3, #2
 8001da0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001da2:	408b      	lsls	r3, r1
 8001da4:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2320      	movs	r3, #32
 8001daa:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8001dac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0e3      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8001db2:	4798      	blx	r3
 8001db4:	e7e1      	b.n	8001d7a <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001db6:	2308      	movs	r3, #8
 8001db8:	408b      	lsls	r3, r1
 8001dba:	4213      	tst	r3, r2
 8001dbc:	d0dd      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x38>
 8001dbe:	072b      	lsls	r3, r5, #28
 8001dc0:	d5db      	bpl.n	8001d7a <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	220e      	movs	r2, #14
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001dcc:	2301      	movs	r3, #1
 8001dce:	0019      	movs	r1, r3
 8001dd0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001dd2:	40a1      	lsls	r1, r4
 8001dd4:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dd6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001dd8:	2221      	movs	r2, #33	; 0x21
 8001dda:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 8001ddc:	2200      	movs	r2, #0
 8001dde:	331f      	adds	r3, #31
 8001de0:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8001de2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0c8      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8001de8:	4798      	blx	r3
}  
 8001dea:	e7c6      	b.n	8001d7a <HAL_DMA_IRQHandler+0x38>

08001dec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001dec:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001dee:	2200      	movs	r2, #0
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <FLASH_Program_HalfWord+0x18>)
 8001df2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <FLASH_Program_HalfWord+0x1c>)
 8001df6:	6913      	ldr	r3, [r2, #16]
 8001df8:	2401      	movs	r4, #1
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001dfe:	8001      	strh	r1, [r0, #0]
}
 8001e00:	bd10      	pop	{r4, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	20000070 	.word	0x20000070
 8001e08:	40022000 	.word	0x40022000

08001e0c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <FLASH_SetErrorCode+0x34>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	06db      	lsls	r3, r3, #27
 8001e12:	d513      	bpl.n	8001e3c <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <FLASH_SetErrorCode+0x38>)
 8001e16:	69d3      	ldr	r3, [r2, #28]
 8001e18:	2102      	movs	r1, #2
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001e1e:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <FLASH_SetErrorCode+0x34>)
 8001e22:	68d2      	ldr	r2, [r2, #12]
 8001e24:	0752      	lsls	r2, r2, #29
 8001e26:	d506      	bpl.n	8001e36 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001e28:	4906      	ldr	r1, [pc, #24]	; (8001e44 <FLASH_SetErrorCode+0x38>)
 8001e2a:	69ca      	ldr	r2, [r1, #28]
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	4302      	orrs	r2, r0
 8001e30:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8001e32:	2204      	movs	r2, #4
 8001e34:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001e36:	4a02      	ldr	r2, [pc, #8]	; (8001e40 <FLASH_SetErrorCode+0x34>)
 8001e38:	60d3      	str	r3, [r2, #12]
}  
 8001e3a:	4770      	bx	lr
  uint32_t flags = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e7ef      	b.n	8001e20 <FLASH_SetErrorCode+0x14>
 8001e40:	40022000 	.word	0x40022000
 8001e44:	20000070 	.word	0x20000070

08001e48 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_FLASH_Unlock+0x1c>)
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	061b      	lsls	r3, r3, #24
 8001e4e:	d506      	bpl.n	8001e5e <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_FLASH_Unlock+0x1c>)
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_FLASH_Unlock+0x20>)
 8001e54:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <HAL_FLASH_Unlock+0x24>)
 8001e58:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8001e5a:	2000      	movs	r0, #0
}
 8001e5c:	4770      	bx	lr
    return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
 8001e60:	e7fc      	b.n	8001e5c <HAL_FLASH_Unlock+0x14>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40022000 	.word	0x40022000
 8001e68:	45670123 	.word	0x45670123
 8001e6c:	cdef89ab 	.word	0xcdef89ab

08001e70 <FLASH_WaitForLastOperation>:
{
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff fbf6 	bl	8001664 <HAL_GetTick>
 8001e78:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <FLASH_WaitForLastOperation+0x58>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	07db      	lsls	r3, r3, #31
 8001e80:	d50a      	bpl.n	8001e98 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8001e82:	1c63      	adds	r3, r4, #1
 8001e84:	d0f9      	beq.n	8001e7a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001e86:	2c00      	cmp	r4, #0
 8001e88:	d019      	beq.n	8001ebe <FLASH_WaitForLastOperation+0x4e>
 8001e8a:	f7ff fbeb 	bl	8001664 <HAL_GetTick>
 8001e8e:	1b40      	subs	r0, r0, r5
 8001e90:	4284      	cmp	r4, r0
 8001e92:	d2f2      	bcs.n	8001e7a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001e94:	2003      	movs	r0, #3
 8001e96:	e011      	b.n	8001ebc <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <FLASH_WaitForLastOperation+0x58>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	069b      	lsls	r3, r3, #26
 8001e9e:	d502      	bpl.n	8001ea6 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <FLASH_WaitForLastOperation+0x58>)
 8001ea4:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <FLASH_WaitForLastOperation+0x58>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	06db      	lsls	r3, r3, #27
 8001eac:	d403      	bmi.n	8001eb6 <FLASH_WaitForLastOperation+0x46>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <FLASH_WaitForLastOperation+0x58>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001eb2:	075b      	lsls	r3, r3, #29
 8001eb4:	d505      	bpl.n	8001ec2 <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8001eb6:	f7ff ffa9 	bl	8001e0c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
}
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	e7fc      	b.n	8001ebc <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	e7fa      	b.n	8001ebc <FLASH_WaitForLastOperation+0x4c>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_FLASH_Program>:
{
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	0004      	movs	r4, r0
 8001ed2:	000e      	movs	r6, r1
 8001ed4:	9201      	str	r2, [sp, #4]
 8001ed6:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 8001ed8:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_FLASH_Program+0x90>)
 8001eda:	7e1b      	ldrb	r3, [r3, #24]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_FLASH_Program+0x1a>
 8001ee0:	2002      	movs	r0, #2
}
 8001ee2:	b003      	add	sp, #12
 8001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_FLASH_Program+0x90>)
 8001eea:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001eec:	481c      	ldr	r0, [pc, #112]	; (8001f60 <HAL_FLASH_Program+0x94>)
 8001eee:	f7ff ffbf 	bl	8001e70 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d12d      	bne.n	8001f52 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001ef6:	2c01      	cmp	r4, #1
 8001ef8:	d006      	beq.n	8001f08 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001efa:	2c02      	cmp	r4, #2
 8001efc:	d002      	beq.n	8001f04 <HAL_FLASH_Program+0x38>
      nbiterations = 4U;
 8001efe:	2504      	movs	r5, #4
    for (index = 0U; index < nbiterations; index++)
 8001f00:	2400      	movs	r4, #0
 8001f02:	e01b      	b.n	8001f3c <HAL_FLASH_Program+0x70>
      nbiterations = 2U;
 8001f04:	2502      	movs	r5, #2
 8001f06:	e7fb      	b.n	8001f00 <HAL_FLASH_Program+0x34>
      nbiterations = 1U;
 8001f08:	2501      	movs	r5, #1
 8001f0a:	e7f9      	b.n	8001f00 <HAL_FLASH_Program+0x34>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	0039      	movs	r1, r7
 8001f12:	4091      	lsls	r1, r2
 8001f14:	000a      	movs	r2, r1
 8001f16:	9901      	ldr	r1, [sp, #4]
 8001f18:	40d9      	lsrs	r1, r3
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	b289      	uxth	r1, r1
 8001f1e:	1980      	adds	r0, r0, r6
 8001f20:	f7ff ff64 	bl	8001dec <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f24:	480e      	ldr	r0, [pc, #56]	; (8001f60 <HAL_FLASH_Program+0x94>)
 8001f26:	f7ff ffa3 	bl	8001e70 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_FLASH_Program+0x98>)
 8001f2c:	6913      	ldr	r3, [r2, #16]
 8001f2e:	2101      	movs	r1, #1
 8001f30:	438b      	bics	r3, r1
 8001f32:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d10c      	bne.n	8001f52 <HAL_FLASH_Program+0x86>
    for (index = 0U; index < nbiterations; index++)
 8001f38:	3401      	adds	r4, #1
 8001f3a:	b2e4      	uxtb	r4, r4
 8001f3c:	42ac      	cmp	r4, r5
 8001f3e:	d208      	bcs.n	8001f52 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001f40:	0060      	lsls	r0, r4, #1
 8001f42:	0123      	lsls	r3, r4, #4
 8001f44:	2220      	movs	r2, #32
 8001f46:	4252      	negs	r2, r2
 8001f48:	189a      	adds	r2, r3, r2
 8001f4a:	d4df      	bmi.n	8001f0c <HAL_FLASH_Program+0x40>
 8001f4c:	0039      	movs	r1, r7
 8001f4e:	40d1      	lsrs	r1, r2
 8001f50:	e7e4      	b.n	8001f1c <HAL_FLASH_Program+0x50>
  __HAL_UNLOCK(&pFlash);
 8001f52:	2200      	movs	r2, #0
 8001f54:	4b01      	ldr	r3, [pc, #4]	; (8001f5c <HAL_FLASH_Program+0x90>)
 8001f56:	761a      	strb	r2, [r3, #24]
  return status;
 8001f58:	e7c3      	b.n	8001ee2 <HAL_FLASH_Program+0x16>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	20000070 	.word	0x20000070
 8001f60:	0000c350 	.word	0x0000c350
 8001f64:	40022000 	.word	0x40022000

08001f68 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <FLASH_MassErase+0x1c>)
 8001f6c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <FLASH_MassErase+0x20>)
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	2104      	movs	r1, #4
 8001f74:	430a      	orrs	r2, r1
 8001f76:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	313c      	adds	r1, #60	; 0x3c
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	611a      	str	r2, [r3, #16]
}
 8001f80:	4770      	bx	lr
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	20000070 	.word	0x20000070
 8001f88:	40022000 	.word	0x40022000

08001f8c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <FLASH_PageErase+0x1c>)
 8001f90:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <FLASH_PageErase+0x20>)
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	2102      	movs	r1, #2
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001f9c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	313e      	adds	r1, #62	; 0x3e
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	611a      	str	r2, [r3, #16]
}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000070 	.word	0x20000070
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_FLASHEx_Erase>:
{
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	0005      	movs	r5, r0
 8001fb4:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_FLASHEx_Erase+0x98>)
 8001fb8:	7e1b      	ldrb	r3, [r3, #24]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d041      	beq.n	8002042 <HAL_FLASHEx_Erase+0x92>
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_FLASHEx_Erase+0x98>)
 8001fc2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001fc4:	6803      	ldr	r3, [r0, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d022      	beq.n	8002010 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001fca:	4820      	ldr	r0, [pc, #128]	; (800204c <HAL_FLASHEx_Erase+0x9c>)
 8001fcc:	f7ff ff50 	bl	8001e70 <FLASH_WaitForLastOperation>
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d131      	bne.n	8002038 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8001fda:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fdc:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001fde:	68ab      	ldr	r3, [r5, #8]
 8001fe0:	029b      	lsls	r3, r3, #10
 8001fe2:	686a      	ldr	r2, [r5, #4]
 8001fe4:	4694      	mov	ip, r2
 8001fe6:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8001fe8:	429c      	cmp	r4, r3
 8001fea:	d226      	bcs.n	800203a <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8001fec:	0020      	movs	r0, r4
 8001fee:	f7ff ffcd 	bl	8001f8c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ff2:	4816      	ldr	r0, [pc, #88]	; (800204c <HAL_FLASHEx_Erase+0x9c>)
 8001ff4:	f7ff ff3c 	bl	8001e70 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001ff8:	4a15      	ldr	r2, [pc, #84]	; (8002050 <HAL_FLASHEx_Erase+0xa0>)
 8001ffa:	6913      	ldr	r3, [r2, #16]
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	438b      	bics	r3, r1
 8002000:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8002002:	2800      	cmp	r0, #0
 8002004:	d116      	bne.n	8002034 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	469c      	mov	ip, r3
 800200c:	4464      	add	r4, ip
 800200e:	e7e6      	b.n	8001fde <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002010:	480e      	ldr	r0, [pc, #56]	; (800204c <HAL_FLASHEx_Erase+0x9c>)
 8002012:	f7ff ff2d 	bl	8001e70 <FLASH_WaitForLastOperation>
 8002016:	2800      	cmp	r0, #0
 8002018:	d001      	beq.n	800201e <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800201a:	2001      	movs	r0, #1
 800201c:	e00d      	b.n	800203a <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 800201e:	f7ff ffa3 	bl	8001f68 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002022:	480a      	ldr	r0, [pc, #40]	; (800204c <HAL_FLASHEx_Erase+0x9c>)
 8002024:	f7ff ff24 	bl	8001e70 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002028:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_FLASHEx_Erase+0xa0>)
 800202a:	6913      	ldr	r3, [r2, #16]
 800202c:	2104      	movs	r1, #4
 800202e:	438b      	bics	r3, r1
 8002030:	6113      	str	r3, [r2, #16]
 8002032:	e002      	b.n	800203a <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8002034:	6034      	str	r4, [r6, #0]
            break;
 8002036:	e000      	b.n	800203a <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002038:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800203a:	2200      	movs	r2, #0
 800203c:	4b02      	ldr	r3, [pc, #8]	; (8002048 <HAL_FLASHEx_Erase+0x98>)
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8002042:	2002      	movs	r0, #2
 8002044:	e7fc      	b.n	8002040 <HAL_FLASHEx_Erase+0x90>
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	20000070 	.word	0x20000070
 800204c:	0000c350 	.word	0x0000c350
 8002050:	40022000 	.word	0x40022000

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	46c6      	mov	lr, r8
 8002058:	b500      	push	{lr}
 800205a:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 800205c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800205e:	e07e      	b.n	800215e <HAL_GPIO_Init+0x10a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002060:	08df      	lsrs	r7, r3, #3
 8002062:	3708      	adds	r7, #8
 8002064:	00bf      	lsls	r7, r7, #2
 8002066:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002068:	2507      	movs	r5, #7
 800206a:	401d      	ands	r5, r3
 800206c:	00ad      	lsls	r5, r5, #2
 800206e:	240f      	movs	r4, #15
 8002070:	40ac      	lsls	r4, r5
 8002072:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002074:	690c      	ldr	r4, [r1, #16]
 8002076:	40ac      	lsls	r4, r5
 8002078:	0025      	movs	r5, r4
 800207a:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 800207c:	503d      	str	r5, [r7, r0]
 800207e:	e07e      	b.n	800217e <HAL_GPIO_Init+0x12a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002080:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002082:	4664      	mov	r4, ip
 8002084:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002086:	68ce      	ldr	r6, [r1, #12]
 8002088:	40be      	lsls	r6, r7
 800208a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800208c:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208e:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002090:	002c      	movs	r4, r5
 8002092:	4645      	mov	r5, r8
 8002094:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002096:	684d      	ldr	r5, [r1, #4]
 8002098:	092e      	lsrs	r6, r5, #4
 800209a:	2501      	movs	r5, #1
 800209c:	4035      	ands	r5, r6
 800209e:	409d      	lsls	r5, r3
 80020a0:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80020a2:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020a4:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a6:	4665      	mov	r5, ip
 80020a8:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80020aa:	688d      	ldr	r5, [r1, #8]
 80020ac:	40bd      	lsls	r5, r7
 80020ae:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80020b0:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80020b2:	684c      	ldr	r4, [r1, #4]
 80020b4:	00e4      	lsls	r4, r4, #3
 80020b6:	d551      	bpl.n	800215c <HAL_GPIO_Init+0x108>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b8:	4d43      	ldr	r5, [pc, #268]	; (80021c8 <HAL_GPIO_Init+0x174>)
 80020ba:	69ae      	ldr	r6, [r5, #24]
 80020bc:	2401      	movs	r4, #1
 80020be:	4326      	orrs	r6, r4
 80020c0:	61ae      	str	r6, [r5, #24]
 80020c2:	69ad      	ldr	r5, [r5, #24]
 80020c4:	402c      	ands	r4, r5
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80020ca:	089c      	lsrs	r4, r3, #2
 80020cc:	1ca5      	adds	r5, r4, #2
 80020ce:	00ad      	lsls	r5, r5, #2
 80020d0:	4e3e      	ldr	r6, [pc, #248]	; (80021cc <HAL_GPIO_Init+0x178>)
 80020d2:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80020d4:	2503      	movs	r5, #3
 80020d6:	401d      	ands	r5, r3
 80020d8:	00ad      	lsls	r5, r5, #2
 80020da:	270f      	movs	r7, #15
 80020dc:	40af      	lsls	r7, r5
 80020de:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020e0:	2790      	movs	r7, #144	; 0x90
 80020e2:	05ff      	lsls	r7, r7, #23
 80020e4:	42b8      	cmp	r0, r7
 80020e6:	d065      	beq.n	80021b4 <HAL_GPIO_Init+0x160>
 80020e8:	4f39      	ldr	r7, [pc, #228]	; (80021d0 <HAL_GPIO_Init+0x17c>)
 80020ea:	42b8      	cmp	r0, r7
 80020ec:	d064      	beq.n	80021b8 <HAL_GPIO_Init+0x164>
 80020ee:	4f39      	ldr	r7, [pc, #228]	; (80021d4 <HAL_GPIO_Init+0x180>)
 80020f0:	42b8      	cmp	r0, r7
 80020f2:	d063      	beq.n	80021bc <HAL_GPIO_Init+0x168>
 80020f4:	4f38      	ldr	r7, [pc, #224]	; (80021d8 <HAL_GPIO_Init+0x184>)
 80020f6:	42b8      	cmp	r0, r7
 80020f8:	d05a      	beq.n	80021b0 <HAL_GPIO_Init+0x15c>
 80020fa:	2705      	movs	r7, #5
 80020fc:	40af      	lsls	r7, r5
 80020fe:	003d      	movs	r5, r7
 8002100:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8002102:	3402      	adds	r4, #2
 8002104:	00a4      	lsls	r4, r4, #2
 8002106:	4e31      	ldr	r6, [pc, #196]	; (80021cc <HAL_GPIO_Init+0x178>)
 8002108:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210a:	4c34      	ldr	r4, [pc, #208]	; (80021dc <HAL_GPIO_Init+0x188>)
 800210c:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800210e:	43d4      	mvns	r4, r2
 8002110:	0026      	movs	r6, r4
 8002112:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002114:	684f      	ldr	r7, [r1, #4]
 8002116:	03ff      	lsls	r7, r7, #15
 8002118:	d501      	bpl.n	800211e <HAL_GPIO_Init+0xca>
        {
          SET_BIT(temp, iocurrent); 
 800211a:	4315      	orrs	r5, r2
 800211c:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 800211e:	4d2f      	ldr	r5, [pc, #188]	; (80021dc <HAL_GPIO_Init+0x188>)
 8002120:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002122:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002124:	002e      	movs	r6, r5
 8002126:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002128:	684f      	ldr	r7, [r1, #4]
 800212a:	03bf      	lsls	r7, r7, #14
 800212c:	d501      	bpl.n	8002132 <HAL_GPIO_Init+0xde>
        { 
          SET_BIT(temp, iocurrent); 
 800212e:	4315      	orrs	r5, r2
 8002130:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8002132:	4d2a      	ldr	r5, [pc, #168]	; (80021dc <HAL_GPIO_Init+0x188>)
 8002134:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002136:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002138:	002e      	movs	r6, r5
 800213a:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213c:	684f      	ldr	r7, [r1, #4]
 800213e:	02ff      	lsls	r7, r7, #11
 8002140:	d501      	bpl.n	8002146 <HAL_GPIO_Init+0xf2>
        {
          SET_BIT(temp, iocurrent); 
 8002142:	4315      	orrs	r5, r2
 8002144:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8002146:	4d25      	ldr	r5, [pc, #148]	; (80021dc <HAL_GPIO_Init+0x188>)
 8002148:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800214a:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800214c:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800214e:	684e      	ldr	r6, [r1, #4]
 8002150:	02b6      	lsls	r6, r6, #10
 8002152:	d501      	bpl.n	8002158 <HAL_GPIO_Init+0x104>
        {
          SET_BIT(temp, iocurrent); 
 8002154:	432a      	orrs	r2, r5
 8002156:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8002158:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_GPIO_Init+0x188>)
 800215a:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 800215c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800215e:	680a      	ldr	r2, [r1, #0]
 8002160:	0014      	movs	r4, r2
 8002162:	40dc      	lsrs	r4, r3
 8002164:	d02c      	beq.n	80021c0 <HAL_GPIO_Init+0x16c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002166:	2401      	movs	r4, #1
 8002168:	409c      	lsls	r4, r3
 800216a:	46a0      	mov	r8, r4
 800216c:	4022      	ands	r2, r4
    if(iocurrent)
 800216e:	d0f5      	beq.n	800215c <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002170:	684d      	ldr	r5, [r1, #4]
 8002172:	2d02      	cmp	r5, #2
 8002174:	d100      	bne.n	8002178 <HAL_GPIO_Init+0x124>
 8002176:	e773      	b.n	8002060 <HAL_GPIO_Init+0xc>
 8002178:	2d12      	cmp	r5, #18
 800217a:	d100      	bne.n	800217e <HAL_GPIO_Init+0x12a>
 800217c:	e770      	b.n	8002060 <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 800217e:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002180:	005f      	lsls	r7, r3, #1
 8002182:	2503      	movs	r5, #3
 8002184:	002c      	movs	r4, r5
 8002186:	40bc      	lsls	r4, r7
 8002188:	43e4      	mvns	r4, r4
 800218a:	46a4      	mov	ip, r4
 800218c:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218e:	684c      	ldr	r4, [r1, #4]
 8002190:	4025      	ands	r5, r4
 8002192:	40bd      	lsls	r5, r7
 8002194:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8002196:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002198:	684d      	ldr	r5, [r1, #4]
 800219a:	1e6e      	subs	r6, r5, #1
 800219c:	2e01      	cmp	r6, #1
 800219e:	d800      	bhi.n	80021a2 <HAL_GPIO_Init+0x14e>
 80021a0:	e76e      	b.n	8002080 <HAL_GPIO_Init+0x2c>
 80021a2:	2d11      	cmp	r5, #17
 80021a4:	d100      	bne.n	80021a8 <HAL_GPIO_Init+0x154>
 80021a6:	e76b      	b.n	8002080 <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a8:	2d12      	cmp	r5, #18
 80021aa:	d000      	beq.n	80021ae <HAL_GPIO_Init+0x15a>
 80021ac:	e77a      	b.n	80020a4 <HAL_GPIO_Init+0x50>
 80021ae:	e767      	b.n	8002080 <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b0:	2703      	movs	r7, #3
 80021b2:	e7a3      	b.n	80020fc <HAL_GPIO_Init+0xa8>
 80021b4:	2700      	movs	r7, #0
 80021b6:	e7a1      	b.n	80020fc <HAL_GPIO_Init+0xa8>
 80021b8:	2701      	movs	r7, #1
 80021ba:	e79f      	b.n	80020fc <HAL_GPIO_Init+0xa8>
 80021bc:	2702      	movs	r7, #2
 80021be:	e79d      	b.n	80020fc <HAL_GPIO_Init+0xa8>
  } 
}
 80021c0:	b002      	add	sp, #8
 80021c2:	bc04      	pop	{r2}
 80021c4:	4690      	mov	r8, r2
 80021c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010000 	.word	0x40010000
 80021d0:	48000400 	.word	0x48000400
 80021d4:	48000800 	.word	0x48000800
 80021d8:	48000c00 	.word	0x48000c00
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e0:	6903      	ldr	r3, [r0, #16]
 80021e2:	420b      	tst	r3, r1
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e6:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 80021e8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80021ea:	2001      	movs	r0, #1
 80021ec:	e7fc      	b.n	80021e8 <HAL_GPIO_ReadPin+0x8>

080021ee <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021f2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80021f4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f6:	6181      	str	r1, [r0, #24]
 80021f8:	e7fc      	b.n	80021f4 <HAL_GPIO_WritePin+0x6>

080021fa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80021fa:	6943      	ldr	r3, [r0, #20]
 80021fc:	4059      	eors	r1, r3
 80021fe:	6141      	str	r1, [r0, #20]
}
 8002200:	4770      	bx	lr
	...

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	07db      	lsls	r3, r3, #31
 800220e:	d536      	bpl.n	800227e <HAL_RCC_OscConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002210:	4bc1      	ldr	r3, [pc, #772]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	230c      	movs	r3, #12
 8002216:	4013      	ands	r3, r2
 8002218:	2b04      	cmp	r3, #4
 800221a:	d028      	beq.n	800226e <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800221c:	4bbe      	ldr	r3, [pc, #760]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	230c      	movs	r3, #12
 8002222:	4013      	ands	r3, r2
 8002224:	2b08      	cmp	r3, #8
 8002226:	d01e      	beq.n	8002266 <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002228:	6863      	ldr	r3, [r4, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d04b      	beq.n	80022c6 <HAL_RCC_OscConfig+0xc2>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d150      	bne.n	80022d4 <HAL_RCC_OscConfig+0xd0>
 8002232:	4bb9      	ldr	r3, [pc, #740]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	49b9      	ldr	r1, [pc, #740]	; (800251c <HAL_RCC_OscConfig+0x318>)
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	49b8      	ldr	r1, [pc, #736]	; (8002520 <HAL_RCC_OscConfig+0x31c>)
 8002240:	400a      	ands	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	6863      	ldr	r3, [r4, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d05c      	beq.n	8002304 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7ff fa0b 	bl	8001664 <HAL_GetTick>
 800224e:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002250:	4bb1      	ldr	r3, [pc, #708]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	039b      	lsls	r3, r3, #14
 8002256:	d412      	bmi.n	800227e <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff fa04 	bl	8001664 <HAL_GetTick>
 800225c:	1b40      	subs	r0, r0, r5
 800225e:	2864      	cmp	r0, #100	; 0x64
 8002260:	d9f6      	bls.n	8002250 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 8002262:	2003      	movs	r0, #3
 8002264:	e1ea      	b.n	800263c <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002266:	4bac      	ldr	r3, [pc, #688]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	03db      	lsls	r3, r3, #15
 800226c:	d5dc      	bpl.n	8002228 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	4baa      	ldr	r3, [pc, #680]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	039b      	lsls	r3, r3, #14
 8002274:	d503      	bpl.n	800227e <HAL_RCC_OscConfig+0x7a>
 8002276:	6863      	ldr	r3, [r4, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x7a>
 800227c:	e1db      	b.n	8002636 <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	079b      	lsls	r3, r3, #30
 8002282:	d562      	bpl.n	800234a <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002284:	4ba4      	ldr	r3, [pc, #656]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	220c      	movs	r2, #12
 800228a:	421a      	tst	r2, r3
 800228c:	d04c      	beq.n	8002328 <HAL_RCC_OscConfig+0x124>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800228e:	4ba2      	ldr	r3, [pc, #648]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	230c      	movs	r3, #12
 8002294:	4013      	ands	r3, r2
 8002296:	2b08      	cmp	r3, #8
 8002298:	d042      	beq.n	8002320 <HAL_RCC_OscConfig+0x11c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800229a:	68e3      	ldr	r3, [r4, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d076      	beq.n	800238e <HAL_RCC_OscConfig+0x18a>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4a9d      	ldr	r2, [pc, #628]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7ff f9db 	bl	8001664 <HAL_GetTick>
 80022ae:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	4b99      	ldr	r3, [pc, #612]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	079b      	lsls	r3, r3, #30
 80022b6:	d461      	bmi.n	800237c <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b8:	f7ff f9d4 	bl	8001664 <HAL_GetTick>
 80022bc:	1b40      	subs	r0, r0, r5
 80022be:	2802      	cmp	r0, #2
 80022c0:	d9f6      	bls.n	80022b0 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 80022c2:	2003      	movs	r0, #3
 80022c4:	e1ba      	b.n	800263c <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c6:	4a94      	ldr	r2, [pc, #592]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80022c8:	6811      	ldr	r1, [r2, #0]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	025b      	lsls	r3, r3, #9
 80022ce:	430b      	orrs	r3, r1
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e7b7      	b.n	8002244 <HAL_RCC_OscConfig+0x40>
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d009      	beq.n	80022ec <HAL_RCC_OscConfig+0xe8>
 80022d8:	4b8f      	ldr	r3, [pc, #572]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	498f      	ldr	r1, [pc, #572]	; (800251c <HAL_RCC_OscConfig+0x318>)
 80022de:	400a      	ands	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	498e      	ldr	r1, [pc, #568]	; (8002520 <HAL_RCC_OscConfig+0x31c>)
 80022e6:	400a      	ands	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e7ab      	b.n	8002244 <HAL_RCC_OscConfig+0x40>
 80022ec:	4b8a      	ldr	r3, [pc, #552]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	02d2      	lsls	r2, r2, #11
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	0252      	lsls	r2, r2, #9
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e79f      	b.n	8002244 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8002304:	f7ff f9ae 	bl	8001664 <HAL_GetTick>
 8002308:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b83      	ldr	r3, [pc, #524]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	039b      	lsls	r3, r3, #14
 8002310:	d5b5      	bpl.n	800227e <HAL_RCC_OscConfig+0x7a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002312:	f7ff f9a7 	bl	8001664 <HAL_GetTick>
 8002316:	1b40      	subs	r0, r0, r5
 8002318:	2864      	cmp	r0, #100	; 0x64
 800231a:	d9f6      	bls.n	800230a <HAL_RCC_OscConfig+0x106>
            return HAL_TIMEOUT;
 800231c:	2003      	movs	r0, #3
 800231e:	e18d      	b.n	800263c <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002320:	4b7d      	ldr	r3, [pc, #500]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	03db      	lsls	r3, r3, #15
 8002326:	d4b8      	bmi.n	800229a <HAL_RCC_OscConfig+0x96>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002328:	4b7b      	ldr	r3, [pc, #492]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	079b      	lsls	r3, r3, #30
 800232e:	d504      	bpl.n	800233a <HAL_RCC_OscConfig+0x136>
 8002330:	68e3      	ldr	r3, [r4, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x136>
        return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
 8002338:	e180      	b.n	800263c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4977      	ldr	r1, [pc, #476]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 800233c:	680b      	ldr	r3, [r1, #0]
 800233e:	22f8      	movs	r2, #248	; 0xf8
 8002340:	4393      	bics	r3, r2
 8002342:	6922      	ldr	r2, [r4, #16]
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	071b      	lsls	r3, r3, #28
 800234e:	d544      	bpl.n	80023da <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002350:	69e3      	ldr	r3, [r4, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d02e      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1b0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4a70      	ldr	r2, [pc, #448]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002358:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800235a:	2101      	movs	r1, #1
 800235c:	430b      	orrs	r3, r1
 800235e:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002360:	f7ff f980 	bl	8001664 <HAL_GetTick>
 8002364:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4b6c      	ldr	r3, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	079b      	lsls	r3, r3, #30
 800236c:	d435      	bmi.n	80023da <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7ff f979 	bl	8001664 <HAL_GetTick>
 8002372:	1b40      	subs	r0, r0, r5
 8002374:	2802      	cmp	r0, #2
 8002376:	d9f6      	bls.n	8002366 <HAL_RCC_OscConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002378:	2003      	movs	r0, #3
 800237a:	e15f      	b.n	800263c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4966      	ldr	r1, [pc, #408]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 800237e:	680b      	ldr	r3, [r1, #0]
 8002380:	22f8      	movs	r2, #248	; 0xf8
 8002382:	4393      	bics	r3, r2
 8002384:	6922      	ldr	r2, [r4, #16]
 8002386:	00d2      	lsls	r2, r2, #3
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e7dd      	b.n	800234a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 800238e:	4a62      	ldr	r2, [pc, #392]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002390:	6813      	ldr	r3, [r2, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	438b      	bics	r3, r1
 8002396:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002398:	f7ff f964 	bl	8001664 <HAL_GetTick>
 800239c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	4b5e      	ldr	r3, [pc, #376]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	079b      	lsls	r3, r3, #30
 80023a4:	d5d1      	bpl.n	800234a <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a6:	f7ff f95d 	bl	8001664 <HAL_GetTick>
 80023aa:	1b40      	subs	r0, r0, r5
 80023ac:	2802      	cmp	r0, #2
 80023ae:	d9f6      	bls.n	800239e <HAL_RCC_OscConfig+0x19a>
            return HAL_TIMEOUT;
 80023b0:	2003      	movs	r0, #3
 80023b2:	e143      	b.n	800263c <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80023b6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80023b8:	2101      	movs	r1, #1
 80023ba:	438b      	bics	r3, r1
 80023bc:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff f951 	bl	8001664 <HAL_GetTick>
 80023c2:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	079b      	lsls	r3, r3, #30
 80023ca:	d506      	bpl.n	80023da <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023cc:	f7ff f94a 	bl	8001664 <HAL_GetTick>
 80023d0:	1b40      	subs	r0, r0, r5
 80023d2:	2802      	cmp	r0, #2
 80023d4:	d9f6      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1c0>
        {
          return HAL_TIMEOUT;
 80023d6:	2003      	movs	r0, #3
 80023d8:	e130      	b.n	800263c <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	075b      	lsls	r3, r3, #29
 80023de:	d575      	bpl.n	80024cc <HAL_RCC_OscConfig+0x2c8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e0:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	d42e      	bmi.n	8002446 <HAL_RCC_OscConfig+0x242>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	4a4b      	ldr	r2, [pc, #300]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80023ea:	69d1      	ldr	r1, [r2, #28]
 80023ec:	2080      	movs	r0, #128	; 0x80
 80023ee:	0540      	lsls	r0, r0, #21
 80023f0:	4301      	orrs	r1, r0
 80023f2:	61d1      	str	r1, [r2, #28]
 80023f4:	69d3      	ldr	r3, [r2, #28]
 80023f6:	4003      	ands	r3, r0
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023fc:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b49      	ldr	r3, [pc, #292]	; (8002524 <HAL_RCC_OscConfig+0x320>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	05db      	lsls	r3, r3, #23
 8002404:	d521      	bpl.n	800244a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002406:	68a3      	ldr	r3, [r4, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d032      	beq.n	8002472 <HAL_RCC_OscConfig+0x26e>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d136      	bne.n	800247e <HAL_RCC_OscConfig+0x27a>
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	2101      	movs	r1, #1
 8002416:	438a      	bics	r2, r1
 8002418:	621a      	str	r2, [r3, #32]
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	3103      	adds	r1, #3
 800241e:	438a      	bics	r2, r1
 8002420:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002422:	68a3      	ldr	r3, [r4, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d040      	beq.n	80024aa <HAL_RCC_OscConfig+0x2a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7ff f91c 	bl	8001664 <HAL_GetTick>
 800242c:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242e:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	079b      	lsls	r3, r3, #30
 8002434:	d448      	bmi.n	80024c8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7ff f915 	bl	8001664 <HAL_GetTick>
 800243a:	1b80      	subs	r0, r0, r6
 800243c:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <HAL_RCC_OscConfig+0x324>)
 800243e:	4298      	cmp	r0, r3
 8002440:	d9f5      	bls.n	800242e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002442:	2003      	movs	r0, #3
 8002444:	e0fa      	b.n	800263c <HAL_RCC_OscConfig+0x438>
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2500      	movs	r5, #0
 8002448:	e7d9      	b.n	80023fe <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244a:	4a36      	ldr	r2, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x320>)
 800244c:	6811      	ldr	r1, [r2, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	430b      	orrs	r3, r1
 8002454:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002456:	f7ff f905 	bl	8001664 <HAL_GetTick>
 800245a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_OscConfig+0x320>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	05db      	lsls	r3, r3, #23
 8002462:	d4d0      	bmi.n	8002406 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002464:	f7ff f8fe 	bl	8001664 <HAL_GetTick>
 8002468:	1b80      	subs	r0, r0, r6
 800246a:	2864      	cmp	r0, #100	; 0x64
 800246c:	d9f6      	bls.n	800245c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 800246e:	2003      	movs	r0, #3
 8002470:	e0e4      	b.n	800263c <HAL_RCC_OscConfig+0x438>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002472:	4a29      	ldr	r2, [pc, #164]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002474:	6a13      	ldr	r3, [r2, #32]
 8002476:	2101      	movs	r1, #1
 8002478:	430b      	orrs	r3, r1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e7d1      	b.n	8002422 <HAL_RCC_OscConfig+0x21e>
 800247e:	2b05      	cmp	r3, #5
 8002480:	d009      	beq.n	8002496 <HAL_RCC_OscConfig+0x292>
 8002482:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	2101      	movs	r1, #1
 8002488:	438a      	bics	r2, r1
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	3103      	adds	r1, #3
 8002490:	438a      	bics	r2, r1
 8002492:	621a      	str	r2, [r3, #32]
 8002494:	e7c5      	b.n	8002422 <HAL_RCC_OscConfig+0x21e>
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	2104      	movs	r1, #4
 800249c:	430a      	orrs	r2, r1
 800249e:	621a      	str	r2, [r3, #32]
 80024a0:	6a1a      	ldr	r2, [r3, #32]
 80024a2:	3903      	subs	r1, #3
 80024a4:	430a      	orrs	r2, r1
 80024a6:	621a      	str	r2, [r3, #32]
 80024a8:	e7bb      	b.n	8002422 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7ff f8db 	bl	8001664 <HAL_GetTick>
 80024ae:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	079b      	lsls	r3, r3, #30
 80024b6:	d507      	bpl.n	80024c8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7ff f8d4 	bl	8001664 <HAL_GetTick>
 80024bc:	1b80      	subs	r0, r0, r6
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <HAL_RCC_OscConfig+0x324>)
 80024c0:	4298      	cmp	r0, r3
 80024c2:	d9f5      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80024c4:	2003      	movs	r0, #3
 80024c6:	e0b9      	b.n	800263c <HAL_RCC_OscConfig+0x438>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024c8:	2d01      	cmp	r5, #1
 80024ca:	d01e      	beq.n	800250a <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	06db      	lsls	r3, r3, #27
 80024d0:	d55a      	bpl.n	8002588 <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024d2:	6963      	ldr	r3, [r4, #20]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d02b      	beq.n	8002530 <HAL_RCC_OscConfig+0x32c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024d8:	3305      	adds	r3, #5
 80024da:	d049      	beq.n	8002570 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80024de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e0:	2104      	movs	r1, #4
 80024e2:	430a      	orrs	r2, r1
 80024e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e8:	3903      	subs	r1, #3
 80024ea:	438a      	bics	r2, r1
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7ff f8b9 	bl	8001664 <HAL_GetTick>
 80024f2:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	079b      	lsls	r3, r3, #30
 80024fa:	d545      	bpl.n	8002588 <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024fc:	f7ff f8b2 	bl	8001664 <HAL_GetTick>
 8002500:	1b40      	subs	r0, r0, r5
 8002502:	2802      	cmp	r0, #2
 8002504:	d9f6      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002506:	2003      	movs	r0, #3
 8002508:	e098      	b.n	800263c <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4a03      	ldr	r2, [pc, #12]	; (8002518 <HAL_RCC_OscConfig+0x314>)
 800250c:	69d3      	ldr	r3, [r2, #28]
 800250e:	4907      	ldr	r1, [pc, #28]	; (800252c <HAL_RCC_OscConfig+0x328>)
 8002510:	400b      	ands	r3, r1
 8002512:	61d3      	str	r3, [r2, #28]
 8002514:	e7da      	b.n	80024cc <HAL_RCC_OscConfig+0x2c8>
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	40021000 	.word	0x40021000
 800251c:	fffeffff 	.word	0xfffeffff
 8002520:	fffbffff 	.word	0xfffbffff
 8002524:	40007000 	.word	0x40007000
 8002528:	00001388 	.word	0x00001388
 800252c:	efffffff 	.word	0xefffffff
      __HAL_RCC_HSI14ADC_DISABLE();
 8002530:	4b44      	ldr	r3, [pc, #272]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 8002532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002534:	2104      	movs	r1, #4
 8002536:	430a      	orrs	r2, r1
 8002538:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800253a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253c:	3903      	subs	r1, #3
 800253e:	430a      	orrs	r2, r1
 8002540:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002542:	f7ff f88f 	bl	8001664 <HAL_GetTick>
 8002546:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	079b      	lsls	r3, r3, #30
 800254e:	d406      	bmi.n	800255e <HAL_RCC_OscConfig+0x35a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002550:	f7ff f888 	bl	8001664 <HAL_GetTick>
 8002554:	1b40      	subs	r0, r0, r5
 8002556:	2802      	cmp	r0, #2
 8002558:	d9f6      	bls.n	8002548 <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
 800255a:	2003      	movs	r0, #3
 800255c:	e06e      	b.n	800263c <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800255e:	4939      	ldr	r1, [pc, #228]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 8002560:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002562:	22f8      	movs	r2, #248	; 0xf8
 8002564:	4393      	bics	r3, r2
 8002566:	69a2      	ldr	r2, [r4, #24]
 8002568:	00d2      	lsls	r2, r2, #3
 800256a:	4313      	orrs	r3, r2
 800256c:	634b      	str	r3, [r1, #52]	; 0x34
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002570:	4a34      	ldr	r2, [pc, #208]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 8002572:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002574:	2104      	movs	r1, #4
 8002576:	438b      	bics	r3, r1
 8002578:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800257a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800257c:	31f4      	adds	r1, #244	; 0xf4
 800257e:	438b      	bics	r3, r1
 8002580:	69a1      	ldr	r1, [r4, #24]
 8002582:	00c9      	lsls	r1, r1, #3
 8002584:	430b      	orrs	r3, r1
 8002586:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002588:	6a23      	ldr	r3, [r4, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d055      	beq.n	800263a <HAL_RCC_OscConfig+0x436>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258e:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 8002590:	6851      	ldr	r1, [r2, #4]
 8002592:	220c      	movs	r2, #12
 8002594:	400a      	ands	r2, r1
 8002596:	2a08      	cmp	r2, #8
 8002598:	d052      	beq.n	8002640 <HAL_RCC_OscConfig+0x43c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	2b02      	cmp	r3, #2
 800259c:	d012      	beq.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 80025a0:	6813      	ldr	r3, [r2, #0]
 80025a2:	4929      	ldr	r1, [pc, #164]	; (8002648 <HAL_RCC_OscConfig+0x444>)
 80025a4:	400b      	ands	r3, r1
 80025a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff f85c 	bl	8001664 <HAL_GetTick>
 80025ac:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	019b      	lsls	r3, r3, #6
 80025b4:	d53d      	bpl.n	8002632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff f855 	bl	8001664 <HAL_GetTick>
 80025ba:	1b00      	subs	r0, r0, r4
 80025bc:	2802      	cmp	r0, #2
 80025be:	d9f6      	bls.n	80025ae <HAL_RCC_OscConfig+0x3aa>
          {
            return HAL_TIMEOUT;
 80025c0:	2003      	movs	r0, #3
 80025c2:	e03b      	b.n	800263c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	491f      	ldr	r1, [pc, #124]	; (8002648 <HAL_RCC_OscConfig+0x444>)
 80025ca:	400b      	ands	r3, r1
 80025cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025ce:	f7ff f849 	bl	8001664 <HAL_GetTick>
 80025d2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	d506      	bpl.n	80025ea <HAL_RCC_OscConfig+0x3e6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff f842 	bl	8001664 <HAL_GetTick>
 80025e0:	1b40      	subs	r0, r0, r5
 80025e2:	2802      	cmp	r0, #2
 80025e4:	d9f6      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3d0>
            return HAL_TIMEOUT;
 80025e6:	2003      	movs	r0, #3
 80025e8:	e028      	b.n	800263c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 80025ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ee:	210f      	movs	r1, #15
 80025f0:	438a      	bics	r2, r1
 80025f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80025f4:	430a      	orrs	r2, r1
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4914      	ldr	r1, [pc, #80]	; (800264c <HAL_RCC_OscConfig+0x448>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002600:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002602:	4301      	orrs	r1, r0
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	0452      	lsls	r2, r2, #17
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002612:	f7ff f827 	bl	8001664 <HAL_GetTick>
 8002616:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RCC_OscConfig+0x440>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	019b      	lsls	r3, r3, #6
 800261e:	d406      	bmi.n	800262e <HAL_RCC_OscConfig+0x42a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff f820 	bl	8001664 <HAL_GetTick>
 8002624:	1b00      	subs	r0, r0, r4
 8002626:	2802      	cmp	r0, #2
 8002628:	d9f6      	bls.n	8002618 <HAL_RCC_OscConfig+0x414>
            return HAL_TIMEOUT;
 800262a:	2003      	movs	r0, #3
 800262c:	e006      	b.n	800263c <HAL_RCC_OscConfig+0x438>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800262e:	2000      	movs	r0, #0
 8002630:	e004      	b.n	800263c <HAL_RCC_OscConfig+0x438>
 8002632:	2000      	movs	r0, #0
 8002634:	e002      	b.n	800263c <HAL_RCC_OscConfig+0x438>
        return HAL_ERROR;
 8002636:	2001      	movs	r0, #1
 8002638:	e000      	b.n	800263c <HAL_RCC_OscConfig+0x438>
  return HAL_OK;
 800263a:	2000      	movs	r0, #0
}
 800263c:	b002      	add	sp, #8
 800263e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
 8002642:	e7fb      	b.n	800263c <HAL_RCC_OscConfig+0x438>
 8002644:	40021000 	.word	0x40021000
 8002648:	feffffff 	.word	0xfeffffff
 800264c:	ffc2ffff 	.word	0xffc2ffff

08002650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	b530      	push	{r4, r5, lr}
 8002652:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002654:	aa04      	add	r2, sp, #16
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_RCC_GetSysClockFreq+0x5c>)
 8002658:	0018      	movs	r0, r3
 800265a:	c832      	ldmia	r0!, {r1, r4, r5}
 800265c:	c232      	stmia	r2!, {r1, r4, r5}
 800265e:	0011      	movs	r1, r2
 8002660:	6802      	ldr	r2, [r0, #0]
 8002662:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002664:	466a      	mov	r2, sp
 8002666:	3310      	adds	r3, #16
 8002668:	cb13      	ldmia	r3!, {r0, r1, r4}
 800266a:	c213      	stmia	r2!, {r0, r1, r4}
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x60>)
 8002672:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002674:	230c      	movs	r3, #12
 8002676:	4013      	ands	r3, r2
 8002678:	2b08      	cmp	r3, #8
 800267a:	d113      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800267c:	0c91      	lsrs	r1, r2, #18
 800267e:	3307      	adds	r3, #7
 8002680:	4019      	ands	r1, r3
 8002682:	a804      	add	r0, sp, #16
 8002684:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002686:	490a      	ldr	r1, [pc, #40]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x60>)
 8002688:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800268a:	400b      	ands	r3, r1
 800268c:	4669      	mov	r1, sp
 800268e:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002690:	03d3      	lsls	r3, r2, #15
 8002692:	d402      	bmi.n	800269a <HAL_RCC_GetSysClockFreq+0x4a>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8002694:	4807      	ldr	r0, [pc, #28]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x64>)
 8002696:	4360      	muls	r0, r4
 8002698:	e005      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800269a:	4807      	ldr	r0, [pc, #28]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x68>)
 800269c:	f7fd fd34 	bl	8000108 <__udivsi3>
 80026a0:	4360      	muls	r0, r4
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80026a4:	4804      	ldr	r0, [pc, #16]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026a6:	b009      	add	sp, #36	; 0x24
 80026a8:	bd30      	pop	{r4, r5, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	08003d04 	.word	0x08003d04
 80026b0:	40021000 	.word	0x40021000
 80026b4:	003d0900 	.word	0x003d0900
 80026b8:	007a1200 	.word	0x007a1200

080026bc <HAL_RCC_ClockConfig>:
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	0005      	movs	r5, r0
 80026c0:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80026c2:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_RCC_ClockConfig+0x13c>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2301      	movs	r3, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	428b      	cmp	r3, r1
 80026cc:	d20b      	bcs.n	80026e6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	494a      	ldr	r1, [pc, #296]	; (80027f8 <HAL_RCC_ClockConfig+0x13c>)
 80026d0:	680b      	ldr	r3, [r1, #0]
 80026d2:	2201      	movs	r2, #1
 80026d4:	4393      	bics	r3, r2
 80026d6:	4323      	orrs	r3, r4
 80026d8:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026da:	680b      	ldr	r3, [r1, #0]
 80026dc:	401a      	ands	r2, r3
 80026de:	4294      	cmp	r4, r2
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80026e2:	2001      	movs	r0, #1
 80026e4:	e085      	b.n	80027f2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e6:	682b      	ldr	r3, [r5, #0]
 80026e8:	079b      	lsls	r3, r3, #30
 80026ea:	d506      	bpl.n	80026fa <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4a43      	ldr	r2, [pc, #268]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 80026ee:	6853      	ldr	r3, [r2, #4]
 80026f0:	21f0      	movs	r1, #240	; 0xf0
 80026f2:	438b      	bics	r3, r1
 80026f4:	68a9      	ldr	r1, [r5, #8]
 80026f6:	430b      	orrs	r3, r1
 80026f8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	07db      	lsls	r3, r3, #31
 80026fe:	d54c      	bpl.n	800279a <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002700:	686b      	ldr	r3, [r5, #4]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d021      	beq.n	800274a <HAL_RCC_ClockConfig+0x8e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002706:	2b02      	cmp	r3, #2
 8002708:	d025      	beq.n	8002756 <HAL_RCC_ClockConfig+0x9a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270a:	4a3c      	ldr	r2, [pc, #240]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	0792      	lsls	r2, r2, #30
 8002710:	d400      	bmi.n	8002714 <HAL_RCC_ClockConfig+0x58>
 8002712:	e06f      	b.n	80027f4 <HAL_RCC_ClockConfig+0x138>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002714:	4939      	ldr	r1, [pc, #228]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 8002716:	684a      	ldr	r2, [r1, #4]
 8002718:	2003      	movs	r0, #3
 800271a:	4382      	bics	r2, r0
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002720:	f7fe ffa0 	bl	8001664 <HAL_GetTick>
 8002724:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	686b      	ldr	r3, [r5, #4]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d01a      	beq.n	8002762 <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272c:	2b02      	cmp	r3, #2
 800272e:	d026      	beq.n	800277e <HAL_RCC_ClockConfig+0xc2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	220c      	movs	r2, #12
 8002736:	421a      	tst	r2, r3
 8002738:	d02f      	beq.n	800279a <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273a:	f7fe ff93 	bl	8001664 <HAL_GetTick>
 800273e:	1b80      	subs	r0, r0, r6
 8002740:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <HAL_RCC_ClockConfig+0x144>)
 8002742:	4298      	cmp	r0, r3
 8002744:	d9f4      	bls.n	8002730 <HAL_RCC_ClockConfig+0x74>
          return HAL_TIMEOUT;
 8002746:	2003      	movs	r0, #3
 8002748:	e053      	b.n	80027f2 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	0392      	lsls	r2, r2, #14
 8002750:	d4e0      	bmi.n	8002714 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 8002752:	2001      	movs	r0, #1
 8002754:	e04d      	b.n	80027f2 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002756:	4a29      	ldr	r2, [pc, #164]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	0192      	lsls	r2, r2, #6
 800275c:	d4da      	bmi.n	8002714 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 800275e:	2001      	movs	r0, #1
 8002760:	e047      	b.n	80027f2 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002762:	4b26      	ldr	r3, [pc, #152]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	230c      	movs	r3, #12
 8002768:	4013      	ands	r3, r2
 800276a:	2b04      	cmp	r3, #4
 800276c:	d015      	beq.n	800279a <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276e:	f7fe ff79 	bl	8001664 <HAL_GetTick>
 8002772:	1b80      	subs	r0, r0, r6
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_RCC_ClockConfig+0x144>)
 8002776:	4298      	cmp	r0, r3
 8002778:	d9f3      	bls.n	8002762 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 800277a:	2003      	movs	r0, #3
 800277c:	e039      	b.n	80027f2 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	230c      	movs	r3, #12
 8002784:	4013      	ands	r3, r2
 8002786:	2b08      	cmp	r3, #8
 8002788:	d007      	beq.n	800279a <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278a:	f7fe ff6b 	bl	8001664 <HAL_GetTick>
 800278e:	1b80      	subs	r0, r0, r6
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_RCC_ClockConfig+0x144>)
 8002792:	4298      	cmp	r0, r3
 8002794:	d9f3      	bls.n	800277e <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 8002796:	2003      	movs	r0, #3
 8002798:	e02b      	b.n	80027f2 <HAL_RCC_ClockConfig+0x136>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_RCC_ClockConfig+0x13c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2301      	movs	r3, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	429c      	cmp	r4, r3
 80027a4:	d20b      	bcs.n	80027be <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4914      	ldr	r1, [pc, #80]	; (80027f8 <HAL_RCC_ClockConfig+0x13c>)
 80027a8:	680b      	ldr	r3, [r1, #0]
 80027aa:	2201      	movs	r2, #1
 80027ac:	4393      	bics	r3, r2
 80027ae:	4323      	orrs	r3, r4
 80027b0:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027b2:	680b      	ldr	r3, [r1, #0]
 80027b4:	401a      	ands	r2, r3
 80027b6:	4294      	cmp	r4, r2
 80027b8:	d001      	beq.n	80027be <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
 80027bc:	e019      	b.n	80027f2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	075b      	lsls	r3, r3, #29
 80027c2:	d506      	bpl.n	80027d2 <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 80027c6:	6853      	ldr	r3, [r2, #4]
 80027c8:	490e      	ldr	r1, [pc, #56]	; (8002804 <HAL_RCC_ClockConfig+0x148>)
 80027ca:	400b      	ands	r3, r1
 80027cc:	68e9      	ldr	r1, [r5, #12]
 80027ce:	430b      	orrs	r3, r1
 80027d0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027d2:	f7ff ff3d 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x140>)
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	0912      	lsrs	r2, r2, #4
 80027dc:	230f      	movs	r3, #15
 80027de:	4013      	ands	r3, r2
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x14c>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	40d8      	lsrs	r0, r3
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x150>)
 80027e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe ff10 	bl	8001610 <HAL_InitTick>
  return HAL_OK;
 80027f0:	2000      	movs	r0, #0
}
 80027f2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80027f4:	2001      	movs	r0, #1
 80027f6:	e7fc      	b.n	80027f2 <HAL_RCC_ClockConfig+0x136>
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40021000 	.word	0x40021000
 8002800:	00001388 	.word	0x00001388
 8002804:	fffff8ff 	.word	0xfffff8ff
 8002808:	08003f20 	.word	0x08003f20
 800280c:	20000044 	.word	0x20000044

08002810 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002810:	4b01      	ldr	r3, [pc, #4]	; (8002818 <HAL_RCC_GetHCLKFreq+0x8>)
 8002812:	6818      	ldr	r0, [r3, #0]
}
 8002814:	4770      	bx	lr
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	20000044 	.word	0x20000044

0800281c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002822:	6803      	ldr	r3, [r0, #0]
 8002824:	03db      	lsls	r3, r3, #15
 8002826:	d535      	bpl.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002828:	4b3c      	ldr	r3, [pc, #240]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	d448      	bmi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4a3a      	ldr	r2, [pc, #232]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002832:	69d1      	ldr	r1, [r2, #28]
 8002834:	2080      	movs	r0, #128	; 0x80
 8002836:	0540      	lsls	r0, r0, #21
 8002838:	4301      	orrs	r1, r0
 800283a:	61d1      	str	r1, [r2, #28]
 800283c:	69d3      	ldr	r3, [r2, #28]
 800283e:	4003      	ands	r3, r0
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002844:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	05db      	lsls	r3, r3, #23
 800284c:	d53b      	bpl.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800284e:	4b33      	ldr	r3, [pc, #204]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	22c0      	movs	r2, #192	; 0xc0
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002858:	d013      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800285a:	6861      	ldr	r1, [r4, #4]
 800285c:	400a      	ands	r2, r1
 800285e:	4293      	cmp	r3, r2
 8002860:	d00f      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002864:	6a18      	ldr	r0, [r3, #32]
 8002866:	4a2f      	ldr	r2, [pc, #188]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002868:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800286a:	6a1e      	ldr	r6, [r3, #32]
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0249      	lsls	r1, r1, #9
 8002870:	4331      	orrs	r1, r6
 8002872:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002874:	6a19      	ldr	r1, [r3, #32]
 8002876:	4e2c      	ldr	r6, [pc, #176]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002878:	4031      	ands	r1, r6
 800287a:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800287c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800287e:	07c3      	lsls	r3, r0, #31
 8002880:	d435      	bmi.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002882:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002884:	6a13      	ldr	r3, [r2, #32]
 8002886:	4927      	ldr	r1, [pc, #156]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002888:	400b      	ands	r3, r1
 800288a:	6861      	ldr	r1, [r4, #4]
 800288c:	430b      	orrs	r3, r1
 800288e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002890:	2d01      	cmp	r5, #1
 8002892:	d03b      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	07db      	lsls	r3, r3, #31
 8002898:	d506      	bpl.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800289c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800289e:	2103      	movs	r1, #3
 80028a0:	438b      	bics	r3, r1
 80028a2:	68a1      	ldr	r1, [r4, #8]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	069b      	lsls	r3, r3, #26
 80028ac:	d533      	bpl.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ae:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80028b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028b2:	2110      	movs	r1, #16
 80028b4:	438b      	bics	r3, r1
 80028b6:	68e1      	ldr	r1, [r4, #12]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80028bc:	2000      	movs	r0, #0
}
 80028be:	b002      	add	sp, #8
 80028c0:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2500      	movs	r5, #0
 80028c4:	e7bf      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c6:	4a16      	ldr	r2, [pc, #88]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80028c8:	6811      	ldr	r1, [r2, #0]
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	430b      	orrs	r3, r1
 80028d0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80028d2:	f7fe fec7 	bl	8001664 <HAL_GetTick>
 80028d6:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	d4b6      	bmi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe fec0 	bl	8001664 <HAL_GetTick>
 80028e4:	1b80      	subs	r0, r0, r6
 80028e6:	2864      	cmp	r0, #100	; 0x64
 80028e8:	d9f6      	bls.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 80028ea:	2003      	movs	r0, #3
 80028ec:	e7e7      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 80028ee:	f7fe feb9 	bl	8001664 <HAL_GetTick>
 80028f2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	079b      	lsls	r3, r3, #30
 80028fa:	d4c2      	bmi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe feb2 	bl	8001664 <HAL_GetTick>
 8002900:	1b80      	subs	r0, r0, r6
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002904:	4298      	cmp	r0, r3
 8002906:	d9f5      	bls.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8002908:	2003      	movs	r0, #3
 800290a:	e7d8      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	69d3      	ldr	r3, [r2, #28]
 800290e:	4908      	ldr	r1, [pc, #32]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002910:	400b      	ands	r3, r1
 8002912:	61d3      	str	r3, [r2, #28]
 8002914:	e7be      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8002916:	2000      	movs	r0, #0
 8002918:	e7d1      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	40021000 	.word	0x40021000
 8002920:	40007000 	.word	0x40007000
 8002924:	fffffcff 	.word	0xfffffcff
 8002928:	fffeffff 	.word	0xfffeffff
 800292c:	00001388 	.word	0x00001388
 8002930:	efffffff 	.word	0xefffffff

08002934 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002938:	6802      	ldr	r2, [r0, #0]
 800293a:	68d3      	ldr	r3, [r2, #12]
 800293c:	21a0      	movs	r1, #160	; 0xa0
 800293e:	438b      	bics	r3, r1
 8002940:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002942:	f7fe fe8f 	bl	8001664 <HAL_GetTick>
 8002946:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	069b      	lsls	r3, r3, #26
 800294e:	d408      	bmi.n	8002962 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002950:	f7fe fe88 	bl	8001664 <HAL_GetTick>
 8002954:	1b40      	subs	r0, r0, r5
 8002956:	23fa      	movs	r3, #250	; 0xfa
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4298      	cmp	r0, r3
 800295c:	d9f4      	bls.n	8002948 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 800295e:	2003      	movs	r0, #3
 8002960:	e000      	b.n	8002964 <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8002962:	2000      	movs	r0, #0
}
 8002964:	bd70      	pop	{r4, r5, r6, pc}

08002966 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002966:	b570      	push	{r4, r5, r6, lr}
 8002968:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800296a:	6803      	ldr	r3, [r0, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	0652      	lsls	r2, r2, #25
 8002970:	d501      	bpl.n	8002976 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002972:	2000      	movs	r0, #0
}
 8002974:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002976:	2201      	movs	r2, #1
 8002978:	4252      	negs	r2, r2
 800297a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800297c:	f7fe fe72 	bl	8001664 <HAL_GetTick>
 8002980:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	065b      	lsls	r3, r3, #25
 8002988:	d408      	bmi.n	800299c <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800298a:	f7fe fe6b 	bl	8001664 <HAL_GetTick>
 800298e:	1b40      	subs	r0, r0, r5
 8002990:	23fa      	movs	r3, #250	; 0xfa
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4298      	cmp	r0, r3
 8002996:	d9f4      	bls.n	8002982 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002998:	2003      	movs	r0, #3
 800299a:	e7eb      	b.n	8002974 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 800299c:	2000      	movs	r0, #0
 800299e:	e7e9      	b.n	8002974 <RTC_EnterInitMode+0xe>

080029a0 <HAL_RTC_Init>:
{
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80029a4:	d057      	beq.n	8002a56 <HAL_RTC_Init+0xb6>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80029a6:	7f43      	ldrb	r3, [r0, #29]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d03d      	beq.n	8002a28 <HAL_RTC_Init+0x88>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80029ac:	2302      	movs	r3, #2
 80029ae:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	22ca      	movs	r2, #202	; 0xca
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	3a77      	subs	r2, #119	; 0x77
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029bc:	0020      	movs	r0, r4
 80029be:	f7ff ffd2 	bl	8002966 <RTC_EnterInitMode>
 80029c2:	1e05      	subs	r5, r0, #0
 80029c4:	d134      	bne.n	8002a30 <HAL_RTC_Init+0x90>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029c6:	6822      	ldr	r2, [r4, #0]
 80029c8:	6893      	ldr	r3, [r2, #8]
 80029ca:	4924      	ldr	r1, [pc, #144]	; (8002a5c <HAL_RTC_Init+0xbc>)
 80029cc:	400b      	ands	r3, r1
 80029ce:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029d0:	6821      	ldr	r1, [r4, #0]
 80029d2:	688a      	ldr	r2, [r1, #8]
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	6920      	ldr	r0, [r4, #16]
 80029d8:	4303      	orrs	r3, r0
 80029da:	6960      	ldr	r0, [r4, #20]
 80029dc:	4303      	orrs	r3, r0
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	68e2      	ldr	r2, [r4, #12]
 80029e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80029e8:	6821      	ldr	r1, [r4, #0]
 80029ea:	690b      	ldr	r3, [r1, #16]
 80029ec:	68a2      	ldr	r2, [r4, #8]
 80029ee:	0412      	lsls	r2, r2, #16
 80029f0:	4313      	orrs	r3, r2
 80029f2:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80029f4:	6822      	ldr	r2, [r4, #0]
 80029f6:	68d3      	ldr	r3, [r2, #12]
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	438b      	bics	r3, r1
 80029fc:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	069b      	lsls	r3, r3, #26
 8002a04:	d51b      	bpl.n	8002a3e <HAL_RTC_Init+0x9e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002a06:	6822      	ldr	r2, [r4, #0]
 8002a08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a0a:	4915      	ldr	r1, [pc, #84]	; (8002a60 <HAL_RTC_Init+0xc0>)
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a14:	69a1      	ldr	r1, [r4, #24]
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002a20:	2301      	movs	r3, #1
 8002a22:	7763      	strb	r3, [r4, #29]
}
 8002a24:	0028      	movs	r0, r5
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002a28:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002a2a:	f001 f897 	bl	8003b5c <HAL_RTC_MspInit>
 8002a2e:	e7bd      	b.n	80029ac <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	22ff      	movs	r2, #255	; 0xff
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a36:	2304      	movs	r3, #4
 8002a38:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002a3a:	2501      	movs	r5, #1
 8002a3c:	e7f2      	b.n	8002a24 <HAL_RTC_Init+0x84>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a3e:	0020      	movs	r0, r4
 8002a40:	f7ff ff78 	bl	8002934 <HAL_RTC_WaitForSynchro>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d0de      	beq.n	8002a06 <HAL_RTC_Init+0x66>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	22ff      	movs	r2, #255	; 0xff
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002a52:	2501      	movs	r5, #1
 8002a54:	e7e6      	b.n	8002a24 <HAL_RTC_Init+0x84>
     return HAL_ERROR;
 8002a56:	2501      	movs	r5, #1
 8002a58:	e7e4      	b.n	8002a24 <HAL_RTC_Init+0x84>
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	ff8fffbf 	.word	0xff8fffbf
 8002a60:	fffbffff 	.word	0xfffbffff

08002a64 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002a64:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002a66:	e002      	b.n	8002a6e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002a68:	3301      	adds	r3, #1
    Value -= 10U;
 8002a6a:	380a      	subs	r0, #10
 8002a6c:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002a6e:	2809      	cmp	r0, #9
 8002a70:	d8fa      	bhi.n	8002a68 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4318      	orrs	r0, r3
}
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_RTC_SetTime>:
{
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	0004      	movs	r4, r0
 8002a80:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8002a82:	7f03      	ldrb	r3, [r0, #28]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d06f      	beq.n	8002b68 <HAL_RTC_SetTime+0xec>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d141      	bne.n	8002b18 <HAL_RTC_SetTime+0x9c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a94:	6803      	ldr	r3, [r0, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	065b      	lsls	r3, r3, #25
 8002a9a:	d401      	bmi.n	8002aa0 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002aa0:	7830      	ldrb	r0, [r6, #0]
 8002aa2:	f7ff ffdf 	bl	8002a64 <RTC_ByteToBcd2>
 8002aa6:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002aa8:	7870      	ldrb	r0, [r6, #1]
 8002aaa:	f7ff ffdb 	bl	8002a64 <RTC_ByteToBcd2>
 8002aae:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ab0:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ab2:	78b0      	ldrb	r0, [r6, #2]
 8002ab4:	f7ff ffd6 	bl	8002a64 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ab8:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002aba:	78f0      	ldrb	r0, [r6, #3]
 8002abc:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002abe:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	22ca      	movs	r2, #202	; 0xca
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	3a77      	subs	r2, #119	; 0x77
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002acc:	0020      	movs	r0, r4
 8002ace:	f7ff ff4a 	bl	8002966 <RTC_EnterInitMode>
 8002ad2:	1e07      	subs	r7, r0, #0
 8002ad4:	d131      	bne.n	8002b3a <HAL_RTC_SetTime+0xbe>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	4825      	ldr	r0, [pc, #148]	; (8002b70 <HAL_RTC_SetTime+0xf4>)
 8002ada:	4005      	ands	r5, r0
 8002adc:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002ade:	6822      	ldr	r2, [r4, #0]
 8002ae0:	6893      	ldr	r3, [r2, #8]
 8002ae2:	4924      	ldr	r1, [pc, #144]	; (8002b74 <HAL_RTC_SetTime+0xf8>)
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ae8:	6821      	ldr	r1, [r4, #0]
 8002aea:	688b      	ldr	r3, [r1, #8]
 8002aec:	68f2      	ldr	r2, [r6, #12]
 8002aee:	6930      	ldr	r0, [r6, #16]
 8002af0:	4302      	orrs	r2, r0
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002af6:	6822      	ldr	r2, [r4, #0]
 8002af8:	68d3      	ldr	r3, [r2, #12]
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	438b      	bics	r3, r1
 8002afe:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	069b      	lsls	r3, r3, #26
 8002b06:	d521      	bpl.n	8002b4c <HAL_RTC_SetTime+0xd0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8002b12:	2300      	movs	r3, #0
 8002b14:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002b16:	e028      	b.n	8002b6a <HAL_RTC_SetTime+0xee>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b18:	6803      	ldr	r3, [r0, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	065b      	lsls	r3, r3, #25
 8002b1e:	d401      	bmi.n	8002b24 <HAL_RTC_SetTime+0xa8>
      sTime->TimeFormat = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b24:	7835      	ldrb	r5, [r6, #0]
 8002b26:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b28:	7870      	ldrb	r0, [r6, #1]
 8002b2a:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b2c:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8002b2e:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b30:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002b32:	78f0      	ldrb	r0, [r6, #3]
 8002b34:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b36:	4305      	orrs	r5, r0
 8002b38:	e7c2      	b.n	8002ac0 <HAL_RTC_SetTime+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	22ff      	movs	r2, #255	; 0xff
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b40:	2304      	movs	r3, #4
 8002b42:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002b44:	2300      	movs	r3, #0
 8002b46:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002b48:	2701      	movs	r7, #1
 8002b4a:	e00e      	b.n	8002b6a <HAL_RTC_SetTime+0xee>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b4c:	0020      	movs	r0, r4
 8002b4e:	f7ff fef1 	bl	8002934 <HAL_RTC_WaitForSynchro>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d0d8      	beq.n	8002b08 <HAL_RTC_SetTime+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002b60:	2300      	movs	r3, #0
 8002b62:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002b64:	2701      	movs	r7, #1
 8002b66:	e000      	b.n	8002b6a <HAL_RTC_SetTime+0xee>
  __HAL_LOCK(hrtc);
 8002b68:	2702      	movs	r7, #2
}
 8002b6a:	0038      	movs	r0, r7
 8002b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	007f7f7f 	.word	0x007f7f7f
 8002b74:	fffbffff 	.word	0xfffbffff

08002b78 <HAL_RTC_SetDate>:
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	0004      	movs	r4, r0
 8002b7c:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8002b7e:	7f03      	ldrb	r3, [r0, #28]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d060      	beq.n	8002c46 <HAL_RTC_SetDate+0xce>
 8002b84:	2301      	movs	r3, #1
 8002b86:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002b88:	3301      	adds	r3, #1
 8002b8a:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b8c:	2a00      	cmp	r2, #0
 8002b8e:	d106      	bne.n	8002b9e <HAL_RTC_SetDate+0x26>
 8002b90:	784b      	ldrb	r3, [r1, #1]
 8002b92:	06d9      	lsls	r1, r3, #27
 8002b94:	d503      	bpl.n	8002b9e <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b96:	2110      	movs	r1, #16
 8002b98:	438b      	bics	r3, r1
 8002b9a:	330a      	adds	r3, #10
 8002b9c:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 8002b9e:	2a00      	cmp	r2, #0
 8002ba0:	d12f      	bne.n	8002c02 <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ba2:	78f0      	ldrb	r0, [r6, #3]
 8002ba4:	f7ff ff5e 	bl	8002a64 <RTC_ByteToBcd2>
 8002ba8:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002baa:	7870      	ldrb	r0, [r6, #1]
 8002bac:	f7ff ff5a 	bl	8002a64 <RTC_ByteToBcd2>
 8002bb0:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bb2:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002bb4:	78b0      	ldrb	r0, [r6, #2]
 8002bb6:	f7ff ff55 	bl	8002a64 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bba:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002bbc:	7830      	ldrb	r0, [r6, #0]
 8002bbe:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bc0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	22ca      	movs	r2, #202	; 0xca
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	3a77      	subs	r2, #119	; 0x77
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bce:	0020      	movs	r0, r4
 8002bd0:	f7ff fec9 	bl	8002966 <RTC_EnterInitMode>
 8002bd4:	1e06      	subs	r6, r0, #0
 8002bd6:	d11f      	bne.n	8002c18 <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	481c      	ldr	r0, [pc, #112]	; (8002c4c <HAL_RTC_SetDate+0xd4>)
 8002bdc:	4005      	ands	r5, r0
 8002bde:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002be0:	6822      	ldr	r2, [r4, #0]
 8002be2:	68d3      	ldr	r3, [r2, #12]
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	438b      	bics	r3, r1
 8002be8:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	069b      	lsls	r3, r3, #26
 8002bf0:	d51b      	bpl.n	8002c2a <HAL_RTC_SetDate+0xb2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8002c00:	e022      	b.n	8002c48 <HAL_RTC_SetDate+0xd0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002c02:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002c04:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c06:	78f5      	ldrb	r5, [r6, #3]
 8002c08:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c0a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c0c:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c0e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002c10:	7830      	ldrb	r0, [r6, #0]
 8002c12:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c14:	4305      	orrs	r5, r0
 8002c16:	e7d4      	b.n	8002bc2 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	22ff      	movs	r2, #255	; 0xff
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002c22:	2300      	movs	r3, #0
 8002c24:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002c26:	2601      	movs	r6, #1
 8002c28:	e00e      	b.n	8002c48 <HAL_RTC_SetDate+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c2a:	0020      	movs	r0, r4
 8002c2c:	f7ff fe82 	bl	8002934 <HAL_RTC_WaitForSynchro>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d0de      	beq.n	8002bf2 <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002c42:	2601      	movs	r6, #1
 8002c44:	e000      	b.n	8002c48 <HAL_RTC_SetDate+0xd0>
 __HAL_LOCK(hrtc);
 8002c46:	2602      	movs	r6, #2
}
 8002c48:	0030      	movs	r0, r6
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	00ffff3f 	.word	0x00ffff3f

08002c50 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002c50:	0902      	lsrs	r2, r0, #4
 8002c52:	0093      	lsls	r3, r2, #2
 8002c54:	189b      	adds	r3, r3, r2
 8002c56:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002c58:	230f      	movs	r3, #15
 8002c5a:	4018      	ands	r0, r3
 8002c5c:	1880      	adds	r0, r0, r2
 8002c5e:	b2c0      	uxtb	r0, r0
}
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_RTC_GetTime>:
{
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c68:	6803      	ldr	r3, [r0, #0]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c6e:	6803      	ldr	r3, [r0, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	045b      	lsls	r3, r3, #17
 8002c74:	0c5b      	lsrs	r3, r3, #17
 8002c76:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002c78:	6803      	ldr	r3, [r0, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_RTC_GetTime+0x54>)
 8002c7e:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002c80:	0c1e      	lsrs	r6, r3, #16
 8002c82:	203f      	movs	r0, #63	; 0x3f
 8002c84:	4030      	ands	r0, r6
 8002c86:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002c88:	0a1d      	lsrs	r5, r3, #8
 8002c8a:	277f      	movs	r7, #127	; 0x7f
 8002c8c:	403d      	ands	r5, r7
 8002c8e:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002c90:	401f      	ands	r7, r3
 8002c92:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	4031      	ands	r1, r6
 8002c98:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8002c9a:	2a00      	cmp	r2, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_RTC_GetTime+0x50>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c9e:	f7ff ffd7 	bl	8002c50 <RTC_Bcd2ToByte>
 8002ca2:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002ca4:	0028      	movs	r0, r5
 8002ca6:	f7ff ffd3 	bl	8002c50 <RTC_Bcd2ToByte>
 8002caa:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002cac:	0038      	movs	r0, r7
 8002cae:	f7ff ffcf 	bl	8002c50 <RTC_Bcd2ToByte>
 8002cb2:	70a0      	strb	r0, [r4, #2]
}
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cb8:	007f7f7f 	.word	0x007f7f7f

08002cbc <HAL_RTC_GetDate>:
{
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002cc0:	6803      	ldr	r3, [r0, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RTC_GetDate+0x44>)
 8002cc6:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002cc8:	0c18      	lsrs	r0, r3, #16
 8002cca:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002ccc:	0a19      	lsrs	r1, r3, #8
 8002cce:	261f      	movs	r6, #31
 8002cd0:	400e      	ands	r6, r1
 8002cd2:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002cd4:	253f      	movs	r5, #63	; 0x3f
 8002cd6:	401d      	ands	r5, r3
 8002cd8:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002cda:	0b5b      	lsrs	r3, r3, #13
 8002cdc:	2107      	movs	r1, #7
 8002cde:	400b      	ands	r3, r1
 8002ce0:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	d10a      	bne.n	8002cfc <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ce6:	f7ff ffb3 	bl	8002c50 <RTC_Bcd2ToByte>
 8002cea:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002cec:	0030      	movs	r0, r6
 8002cee:	f7ff ffaf 	bl	8002c50 <RTC_Bcd2ToByte>
 8002cf2:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002cf4:	0028      	movs	r0, r5
 8002cf6:	f7ff ffab 	bl	8002c50 <RTC_Bcd2ToByte>
 8002cfa:	70a0      	strb	r0, [r4, #2]
}
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	00ffff3f 	.word	0x00ffff3f

08002d04 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d04:	6803      	ldr	r3, [r0, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d0e:	6802      	ldr	r2, [r0, #0]
 8002d10:	6813      	ldr	r3, [r2, #0]
 8002d12:	430b      	orrs	r3, r1
 8002d14:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8002d16:	2000      	movs	r0, #0
 8002d18:	4770      	bx	lr

08002d1a <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d20:	4770      	bx	lr

08002d22 <HAL_TIM_IRQHandler>:
{
 8002d22:	b510      	push	{r4, lr}
 8002d24:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d26:	6803      	ldr	r3, [r0, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	0792      	lsls	r2, r2, #30
 8002d2c:	d50f      	bpl.n	8002d4e <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	0792      	lsls	r2, r2, #30
 8002d32:	d50c      	bpl.n	8002d4e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d34:	2203      	movs	r2, #3
 8002d36:	4252      	negs	r2, r2
 8002d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3e:	6803      	ldr	r3, [r0, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	079b      	lsls	r3, r3, #30
 8002d44:	d063      	beq.n	8002e0e <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	f7ff ffe9 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	0752      	lsls	r2, r2, #29
 8002d54:	d512      	bpl.n	8002d7c <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	0752      	lsls	r2, r2, #29
 8002d5a:	d50f      	bpl.n	8002d7c <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	4252      	negs	r2, r2
 8002d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d62:	2302      	movs	r3, #2
 8002d64:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	23c0      	movs	r3, #192	; 0xc0
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	421a      	tst	r2, r3
 8002d70:	d053      	beq.n	8002e1a <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	0020      	movs	r0, r4
 8002d74:	f7ff ffd2 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	0712      	lsls	r2, r2, #28
 8002d82:	d510      	bpl.n	8002da6 <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	0712      	lsls	r2, r2, #28
 8002d88:	d50d      	bpl.n	8002da6 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d8a:	2209      	movs	r2, #9
 8002d8c:	4252      	negs	r2, r2
 8002d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d90:	2304      	movs	r3, #4
 8002d92:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	079b      	lsls	r3, r3, #30
 8002d9a:	d045      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	0020      	movs	r0, r4
 8002d9e:	f7ff ffbd 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	2300      	movs	r3, #0
 8002da4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	06d2      	lsls	r2, r2, #27
 8002dac:	d512      	bpl.n	8002dd4 <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	06d2      	lsls	r2, r2, #27
 8002db2:	d50f      	bpl.n	8002dd4 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db4:	2211      	movs	r2, #17
 8002db6:	4252      	negs	r2, r2
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dba:	2308      	movs	r3, #8
 8002dbc:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	23c0      	movs	r3, #192	; 0xc0
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	421a      	tst	r2, r3
 8002dc8:	d035      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	0020      	movs	r0, r4
 8002dcc:	f7ff ffa6 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	07d2      	lsls	r2, r2, #31
 8002dda:	d502      	bpl.n	8002de2 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	07d2      	lsls	r2, r2, #31
 8002de0:	d430      	bmi.n	8002e44 <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	0612      	lsls	r2, r2, #24
 8002de8:	d502      	bpl.n	8002df0 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	0612      	lsls	r2, r2, #24
 8002dee:	d430      	bmi.n	8002e52 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	0652      	lsls	r2, r2, #25
 8002df6:	d502      	bpl.n	8002dfe <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	0652      	lsls	r2, r2, #25
 8002dfc:	d430      	bmi.n	8002e60 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	0692      	lsls	r2, r2, #26
 8002e04:	d502      	bpl.n	8002e0c <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	0692      	lsls	r2, r2, #26
 8002e0a:	d430      	bmi.n	8002e6e <HAL_TIM_IRQHandler+0x14c>
}
 8002e0c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	f7ff ff84 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e12:	0020      	movs	r0, r4
 8002e14:	f7ff ff83 	bl	8002d1e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e18:	e797      	b.n	8002d4a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	0020      	movs	r0, r4
 8002e1c:	f7ff ff7d 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	0020      	movs	r0, r4
 8002e22:	f7ff ff7c 	bl	8002d1e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e26:	e7a7      	b.n	8002d78 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e28:	0020      	movs	r0, r4
 8002e2a:	f7ff ff76 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2e:	0020      	movs	r0, r4
 8002e30:	f7ff ff75 	bl	8002d1e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e34:	e7b5      	b.n	8002da2 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	0020      	movs	r0, r4
 8002e38:	f7ff ff6f 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	0020      	movs	r0, r4
 8002e3e:	f7ff ff6e 	bl	8002d1e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e42:	e7c5      	b.n	8002dd0 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e44:	2202      	movs	r2, #2
 8002e46:	4252      	negs	r2, r2
 8002e48:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4a:	0020      	movs	r0, r4
 8002e4c:	f000 fc6c 	bl	8003728 <HAL_TIM_PeriodElapsedCallback>
 8002e50:	e7c7      	b.n	8002de2 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e52:	2281      	movs	r2, #129	; 0x81
 8002e54:	4252      	negs	r2, r2
 8002e56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e58:	0020      	movs	r0, r4
 8002e5a:	f000 f874 	bl	8002f46 <HAL_TIMEx_BreakCallback>
 8002e5e:	e7c7      	b.n	8002df0 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e60:	2241      	movs	r2, #65	; 0x41
 8002e62:	4252      	negs	r2, r2
 8002e64:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e66:	0020      	movs	r0, r4
 8002e68:	f7ff ff5a 	bl	8002d20 <HAL_TIM_TriggerCallback>
 8002e6c:	e7c7      	b.n	8002dfe <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6e:	2221      	movs	r2, #33	; 0x21
 8002e70:	4252      	negs	r2, r2
 8002e72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002e74:	0020      	movs	r0, r4
 8002e76:	f000 f865 	bl	8002f44 <HAL_TIMEx_CommutationCallback>
}
 8002e7a:	e7c7      	b.n	8002e0c <HAL_TIM_IRQHandler+0xea>

08002e7c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8002e7c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <TIM_Base_SetConfig+0x78>)
 8002e80:	4290      	cmp	r0, r2
 8002e82:	d032      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <TIM_Base_SetConfig+0x7c>)
 8002e86:	4290      	cmp	r0, r2
 8002e88:	d02f      	beq.n	8002eea <TIM_Base_SetConfig+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <TIM_Base_SetConfig+0x78>)
 8002e8c:	4290      	cmp	r0, r2
 8002e8e:	d00e      	beq.n	8002eae <TIM_Base_SetConfig+0x32>
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <TIM_Base_SetConfig+0x7c>)
 8002e92:	4290      	cmp	r0, r2
 8002e94:	d00b      	beq.n	8002eae <TIM_Base_SetConfig+0x32>
 8002e96:	4a19      	ldr	r2, [pc, #100]	; (8002efc <TIM_Base_SetConfig+0x80>)
 8002e98:	4290      	cmp	r0, r2
 8002e9a:	d008      	beq.n	8002eae <TIM_Base_SetConfig+0x32>
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <TIM_Base_SetConfig+0x84>)
 8002e9e:	4290      	cmp	r0, r2
 8002ea0:	d005      	beq.n	8002eae <TIM_Base_SetConfig+0x32>
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <TIM_Base_SetConfig+0x88>)
 8002ea4:	4290      	cmp	r0, r2
 8002ea6:	d002      	beq.n	8002eae <TIM_Base_SetConfig+0x32>
 8002ea8:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <TIM_Base_SetConfig+0x8c>)
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d103      	bne.n	8002eb6 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <TIM_Base_SetConfig+0x90>)
 8002eb0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb2:	68ca      	ldr	r2, [r1, #12]
 8002eb4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	4393      	bics	r3, r2
 8002eba:	694a      	ldr	r2, [r1, #20]
 8002ebc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ebe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec0:	688b      	ldr	r3, [r1, #8]
 8002ec2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ec4:	680b      	ldr	r3, [r1, #0]
 8002ec6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <TIM_Base_SetConfig+0x78>)
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	d008      	beq.n	8002ee0 <TIM_Base_SetConfig+0x64>
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <TIM_Base_SetConfig+0x84>)
 8002ed0:	4298      	cmp	r0, r3
 8002ed2:	d005      	beq.n	8002ee0 <TIM_Base_SetConfig+0x64>
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <TIM_Base_SetConfig+0x88>)
 8002ed6:	4298      	cmp	r0, r3
 8002ed8:	d002      	beq.n	8002ee0 <TIM_Base_SetConfig+0x64>
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <TIM_Base_SetConfig+0x8c>)
 8002edc:	4298      	cmp	r0, r3
 8002ede:	d101      	bne.n	8002ee4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee0:	690b      	ldr	r3, [r1, #16]
 8002ee2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	6143      	str	r3, [r0, #20]
}
 8002ee8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eea:	2270      	movs	r2, #112	; 0x70
 8002eec:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002eee:	684a      	ldr	r2, [r1, #4]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	e7ca      	b.n	8002e8a <TIM_Base_SetConfig+0xe>
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40002000 	.word	0x40002000
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40014400 	.word	0x40014400
 8002f08:	40014800 	.word	0x40014800
 8002f0c:	fffffcff 	.word	0xfffffcff

08002f10 <HAL_TIM_Base_Init>:
{
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8002f14:	d014      	beq.n	8002f40 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f16:	233d      	movs	r3, #61	; 0x3d
 8002f18:	5cc3      	ldrb	r3, [r0, r3]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002f1e:	253d      	movs	r5, #61	; 0x3d
 8002f20:	2302      	movs	r3, #2
 8002f22:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f24:	1d21      	adds	r1, r4, #4
 8002f26:	6820      	ldr	r0, [r4, #0]
 8002f28:	f7ff ffa8 	bl	8002e7c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002f30:	2000      	movs	r0, #0
}
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002f34:	2200      	movs	r2, #0
 8002f36:	333c      	adds	r3, #60	; 0x3c
 8002f38:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002f3a:	f000 fe1f 	bl	8003b7c <HAL_TIM_Base_MspInit>
 8002f3e:	e7ee      	b.n	8002f1e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002f40:	2001      	movs	r0, #1
 8002f42:	e7f6      	b.n	8002f32 <HAL_TIM_Base_Init+0x22>

08002f44 <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f46:	4770      	bx	lr

08002f48 <EE_VerifyPageFullyErased>:
{
  uint32_t readstatus = 1;
  uint16_t addressvalue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <EE_VerifyPageFullyErased+0x20>)
 8002f4a:	4298      	cmp	r0, r3
 8002f4c:	d806      	bhi.n	8002f5c <EE_VerifyPageFullyErased+0x14>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8002f4e:	8803      	ldrh	r3, [r0, #0]
 8002f50:	b29b      	uxth	r3, r3

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8002f52:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <EE_VerifyPageFullyErased+0x24>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d104      	bne.n	8002f62 <EE_VerifyPageFullyErased+0x1a>
      readstatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 8002f58:	3004      	adds	r0, #4
 8002f5a:	e7f5      	b.n	8002f48 <EE_VerifyPageFullyErased>
  uint32_t readstatus = 1;
 8002f5c:	2001      	movs	r0, #1
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8002f5e:	b280      	uxth	r0, r0
}
 8002f60:	4770      	bx	lr
      readstatus = 0;
 8002f62:	2000      	movs	r0, #0
 8002f64:	e7fb      	b.n	8002f5e <EE_VerifyPageFullyErased+0x16>
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	0800f3ff 	.word	0x0800f3ff
 8002f6c:	0000ffff 	.word	0x0000ffff

08002f70 <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <EE_FindValidPage+0x50>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002f76:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <EE_FindValidPage+0x54>)
 8002f78:	8812      	ldrh	r2, [r2, #0]
 8002f7a:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d013      	beq.n	8002fa8 <EE_FindValidPage+0x38>
 8002f80:	2801      	cmp	r0, #1
 8002f82:	d119      	bne.n	8002fb8 <EE_FindValidPage+0x48>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d106      	bne.n	8002f96 <EE_FindValidPage+0x26>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8002f88:	490f      	ldr	r1, [pc, #60]	; (8002fc8 <EE_FindValidPage+0x58>)
 8002f8a:	428b      	cmp	r3, r1
 8002f8c:	d001      	beq.n	8002f92 <EE_FindValidPage+0x22>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e013      	b.n	8002fba <EE_FindValidPage+0x4a>
          return PAGE0;         /* Page0 valid */
 8002f92:	0013      	movs	r3, r2
 8002f94:	e011      	b.n	8002fba <EE_FindValidPage+0x4a>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <EE_FindValidPage+0x2e>
          return PAGE0;         /* Page0 valid */
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8002f9a:	23ab      	movs	r3, #171	; 0xab
 8002f9c:	e00d      	b.n	8002fba <EE_FindValidPage+0x4a>
        if (pagestatus1 == RECEIVE_DATA)
 8002f9e:	490a      	ldr	r1, [pc, #40]	; (8002fc8 <EE_FindValidPage+0x58>)
 8002fa0:	428a      	cmp	r2, r1
 8002fa2:	d10a      	bne.n	8002fba <EE_FindValidPage+0x4a>
          return PAGE1;         /* Page1 valid */
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	e008      	b.n	8002fba <EE_FindValidPage+0x4a>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <EE_FindValidPage+0x4a>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	d001      	beq.n	8002fb4 <EE_FindValidPage+0x44>
      {
        return PAGE1;           /* Page1 valid */
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8002fb0:	23ab      	movs	r3, #171	; 0xab
 8002fb2:	e002      	b.n	8002fba <EE_FindValidPage+0x4a>
        return PAGE1;           /* Page1 valid */
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <EE_FindValidPage+0x4a>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8002fb8:	2300      	movs	r3, #0
  }
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	4770      	bx	lr
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	0800f000 	.word	0x0800f000
 8002fc4:	0800f400 	.word	0x0800f400
 8002fc8:	0000eeee 	.word	0x0000eeee

08002fcc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	0005      	movs	r5, r0
 8002fd2:	000e      	movs	r6, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  __IO uint16_t validpage = PAGE0;
 8002fd4:	466b      	mov	r3, sp
 8002fd6:	1d9c      	adds	r4, r3, #6
 8002fd8:	2300      	movs	r3, #0
 8002fda:	8023      	strh	r3, [r4, #0]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8002fdc:	2001      	movs	r0, #1
 8002fde:	f7ff ffc7 	bl	8002f70 <EE_FindValidPage>
 8002fe2:	8020      	strh	r0, [r4, #0]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8002fe4:	8823      	ldrh	r3, [r4, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2bab      	cmp	r3, #171	; 0xab
 8002fea:	d026      	beq.n	800303a <EE_VerifyPageFullWriteVariable+0x6e>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8002fec:	466b      	mov	r3, sp
 8002fee:	88dc      	ldrh	r4, [r3, #6]
 8002ff0:	4a13      	ldr	r2, [pc, #76]	; (8003040 <EE_VerifyPageFullWriteVariable+0x74>)
 8002ff2:	4694      	mov	ip, r2
 8002ff4:	4464      	add	r4, ip
 8002ff6:	02a4      	lsls	r4, r4, #10

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8002ff8:	88da      	ldrh	r2, [r3, #6]
 8002ffa:	3201      	adds	r2, #1
 8002ffc:	0292      	lsls	r2, r2, #10
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <EE_VerifyPageFullWriteVariable+0x78>)
 8003000:	469c      	mov	ip, r3
 8003002:	4462      	add	r2, ip

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8003004:	4294      	cmp	r4, r2
 8003006:	d216      	bcs.n	8003036 <EE_VerifyPageFullWriteVariable+0x6a>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	d001      	beq.n	8003012 <EE_VerifyPageFullWriteVariable+0x46>
      return flashstatus;
    }
    else
    {
      /* Next address location */
      address = address + 4;
 800300e:	3404      	adds	r4, #4
 8003010:	e7f8      	b.n	8003004 <EE_VerifyPageFullWriteVariable+0x38>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8003012:	0032      	movs	r2, r6
 8003014:	2300      	movs	r3, #0
 8003016:	0021      	movs	r1, r4
 8003018:	2001      	movs	r0, #1
 800301a:	f7fe ff57 	bl	8001ecc <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 800301e:	2800      	cmp	r0, #0
 8003020:	d001      	beq.n	8003026 <EE_VerifyPageFullWriteVariable+0x5a>
        return flashstatus;
 8003022:	b280      	uxth	r0, r0
 8003024:	e00a      	b.n	800303c <EE_VerifyPageFullWriteVariable+0x70>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8003026:	1ca1      	adds	r1, r4, #2
 8003028:	002a      	movs	r2, r5
 800302a:	2300      	movs	r3, #0
 800302c:	2001      	movs	r0, #1
 800302e:	f7fe ff4d 	bl	8001ecc <HAL_FLASH_Program>
      return flashstatus;
 8003032:	b280      	uxth	r0, r0
 8003034:	e002      	b.n	800303c <EE_VerifyPageFullWriteVariable+0x70>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8003036:	2080      	movs	r0, #128	; 0x80
 8003038:	e000      	b.n	800303c <EE_VerifyPageFullWriteVariable+0x70>
    return  NO_VALID_PAGE;
 800303a:	20ab      	movs	r0, #171	; 0xab
}
 800303c:	b002      	add	sp, #8
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	0002003c 	.word	0x0002003c
 8003044:	0800efff 	.word	0x0800efff

08003048 <EE_Format>:
{
 8003048:	b510      	push	{r4, lr}
 800304a:	b084      	sub	sp, #16
  uint32_t page_error = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	9303      	str	r3, [sp, #12]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003050:	9300      	str	r3, [sp, #0]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8003052:	4812      	ldr	r0, [pc, #72]	; (800309c <EE_Format+0x54>)
 8003054:	9001      	str	r0, [sp, #4]
  s_eraseinit.NbPages     = 1;
 8003056:	3301      	adds	r3, #1
 8003058:	9302      	str	r3, [sp, #8]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800305a:	f7ff ff75 	bl	8002f48 <EE_VerifyPageFullyErased>
 800305e:	2800      	cmp	r0, #0
 8003060:	d105      	bne.n	800306e <EE_Format+0x26>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8003062:	a903      	add	r1, sp, #12
 8003064:	4668      	mov	r0, sp
 8003066:	f7fe ffa3 	bl	8001fb0 <HAL_FLASHEx_Erase>
 800306a:	1e04      	subs	r4, r0, #0
    if (flashstatus != HAL_OK)
 800306c:	d107      	bne.n	800307e <EE_Format+0x36>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800306e:	2200      	movs	r2, #0
 8003070:	2300      	movs	r3, #0
 8003072:	490a      	ldr	r1, [pc, #40]	; (800309c <EE_Format+0x54>)
 8003074:	2001      	movs	r0, #1
 8003076:	f7fe ff29 	bl	8001ecc <HAL_FLASH_Program>
 800307a:	1e04      	subs	r4, r0, #0
  if (flashstatus != HAL_OK)
 800307c:	d002      	beq.n	8003084 <EE_Format+0x3c>
}
 800307e:	0020      	movs	r0, r4
 8003080:	b004      	add	sp, #16
 8003082:	bd10      	pop	{r4, pc}
  s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8003084:	4806      	ldr	r0, [pc, #24]	; (80030a0 <EE_Format+0x58>)
 8003086:	9001      	str	r0, [sp, #4]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003088:	f7ff ff5e 	bl	8002f48 <EE_VerifyPageFullyErased>
 800308c:	2800      	cmp	r0, #0
 800308e:	d1f6      	bne.n	800307e <EE_Format+0x36>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8003090:	a903      	add	r1, sp, #12
 8003092:	4668      	mov	r0, sp
 8003094:	f7fe ff8c 	bl	8001fb0 <HAL_FLASHEx_Erase>
 8003098:	0004      	movs	r4, r0
 800309a:	e7f0      	b.n	800307e <EE_Format+0x36>
 800309c:	0800f000 	.word	0x0800f000
 80030a0:	0800f400 	.word	0x0800f400

080030a4 <EE_ReadVariable>:
{
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	0005      	movs	r5, r0
 80030aa:	000c      	movs	r4, r1
  __IO uint16_t validpage = PAGE0;
 80030ac:	466b      	mov	r3, sp
 80030ae:	1d9e      	adds	r6, r3, #6
 80030b0:	2300      	movs	r3, #0
 80030b2:	8033      	strh	r3, [r6, #0]
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7ff ff5b 	bl	8002f70 <EE_FindValidPage>
 80030ba:	8030      	strh	r0, [r6, #0]
  if (validpage == NO_VALID_PAGE)
 80030bc:	8833      	ldrh	r3, [r6, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2bab      	cmp	r3, #171	; 0xab
 80030c2:	d01c      	beq.n	80030fe <EE_ReadVariable+0x5a>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80030c4:	466b      	mov	r3, sp
 80030c6:	88d9      	ldrh	r1, [r3, #6]
 80030c8:	3306      	adds	r3, #6
 80030ca:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <EE_ReadVariable+0x60>)
 80030cc:	4694      	mov	ip, r2
 80030ce:	4461      	add	r1, ip
 80030d0:	0289      	lsls	r1, r1, #10
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	029b      	lsls	r3, r3, #10
 80030d8:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <EE_ReadVariable+0x64>)
 80030da:	4694      	mov	ip, r2
 80030dc:	4463      	add	r3, ip
  while (address > (PageStartAddress + 2))
 80030de:	1c8a      	adds	r2, r1, #2
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d90a      	bls.n	80030fa <EE_ReadVariable+0x56>
    addressvalue = (*(__IO uint16_t*)address);
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	b292      	uxth	r2, r2
    if (addressvalue == VirtAddress)
 80030e8:	42aa      	cmp	r2, r5
 80030ea:	d001      	beq.n	80030f0 <EE_ReadVariable+0x4c>
      address = address - 4;
 80030ec:	3b04      	subs	r3, #4
 80030ee:	e7f6      	b.n	80030de <EE_ReadVariable+0x3a>
      *Data = (*(__IO uint16_t*)(address - 2));
 80030f0:	3b02      	subs	r3, #2
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	8023      	strh	r3, [r4, #0]
      readstatus = 0;
 80030f6:	2000      	movs	r0, #0
      break;
 80030f8:	e002      	b.n	8003100 <EE_ReadVariable+0x5c>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 80030fa:	2001      	movs	r0, #1
 80030fc:	e000      	b.n	8003100 <EE_ReadVariable+0x5c>
    return  NO_VALID_PAGE;
 80030fe:	20ab      	movs	r0, #171	; 0xab
}
 8003100:	b002      	add	sp, #8
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	0002003c 	.word	0x0002003c
 8003108:	0800effe 	.word	0x0800effe

0800310c <EE_Init>:
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b085      	sub	sp, #20
  uint32_t page_error = 0;
 8003110:	2200      	movs	r2, #0
 8003112:	9203      	str	r2, [sp, #12]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003114:	4b91      	ldr	r3, [pc, #580]	; (800335c <EE_Init+0x250>)
 8003116:	881e      	ldrh	r6, [r3, #0]
 8003118:	b2b6      	uxth	r6, r6
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800311a:	4991      	ldr	r1, [pc, #580]	; (8003360 <EE_Init+0x254>)
 800311c:	880d      	ldrh	r5, [r1, #0]
 800311e:	b2ad      	uxth	r5, r5
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003120:	9200      	str	r2, [sp, #0]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8003122:	9301      	str	r3, [sp, #4]
  s_eraseinit.NbPages     = 1;
 8003124:	2301      	movs	r3, #1
 8003126:	9302      	str	r3, [sp, #8]
  switch (pagestatus0)
 8003128:	4b8e      	ldr	r3, [pc, #568]	; (8003364 <EE_Init+0x258>)
 800312a:	429e      	cmp	r6, r3
 800312c:	d040      	beq.n	80031b0 <EE_Init+0xa4>
 800312e:	4b8e      	ldr	r3, [pc, #568]	; (8003368 <EE_Init+0x25c>)
 8003130:	429e      	cmp	r6, r3
 8003132:	d00b      	beq.n	800314c <EE_Init+0x40>
 8003134:	2e00      	cmp	r6, #0
 8003136:	d100      	bne.n	800313a <EE_Init+0x2e>
 8003138:	e0a1      	b.n	800327e <EE_Init+0x172>
      flashstatus = EE_Format();
 800313a:	f7ff ff85 	bl	8003048 <EE_Format>
      if (flashstatus != HAL_OK)
 800313e:	2800      	cmp	r0, #0
 8003140:	d100      	bne.n	8003144 <EE_Init+0x38>
 8003142:	e108      	b.n	8003356 <EE_Init+0x24a>
        return flashstatus;
 8003144:	b285      	uxth	r5, r0
}
 8003146:	0028      	movs	r0, r5
 8003148:	b005      	add	sp, #20
 800314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800314c:	2d00      	cmp	r5, #0
 800314e:	d009      	beq.n	8003164 <EE_Init+0x58>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8003150:	4b84      	ldr	r3, [pc, #528]	; (8003364 <EE_Init+0x258>)
 8003152:	429d      	cmp	r5, r3
 8003154:	d014      	beq.n	8003180 <EE_Init+0x74>
        flashstatus = EE_Format();
 8003156:	f7ff ff77 	bl	8003048 <EE_Format>
        if (flashstatus != HAL_OK)
 800315a:	2800      	cmp	r0, #0
 800315c:	d100      	bne.n	8003160 <EE_Init+0x54>
 800315e:	e0f2      	b.n	8003346 <EE_Init+0x23a>
          return flashstatus;
 8003160:	b285      	uxth	r5, r0
 8003162:	e7f0      	b.n	8003146 <EE_Init+0x3a>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003164:	487d      	ldr	r0, [pc, #500]	; (800335c <EE_Init+0x250>)
 8003166:	f7ff feef 	bl	8002f48 <EE_VerifyPageFullyErased>
 800316a:	1e04      	subs	r4, r0, #0
 800316c:	d1eb      	bne.n	8003146 <EE_Init+0x3a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800316e:	a903      	add	r1, sp, #12
 8003170:	4668      	mov	r0, sp
 8003172:	f7fe ff1d 	bl	8001fb0 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003176:	2800      	cmp	r0, #0
 8003178:	d100      	bne.n	800317c <EE_Init+0x70>
 800317a:	e0e0      	b.n	800333e <EE_Init+0x232>
            return flashstatus;
 800317c:	b285      	uxth	r5, r0
 800317e:	e7e2      	b.n	8003146 <EE_Init+0x3a>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003180:	4876      	ldr	r0, [pc, #472]	; (800335c <EE_Init+0x250>)
 8003182:	f7ff fee1 	bl	8002f48 <EE_VerifyPageFullyErased>
 8003186:	2800      	cmp	r0, #0
 8003188:	d105      	bne.n	8003196 <EE_Init+0x8a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800318a:	a903      	add	r1, sp, #12
 800318c:	4668      	mov	r0, sp
 800318e:	f7fe ff0f 	bl	8001fb0 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003192:	2800      	cmp	r0, #0
 8003194:	d10a      	bne.n	80031ac <EE_Init+0xa0>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8003196:	2200      	movs	r2, #0
 8003198:	2300      	movs	r3, #0
 800319a:	4971      	ldr	r1, [pc, #452]	; (8003360 <EE_Init+0x254>)
 800319c:	2001      	movs	r0, #1
 800319e:	f7fe fe95 	bl	8001ecc <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d100      	bne.n	80031a8 <EE_Init+0x9c>
 80031a6:	e0cc      	b.n	8003342 <EE_Init+0x236>
          return flashstatus;
 80031a8:	b285      	uxth	r5, r0
 80031aa:	e7cc      	b.n	8003146 <EE_Init+0x3a>
            return flashstatus;
 80031ac:	b285      	uxth	r5, r0
 80031ae:	e7ca      	b.n	8003146 <EE_Init+0x3a>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	d02a      	beq.n	800320a <EE_Init+0xfe>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 80031b4:	4b6c      	ldr	r3, [pc, #432]	; (8003368 <EE_Init+0x25c>)
 80031b6:	429d      	cmp	r5, r3
 80031b8:	d049      	beq.n	800324e <EE_Init+0x142>
        flashstatus = EE_Format();
 80031ba:	f7ff ff45 	bl	8003048 <EE_Format>
        if (flashstatus != HAL_OK)
 80031be:	2800      	cmp	r0, #0
 80031c0:	d100      	bne.n	80031c4 <EE_Init+0xb8>
 80031c2:	e0c6      	b.n	8003352 <EE_Init+0x246>
          return flashstatus;
 80031c4:	b285      	uxth	r5, r0
 80031c6:	e7be      	b.n	8003146 <EE_Init+0x3a>
            x = varidx;
 80031c8:	b227      	sxth	r7, r4
 80031ca:	e00c      	b.n	80031e6 <EE_Init+0xda>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80031cc:	3401      	adds	r4, #1
 80031ce:	b2a4      	uxth	r4, r4
 80031d0:	2c0f      	cmp	r4, #15
 80031d2:	d81e      	bhi.n	8003212 <EE_Init+0x106>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80031d4:	4b65      	ldr	r3, [pc, #404]	; (800336c <EE_Init+0x260>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	0026      	movs	r6, r4
 80031dc:	0062      	lsls	r2, r4, #1
 80031de:	4964      	ldr	r1, [pc, #400]	; (8003370 <EE_Init+0x264>)
 80031e0:	5a50      	ldrh	r0, [r2, r1]
 80031e2:	4283      	cmp	r3, r0
 80031e4:	d0f0      	beq.n	80031c8 <EE_Init+0xbc>
          if (varidx != x)
 80031e6:	42be      	cmp	r6, r7
 80031e8:	d0f0      	beq.n	80031cc <EE_Init+0xc0>
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80031ea:	4962      	ldr	r1, [pc, #392]	; (8003374 <EE_Init+0x268>)
 80031ec:	f7ff ff5a 	bl	80030a4 <EE_ReadVariable>
            if (readstatus != 0x1)
 80031f0:	2801      	cmp	r0, #1
 80031f2:	d0eb      	beq.n	80031cc <EE_Init+0xc0>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80031f4:	0076      	lsls	r6, r6, #1
 80031f6:	4b5e      	ldr	r3, [pc, #376]	; (8003370 <EE_Init+0x264>)
 80031f8:	5af0      	ldrh	r0, [r6, r3]
 80031fa:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <EE_Init+0x268>)
 80031fc:	8819      	ldrh	r1, [r3, #0]
 80031fe:	f7ff fee5 	bl	8002fcc <EE_VerifyPageFullWriteVariable>
              if (eepromstatus != HAL_OK)
 8003202:	2800      	cmp	r0, #0
 8003204:	d0e2      	beq.n	80031cc <EE_Init+0xc0>
                return eepromstatus;
 8003206:	0005      	movs	r5, r0
 8003208:	e79d      	b.n	8003146 <EE_Init+0x3a>
 800320a:	002c      	movs	r4, r5
 800320c:	2701      	movs	r7, #1
 800320e:	427f      	negs	r7, r7
 8003210:	e7de      	b.n	80031d0 <EE_Init+0xc4>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003212:	2200      	movs	r2, #0
 8003214:	2300      	movs	r3, #0
 8003216:	4951      	ldr	r1, [pc, #324]	; (800335c <EE_Init+0x250>)
 8003218:	2001      	movs	r0, #1
 800321a:	f7fe fe57 	bl	8001ecc <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 800321e:	2800      	cmp	r0, #0
 8003220:	d001      	beq.n	8003226 <EE_Init+0x11a>
          return flashstatus;
 8003222:	b285      	uxth	r5, r0
 8003224:	e78f      	b.n	8003146 <EE_Init+0x3a>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003226:	2300      	movs	r3, #0
 8003228:	9300      	str	r3, [sp, #0]
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 800322a:	484d      	ldr	r0, [pc, #308]	; (8003360 <EE_Init+0x254>)
 800322c:	9001      	str	r0, [sp, #4]
        s_eraseinit.NbPages     = 1;
 800322e:	3301      	adds	r3, #1
 8003230:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003232:	f7ff fe89 	bl	8002f48 <EE_VerifyPageFullyErased>
 8003236:	1e04      	subs	r4, r0, #0
 8003238:	d000      	beq.n	800323c <EE_Init+0x130>
 800323a:	e784      	b.n	8003146 <EE_Init+0x3a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800323c:	a903      	add	r1, sp, #12
 800323e:	4668      	mov	r0, sp
 8003240:	f7fe feb6 	bl	8001fb0 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003244:	2800      	cmp	r0, #0
 8003246:	d100      	bne.n	800324a <EE_Init+0x13e>
 8003248:	e07f      	b.n	800334a <EE_Init+0x23e>
            return flashstatus;
 800324a:	b285      	uxth	r5, r0
 800324c:	e77b      	b.n	8003146 <EE_Init+0x3a>
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 800324e:	4844      	ldr	r0, [pc, #272]	; (8003360 <EE_Init+0x254>)
 8003250:	9001      	str	r0, [sp, #4]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003252:	f7ff fe79 	bl	8002f48 <EE_VerifyPageFullyErased>
 8003256:	2800      	cmp	r0, #0
 8003258:	d105      	bne.n	8003266 <EE_Init+0x15a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800325a:	a903      	add	r1, sp, #12
 800325c:	4668      	mov	r0, sp
 800325e:	f7fe fea7 	bl	8001fb0 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003262:	2800      	cmp	r0, #0
 8003264:	d109      	bne.n	800327a <EE_Init+0x16e>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003266:	2200      	movs	r2, #0
 8003268:	2300      	movs	r3, #0
 800326a:	493c      	ldr	r1, [pc, #240]	; (800335c <EE_Init+0x250>)
 800326c:	2001      	movs	r0, #1
 800326e:	f7fe fe2d 	bl	8001ecc <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8003272:	2800      	cmp	r0, #0
 8003274:	d06b      	beq.n	800334e <EE_Init+0x242>
          return flashstatus;
 8003276:	b285      	uxth	r5, r0
 8003278:	e765      	b.n	8003146 <EE_Init+0x3a>
            return flashstatus;
 800327a:	b285      	uxth	r5, r0
 800327c:	e763      	b.n	8003146 <EE_Init+0x3a>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800327e:	2d00      	cmp	r5, #0
 8003280:	d006      	beq.n	8003290 <EE_Init+0x184>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <EE_Init+0x25c>)
 8003284:	429d      	cmp	r5, r3
 8003286:	d00a      	beq.n	800329e <EE_Init+0x192>
 8003288:	0034      	movs	r4, r6
 800328a:	2701      	movs	r7, #1
 800328c:	427f      	negs	r7, r7
 800328e:	e01b      	b.n	80032c8 <EE_Init+0x1bc>
        flashstatus = EE_Format();
 8003290:	f7ff feda 	bl	8003048 <EE_Format>
        if (flashstatus != HAL_OK)
 8003294:	2800      	cmp	r0, #0
 8003296:	d100      	bne.n	800329a <EE_Init+0x18e>
 8003298:	e755      	b.n	8003146 <EE_Init+0x3a>
          return flashstatus;
 800329a:	b285      	uxth	r5, r0
 800329c:	e753      	b.n	8003146 <EE_Init+0x3a>
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 800329e:	4830      	ldr	r0, [pc, #192]	; (8003360 <EE_Init+0x254>)
 80032a0:	9001      	str	r0, [sp, #4]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80032a2:	f7ff fe51 	bl	8002f48 <EE_VerifyPageFullyErased>
 80032a6:	1e05      	subs	r5, r0, #0
 80032a8:	d001      	beq.n	80032ae <EE_Init+0x1a2>
  return HAL_OK;
 80032aa:	0035      	movs	r5, r6
 80032ac:	e74b      	b.n	8003146 <EE_Init+0x3a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80032ae:	a903      	add	r1, sp, #12
 80032b0:	4668      	mov	r0, sp
 80032b2:	f7fe fe7d 	bl	8001fb0 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d100      	bne.n	80032bc <EE_Init+0x1b0>
 80032ba:	e744      	b.n	8003146 <EE_Init+0x3a>
            return flashstatus;
 80032bc:	b285      	uxth	r5, r0
 80032be:	e742      	b.n	8003146 <EE_Init+0x3a>
            x = varidx;
 80032c0:	b227      	sxth	r7, r4
 80032c2:	e00c      	b.n	80032de <EE_Init+0x1d2>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80032c4:	3401      	adds	r4, #1
 80032c6:	b2a4      	uxth	r4, r4
 80032c8:	2c0f      	cmp	r4, #15
 80032ca:	d819      	bhi.n	8003300 <EE_Init+0x1f4>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <EE_Init+0x26c>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	0025      	movs	r5, r4
 80032d4:	0062      	lsls	r2, r4, #1
 80032d6:	4926      	ldr	r1, [pc, #152]	; (8003370 <EE_Init+0x264>)
 80032d8:	5a50      	ldrh	r0, [r2, r1]
 80032da:	4283      	cmp	r3, r0
 80032dc:	d0f0      	beq.n	80032c0 <EE_Init+0x1b4>
          if (varidx != x)
 80032de:	42bd      	cmp	r5, r7
 80032e0:	d0f0      	beq.n	80032c4 <EE_Init+0x1b8>
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80032e2:	4924      	ldr	r1, [pc, #144]	; (8003374 <EE_Init+0x268>)
 80032e4:	f7ff fede 	bl	80030a4 <EE_ReadVariable>
            if (readstatus != 0x1)
 80032e8:	2801      	cmp	r0, #1
 80032ea:	d0eb      	beq.n	80032c4 <EE_Init+0x1b8>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80032ec:	006d      	lsls	r5, r5, #1
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <EE_Init+0x264>)
 80032f0:	5ae8      	ldrh	r0, [r5, r3]
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <EE_Init+0x268>)
 80032f4:	8819      	ldrh	r1, [r3, #0]
 80032f6:	f7ff fe69 	bl	8002fcc <EE_VerifyPageFullWriteVariable>
 80032fa:	1e05      	subs	r5, r0, #0
              if (eepromstatus != HAL_OK)
 80032fc:	d0e2      	beq.n	80032c4 <EE_Init+0x1b8>
 80032fe:	e722      	b.n	8003146 <EE_Init+0x3a>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8003300:	2200      	movs	r2, #0
 8003302:	2300      	movs	r3, #0
 8003304:	4916      	ldr	r1, [pc, #88]	; (8003360 <EE_Init+0x254>)
 8003306:	2001      	movs	r0, #1
 8003308:	f7fe fde0 	bl	8001ecc <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 800330c:	2800      	cmp	r0, #0
 800330e:	d001      	beq.n	8003314 <EE_Init+0x208>
          return flashstatus;
 8003310:	b285      	uxth	r5, r0
 8003312:	e718      	b.n	8003146 <EE_Init+0x3a>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003314:	2300      	movs	r3, #0
 8003316:	9300      	str	r3, [sp, #0]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8003318:	4810      	ldr	r0, [pc, #64]	; (800335c <EE_Init+0x250>)
 800331a:	9001      	str	r0, [sp, #4]
        s_eraseinit.NbPages     = 1;
 800331c:	3301      	adds	r3, #1
 800331e:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003320:	f7ff fe12 	bl	8002f48 <EE_VerifyPageFullyErased>
 8003324:	1e05      	subs	r5, r0, #0
 8003326:	d001      	beq.n	800332c <EE_Init+0x220>
  return HAL_OK;
 8003328:	0035      	movs	r5, r6
 800332a:	e70c      	b.n	8003146 <EE_Init+0x3a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800332c:	a903      	add	r1, sp, #12
 800332e:	4668      	mov	r0, sp
 8003330:	f7fe fe3e 	bl	8001fb0 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003334:	2800      	cmp	r0, #0
 8003336:	d100      	bne.n	800333a <EE_Init+0x22e>
 8003338:	e705      	b.n	8003146 <EE_Init+0x3a>
            return flashstatus;
 800333a:	b285      	uxth	r5, r0
 800333c:	e703      	b.n	8003146 <EE_Init+0x3a>
  return HAL_OK;
 800333e:	0025      	movs	r5, r4
 8003340:	e701      	b.n	8003146 <EE_Init+0x3a>
 8003342:	2500      	movs	r5, #0
 8003344:	e6ff      	b.n	8003146 <EE_Init+0x3a>
 8003346:	2500      	movs	r5, #0
 8003348:	e6fd      	b.n	8003146 <EE_Init+0x3a>
 800334a:	0025      	movs	r5, r4
 800334c:	e6fb      	b.n	8003146 <EE_Init+0x3a>
 800334e:	2500      	movs	r5, #0
 8003350:	e6f9      	b.n	8003146 <EE_Init+0x3a>
 8003352:	2500      	movs	r5, #0
 8003354:	e6f7      	b.n	8003146 <EE_Init+0x3a>
 8003356:	2500      	movs	r5, #0
 8003358:	e6f5      	b.n	8003146 <EE_Init+0x3a>
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	0800f000 	.word	0x0800f000
 8003360:	0800f400 	.word	0x0800f400
 8003364:	0000eeee 	.word	0x0000eeee
 8003368:	0000ffff 	.word	0x0000ffff
 800336c:	0800f006 	.word	0x0800f006
 8003370:	20000024 	.word	0x20000024
 8003374:	20000064 	.word	0x20000064
 8003378:	0800f406 	.word	0x0800f406

0800337c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800337c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337e:	46c6      	mov	lr, r8
 8003380:	b500      	push	{lr}
 8003382:	b084      	sub	sp, #16
 8003384:	0007      	movs	r7, r0
 8003386:	000d      	movs	r5, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	9303      	str	r3, [sp, #12]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800338c:	2000      	movs	r0, #0
 800338e:	f7ff fdef 	bl	8002f70 <EE_FindValidPage>

  if (validpage == PAGE1)       /* Page1 valid */
 8003392:	2801      	cmp	r0, #1
 8003394:	d014      	beq.n	80033c0 <EE_PageTransfer+0x44>
    newpageaddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_BASE_ADDRESS;
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8003396:	2800      	cmp	r0, #0
 8003398:	d005      	beq.n	80033a6 <EE_PageTransfer+0x2a>
    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800339a:	24ab      	movs	r4, #171	; 0xab
  
  

  /* Return last operation flash status */
  return flashstatus;
}
 800339c:	0020      	movs	r0, r4
 800339e:	b004      	add	sp, #16
 80033a0:	bc04      	pop	{r2}
 80033a2:	4690      	mov	r8, r2
 80033a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    oldpageid = PAGE0_BASE_ADDRESS;
 80033a6:	4b25      	ldr	r3, [pc, #148]	; (800343c <EE_PageTransfer+0xc0>)
 80033a8:	4698      	mov	r8, r3
    newpageaddress = PAGE1_BASE_ADDRESS;
 80033aa:	4e25      	ldr	r6, [pc, #148]	; (8003440 <EE_PageTransfer+0xc4>)
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 80033ac:	4a25      	ldr	r2, [pc, #148]	; (8003444 <EE_PageTransfer+0xc8>)
 80033ae:	2300      	movs	r3, #0
 80033b0:	0031      	movs	r1, r6
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7fe fd8a 	bl	8001ecc <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d005      	beq.n	80033c8 <EE_PageTransfer+0x4c>
    return flashstatus;
 80033bc:	b284      	uxth	r4, r0
 80033be:	e7ed      	b.n	800339c <EE_PageTransfer+0x20>
    oldpageid = PAGE1_BASE_ADDRESS;
 80033c0:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <EE_PageTransfer+0xc4>)
 80033c2:	4698      	mov	r8, r3
    newpageaddress = PAGE0_BASE_ADDRESS;
 80033c4:	4e1d      	ldr	r6, [pc, #116]	; (800343c <EE_PageTransfer+0xc0>)
 80033c6:	e7f1      	b.n	80033ac <EE_PageTransfer+0x30>
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80033c8:	0029      	movs	r1, r5
 80033ca:	0038      	movs	r0, r7
 80033cc:	f7ff fdfe 	bl	8002fcc <EE_VerifyPageFullWriteVariable>
 80033d0:	1e04      	subs	r4, r0, #0
  if (eepromstatus != HAL_OK)
 80033d2:	d002      	beq.n	80033da <EE_PageTransfer+0x5e>
 80033d4:	e7e2      	b.n	800339c <EE_PageTransfer+0x20>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80033d6:	3401      	adds	r4, #1
 80033d8:	b2a4      	uxth	r4, r4
 80033da:	2c0f      	cmp	r4, #15
 80033dc:	d814      	bhi.n	8003408 <EE_PageTransfer+0x8c>
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80033de:	0063      	lsls	r3, r4, #1
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <EE_PageTransfer+0xcc>)
 80033e2:	5a98      	ldrh	r0, [r3, r2]
 80033e4:	4287      	cmp	r7, r0
 80033e6:	d0f6      	beq.n	80033d6 <EE_PageTransfer+0x5a>
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80033e8:	4918      	ldr	r1, [pc, #96]	; (800344c <EE_PageTransfer+0xd0>)
 80033ea:	f7ff fe5b 	bl	80030a4 <EE_ReadVariable>
      if (readstatus != 0x1)
 80033ee:	2801      	cmp	r0, #1
 80033f0:	d0f1      	beq.n	80033d6 <EE_PageTransfer+0x5a>
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80033f2:	0065      	lsls	r5, r4, #1
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <EE_PageTransfer+0xcc>)
 80033f6:	5ae8      	ldrh	r0, [r5, r3]
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <EE_PageTransfer+0xd0>)
 80033fa:	8819      	ldrh	r1, [r3, #0]
 80033fc:	f7ff fde6 	bl	8002fcc <EE_VerifyPageFullWriteVariable>
        if (eepromstatus != HAL_OK)
 8003400:	2800      	cmp	r0, #0
 8003402:	d0e8      	beq.n	80033d6 <EE_PageTransfer+0x5a>
          return eepromstatus;
 8003404:	0004      	movs	r4, r0
 8003406:	e7c9      	b.n	800339c <EE_PageTransfer+0x20>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003408:	2300      	movs	r3, #0
 800340a:	9300      	str	r3, [sp, #0]
  s_eraseinit.PageAddress = oldpageid;
 800340c:	4643      	mov	r3, r8
 800340e:	9301      	str	r3, [sp, #4]
  s_eraseinit.NbPages     = 1;
 8003410:	2301      	movs	r3, #1
 8003412:	9302      	str	r3, [sp, #8]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8003414:	a903      	add	r1, sp, #12
 8003416:	4668      	mov	r0, sp
 8003418:	f7fe fdca 	bl	8001fb0 <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 800341c:	2800      	cmp	r0, #0
 800341e:	d001      	beq.n	8003424 <EE_PageTransfer+0xa8>
    return flashstatus;
 8003420:	b284      	uxth	r4, r0
 8003422:	e7bb      	b.n	800339c <EE_PageTransfer+0x20>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8003424:	2200      	movs	r2, #0
 8003426:	2300      	movs	r3, #0
 8003428:	0031      	movs	r1, r6
 800342a:	2001      	movs	r0, #1
 800342c:	f7fe fd4e 	bl	8001ecc <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 8003430:	2800      	cmp	r0, #0
 8003432:	d101      	bne.n	8003438 <EE_PageTransfer+0xbc>
  return flashstatus;
 8003434:	b284      	uxth	r4, r0
 8003436:	e7b1      	b.n	800339c <EE_PageTransfer+0x20>
    return flashstatus;
 8003438:	b284      	uxth	r4, r0
 800343a:	e7af      	b.n	800339c <EE_PageTransfer+0x20>
 800343c:	0800f000 	.word	0x0800f000
 8003440:	0800f400 	.word	0x0800f400
 8003444:	0000eeee 	.word	0x0000eeee
 8003448:	20000024 	.word	0x20000024
 800344c:	20000064 	.word	0x20000064

08003450 <EE_WriteVariable>:
{
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	0004      	movs	r4, r0
 8003454:	000d      	movs	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003456:	f7ff fdb9 	bl	8002fcc <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 800345a:	2880      	cmp	r0, #128	; 0x80
 800345c:	d000      	beq.n	8003460 <EE_WriteVariable+0x10>
}
 800345e:	bd70      	pop	{r4, r5, r6, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 8003460:	0029      	movs	r1, r5
 8003462:	0020      	movs	r0, r4
 8003464:	f7ff ff8a 	bl	800337c <EE_PageTransfer>
 8003468:	e7f9      	b.n	800345e <EE_WriteVariable+0xe>
	...

0800346c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <MX_GPIO_Init+0xc4>)
 8003472:	6959      	ldr	r1, [r3, #20]
 8003474:	2080      	movs	r0, #128	; 0x80
 8003476:	0280      	lsls	r0, r0, #10
 8003478:	4301      	orrs	r1, r0
 800347a:	6159      	str	r1, [r3, #20]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	4002      	ands	r2, r0
 8003480:	9200      	str	r2, [sp, #0]
 8003482:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003484:	6959      	ldr	r1, [r3, #20]
 8003486:	2080      	movs	r0, #128	; 0x80
 8003488:	02c0      	lsls	r0, r0, #11
 800348a:	4301      	orrs	r1, r0
 800348c:	6159      	str	r1, [r3, #20]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	4002      	ands	r2, r0
 8003492:	9201      	str	r2, [sp, #4]
 8003494:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	03c9      	lsls	r1, r1, #15
 800349c:	430a      	orrs	r2, r1
 800349e:	615a      	str	r2, [r3, #20]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	400b      	ands	r3, r1
 80034a4:	9302      	str	r3, [sp, #8]
 80034a6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin|BUZZER_Pin 
 80034a8:	2200      	movs	r2, #0
 80034aa:	4922      	ldr	r1, [pc, #136]	; (8003534 <MX_GPIO_Init+0xc8>)
 80034ac:	4822      	ldr	r0, [pc, #136]	; (8003538 <MX_GPIO_Init+0xcc>)
 80034ae:	f7fe fe9e 	bl	80021ee <HAL_GPIO_WritePin>
                          |DB_Pin|G_Pin|F_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin 
 80034b2:	259f      	movs	r5, #159	; 0x9f
 80034b4:	022d      	lsls	r5, r5, #8
 80034b6:	2200      	movs	r2, #0
 80034b8:	0029      	movs	r1, r5
 80034ba:	2090      	movs	r0, #144	; 0x90
 80034bc:	05c0      	lsls	r0, r0, #23
 80034be:	f7fe fe96 	bl	80021ee <HAL_GPIO_WritePin>
                          |D_Pin|A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, C_Pin|B_Pin, GPIO_PIN_RESET);
 80034c2:	2200      	movs	r2, #0
 80034c4:	21c0      	movs	r1, #192	; 0xc0
 80034c6:	481d      	ldr	r0, [pc, #116]	; (800353c <MX_GPIO_Init+0xd0>)
 80034c8:	f7fe fe91 	bl	80021ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin;
 80034cc:	2307      	movs	r3, #7
 80034ce:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d0:	2601      	movs	r6, #1
 80034d2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2400      	movs	r4, #0
 80034d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	a903      	add	r1, sp, #12
 80034dc:	4816      	ldr	r0, [pc, #88]	; (8003538 <MX_GPIO_Init+0xcc>)
 80034de:	f7fe fdb9 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin DB_Pin G_Pin F_Pin 
                           E_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|DB_Pin|G_Pin|F_Pin 
 80034e2:	23f4      	movs	r3, #244	; 0xf4
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	9303      	str	r3, [sp, #12]
                          |E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80034e8:	2711      	movs	r7, #17
 80034ea:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ee:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f0:	a903      	add	r1, sp, #12
 80034f2:	4811      	ldr	r0, [pc, #68]	; (8003538 <MX_GPIO_Init+0xcc>)
 80034f4:	f7fe fdae 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin LED1_Pin 
                           D_Pin A_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin 
 80034f8:	9503      	str	r5, [sp, #12]
                          |D_Pin|A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80034fa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	a903      	add	r1, sp, #12
 8003502:	2090      	movs	r0, #144	; 0x90
 8003504:	05c0      	lsls	r0, r0, #23
 8003506:	f7fe fda5 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_Pin B_Pin */
  GPIO_InitStruct.Pin = C_Pin|B_Pin;
 800350a:	23c0      	movs	r3, #192	; 0xc0
 800350c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800350e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003514:	a903      	add	r1, sp, #12
 8003516:	4809      	ldr	r0, [pc, #36]	; (800353c <MX_GPIO_Init+0xd0>)
 8003518:	f7fe fd9c 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_down_Pin SW_up_Pin SW_menu_Pin */
  GPIO_InitStruct.Pin = SW_down_Pin|SW_up_Pin|SW_menu_Pin;
 800351c:	2338      	movs	r3, #56	; 0x38
 800351e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003520:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003522:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003524:	a903      	add	r1, sp, #12
 8003526:	4804      	ldr	r0, [pc, #16]	; (8003538 <MX_GPIO_Init+0xcc>)
 8003528:	f7fe fd94 	bl	8002054 <HAL_GPIO_Init>

}
 800352c:	b009      	add	sp, #36	; 0x24
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	0000f407 	.word	0x0000f407
 8003538:	48000400 	.word	0x48000400
 800353c:	48001400 	.word	0x48001400

08003540 <MX_DMA_Init>:
{
 8003540:	b500      	push	{lr}
 8003542:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003544:	4a09      	ldr	r2, [pc, #36]	; (800356c <MX_DMA_Init+0x2c>)
 8003546:	6951      	ldr	r1, [r2, #20]
 8003548:	2301      	movs	r3, #1
 800354a:	4319      	orrs	r1, r3
 800354c:	6151      	str	r1, [r2, #20]
 800354e:	6952      	ldr	r2, [r2, #20]
 8003550:	4013      	ands	r3, r2
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003556:	2200      	movs	r2, #0
 8003558:	2100      	movs	r1, #0
 800355a:	2009      	movs	r0, #9
 800355c:	f7fe faf4 	bl	8001b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003560:	2009      	movs	r0, #9
 8003562:	f7fe fb23 	bl	8001bac <HAL_NVIC_EnableIRQ>
}
 8003566:	b003      	add	sp, #12
 8003568:	bd00      	pop	{pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	40021000 	.word	0x40021000

08003570 <MX_ADC_Init>:
{
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	b084      	sub	sp, #16
  hadc.Instance = ADC1;
 8003574:	4c27      	ldr	r4, [pc, #156]	; (8003614 <MX_ADC_Init+0xa4>)
 8003576:	4b28      	ldr	r3, [pc, #160]	; (8003618 <MX_ADC_Init+0xa8>)
 8003578:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler =ADC_CLOCK_SYNC_PCLK_DIV4; //ADC_CLOCK_ASYNC_DIV1;
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003580:	2500      	movs	r5, #0
 8003582:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003584:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003586:	2601      	movs	r6, #1
 8003588:	6126      	str	r6, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800358a:	2308      	movs	r3, #8
 800358c:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800358e:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003590:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003592:	6226      	str	r6, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003594:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003596:	23c2      	movs	r3, #194	; 0xc2
 8003598:	33ff      	adds	r3, #255	; 0xff
 800359a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800359c:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 800359e:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80035a0:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80035a2:	0020      	movs	r0, r4
 80035a4:	f7fe f8d0 	bl	8001748 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 80035a8:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	015b      	lsls	r3, r3, #5
 80035ae:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80035b0:	2307      	movs	r3, #7
 80035b2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035b4:	a901      	add	r1, sp, #4
 80035b6:	0020      	movs	r0, r4
 80035b8:	f7fe fa2c 	bl	8001a14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 80035bc:	9601      	str	r6, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035be:	a901      	add	r1, sp, #4
 80035c0:	0020      	movs	r0, r4
 80035c2:	f7fe fa27 	bl	8001a14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 80035c6:	2302      	movs	r3, #2
 80035c8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035ca:	a901      	add	r1, sp, #4
 80035cc:	0020      	movs	r0, r4
 80035ce:	f7fe fa21 	bl	8001a14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 80035d2:	2303      	movs	r3, #3
 80035d4:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035d6:	a901      	add	r1, sp, #4
 80035d8:	0020      	movs	r0, r4
 80035da:	f7fe fa1b 	bl	8001a14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 80035de:	2304      	movs	r3, #4
 80035e0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035e2:	a901      	add	r1, sp, #4
 80035e4:	0020      	movs	r0, r4
 80035e6:	f7fe fa15 	bl	8001a14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 80035ea:	2305      	movs	r3, #5
 80035ec:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035ee:	a901      	add	r1, sp, #4
 80035f0:	0020      	movs	r0, r4
 80035f2:	f7fe fa0f 	bl	8001a14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80035f6:	2310      	movs	r3, #16
 80035f8:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035fa:	a901      	add	r1, sp, #4
 80035fc:	0020      	movs	r0, r4
 80035fe:	f7fe fa09 	bl	8001a14 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003602:	2311      	movs	r3, #17
 8003604:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003606:	a901      	add	r1, sp, #4
 8003608:	0020      	movs	r0, r4
 800360a:	f7fe fa03 	bl	8001a14 <HAL_ADC_ConfigChannel>
}
 800360e:	b004      	add	sp, #16
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	200001c4 	.word	0x200001c4
 8003618:	40012400 	.word	0x40012400

0800361c <MX_RTC_Init>:
{
 800361c:	b530      	push	{r4, r5, lr}
 800361e:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 8003620:	4c12      	ldr	r4, [pc, #72]	; (800366c <MX_RTC_Init+0x50>)
 8003622:	4b13      	ldr	r3, [pc, #76]	; (8003670 <MX_RTC_Init+0x54>)
 8003624:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003626:	2500      	movs	r5, #0
 8003628:	6065      	str	r5, [r4, #4]
  hrtc.Init.AsynchPrediv = 127;
 800362a:	237f      	movs	r3, #127	; 0x7f
 800362c:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 800362e:	3380      	adds	r3, #128	; 0x80
 8003630:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003632:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003634:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003636:	61a5      	str	r5, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003638:	0020      	movs	r0, r4
 800363a:	f7ff f9b1 	bl	80029a0 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 800363e:	a901      	add	r1, sp, #4
 8003640:	700d      	strb	r5, [r1, #0]
  sTime.Minutes = 0x0;
 8003642:	704d      	strb	r5, [r1, #1]
  sTime.Seconds = 0x0;
 8003644:	708d      	strb	r5, [r1, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003646:	60cd      	str	r5, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003648:	610d      	str	r5, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800364a:	2201      	movs	r2, #1
 800364c:	0020      	movs	r0, r4
 800364e:	f7ff fa15 	bl	8002a7c <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003652:	2301      	movs	r3, #1
 8003654:	466a      	mov	r2, sp
 8003656:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003658:	7053      	strb	r3, [r2, #1]
  sDate.Date = 0x1;
 800365a:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0x0;
 800365c:	70d5      	strb	r5, [r2, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800365e:	2201      	movs	r2, #1
 8003660:	4669      	mov	r1, sp
 8003662:	0020      	movs	r0, r4
 8003664:	f7ff fa88 	bl	8002b78 <HAL_RTC_SetDate>
}
 8003668:	b007      	add	sp, #28
 800366a:	bd30      	pop	{r4, r5, pc}
 800366c:	20000138 	.word	0x20000138
 8003670:	40002800 	.word	0x40002800

08003674 <MX_TIM17_Init>:
{
 8003674:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 8003676:	4809      	ldr	r0, [pc, #36]	; (800369c <MX_TIM17_Init+0x28>)
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <MX_TIM17_Init+0x2c>)
 800367a:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 2;
 800367c:	2302      	movs	r3, #2
 800367e:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003680:	2300      	movs	r3, #0
 8003682:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8003684:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <MX_TIM17_Init+0x30>)
 8003686:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	0092      	lsls	r2, r2, #2
 800368c:	6102      	str	r2, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 800368e:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003690:	3380      	adds	r3, #128	; 0x80
 8003692:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003694:	f7ff fc3c 	bl	8002f10 <HAL_TIM_Base_Init>
}
 8003698:	bd10      	pop	{r4, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	200000bc 	.word	0x200000bc
 80036a0:	40014800 	.word	0x40014800
 80036a4:	0000ffff 	.word	0x0000ffff

080036a8 <Count>:
{
 80036a8:	b570      	push	{r4, r5, r6, lr}
D1 = gTime.Minutes/10;
 80036aa:	4c10      	ldr	r4, [pc, #64]	; (80036ec <Count+0x44>)
 80036ac:	7865      	ldrb	r5, [r4, #1]
 80036ae:	210a      	movs	r1, #10
 80036b0:	0028      	movs	r0, r5
 80036b2:	f7fc fd29 	bl	8000108 <__udivsi3>
 80036b6:	b2c0      	uxtb	r0, r0
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <Count+0x48>)
 80036ba:	7018      	strb	r0, [r3, #0]
D2 = gTime.Minutes%10;
 80036bc:	210a      	movs	r1, #10
 80036be:	0028      	movs	r0, r5
 80036c0:	f7fc fda8 	bl	8000214 <__aeabi_uidivmod>
 80036c4:	b2c9      	uxtb	r1, r1
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <Count+0x4c>)
 80036c8:	7019      	strb	r1, [r3, #0]
D3 = gTime.Seconds/10;
 80036ca:	78a4      	ldrb	r4, [r4, #2]
 80036cc:	210a      	movs	r1, #10
 80036ce:	0020      	movs	r0, r4
 80036d0:	f7fc fd1a 	bl	8000108 <__udivsi3>
 80036d4:	b2c0      	uxtb	r0, r0
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <Count+0x50>)
 80036d8:	7018      	strb	r0, [r3, #0]
D4 = gTime.Seconds%10;
 80036da:	210a      	movs	r1, #10
 80036dc:	0020      	movs	r0, r4
 80036de:	f7fc fd99 	bl	8000214 <__aeabi_uidivmod>
 80036e2:	b2c9      	uxtb	r1, r1
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <Count+0x54>)
 80036e6:	7019      	strb	r1, [r3, #0]
}
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	20000120 	.word	0x20000120
 80036f0:	20000210 	.word	0x20000210
 80036f4:	20000134 	.word	0x20000134
 80036f8:	200000b4 	.word	0x200000b4
 80036fc:	20000158 	.word	0x20000158

08003700 <get_time>:
{
 8003700:	b510      	push	{r4, lr}
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003702:	4c06      	ldr	r4, [pc, #24]	; (800371c <get_time+0x1c>)
 8003704:	2200      	movs	r2, #0
 8003706:	4906      	ldr	r1, [pc, #24]	; (8003720 <get_time+0x20>)
 8003708:	0020      	movs	r0, r4
 800370a:	f7ff faab 	bl	8002c64 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800370e:	2200      	movs	r2, #0
 8003710:	4904      	ldr	r1, [pc, #16]	; (8003724 <get_time+0x24>)
 8003712:	0020      	movs	r0, r4
 8003714:	f7ff fad2 	bl	8002cbc <HAL_RTC_GetDate>
}
 8003718:	bd10      	pop	{r4, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	20000138 	.word	0x20000138
 8003720:	20000120 	.word	0x20000120
 8003724:	200000b0 	.word	0x200000b0

08003728 <HAL_TIM_PeriodElapsedCallback>:
{
 8003728:	b510      	push	{r4, lr}
 800372a:	b082      	sub	sp, #8
if(htim->Instance == htim17.Instance)
 800372c:	6802      	ldr	r2, [r0, #0]
 800372e:	4b38      	ldr	r3, [pc, #224]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d001      	beq.n	800373a <HAL_TIM_PeriodElapsedCallback+0x12>
}
 8003736:	b002      	add	sp, #8
 8003738:	bd10      	pop	{r4, pc}
 switch(MENU)
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b0a      	cmp	r3, #10
 8003742:	d8f8      	bhi.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003748:	58d3      	ldr	r3, [r2, r3]
 800374a:	469f      	mov	pc, r3
	Display_event(D1,D2,D3,D4,Blink_1HZ);
 800374c:	4b33      	ldr	r3, [pc, #204]	; (800381c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800374e:	7818      	ldrb	r0, [r3, #0]
 8003750:	b2c0      	uxtb	r0, r0
 8003752:	4b33      	ldr	r3, [pc, #204]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003754:	7819      	ldrb	r1, [r3, #0]
 8003756:	b2c9      	uxtb	r1, r1
 8003758:	4b32      	ldr	r3, [pc, #200]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	4b32      	ldr	r3, [pc, #200]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2400      	movs	r4, #0
 8003766:	9400      	str	r4, [sp, #0]
 8003768:	f7fd fd1a 	bl	80011a0 <Display_event>
    break;
 800376c:	e7e3      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
	Display_event(CHAR_A,CHAR_B,CHAR_C,CHAR_D,Blink_1_Digit);
 800376e:	2301      	movs	r3, #1
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	220c      	movs	r2, #12
 8003776:	210b      	movs	r1, #11
 8003778:	200a      	movs	r0, #10
 800377a:	f7fd fd11 	bl	80011a0 <Display_event>
	break;
 800377e:	e7da      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
    Display_event(CHAR_F,CHAR_G,CHAR_h,CHAR__,Blink_ALL_Digit);
 8003780:	2305      	movs	r3, #5
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	331f      	adds	r3, #31
 8003786:	2226      	movs	r2, #38	; 0x26
 8003788:	2110      	movs	r1, #16
 800378a:	200f      	movs	r0, #15
 800378c:	f7fd fd08 	bl	80011a0 <Display_event>
    break;
 8003790:	e7d1      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(9,10,11,12,Blink_3_Digit);
 8003792:	2303      	movs	r3, #3
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	3309      	adds	r3, #9
 8003798:	220b      	movs	r2, #11
 800379a:	210a      	movs	r1, #10
 800379c:	2009      	movs	r0, #9
 800379e:	f7fd fcff 	bl	80011a0 <Display_event>
	 break;
 80037a2:	e7c8      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(13,14,15,16,Blink_4_Digit);
 80037a4:	2304      	movs	r3, #4
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	220f      	movs	r2, #15
 80037ac:	210e      	movs	r1, #14
 80037ae:	200d      	movs	r0, #13
 80037b0:	f7fd fcf6 	bl	80011a0 <Display_event>
	 break;
 80037b4:	e7bf      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
	Display_event(17,18,19,20,5);
 80037b6:	2305      	movs	r3, #5
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	330f      	adds	r3, #15
 80037bc:	2213      	movs	r2, #19
 80037be:	2112      	movs	r1, #18
 80037c0:	2011      	movs	r0, #17
 80037c2:	f7fd fced 	bl	80011a0 <Display_event>
	break;
 80037c6:	e7b6      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(21,22,23,24,6);
 80037c8:	2306      	movs	r3, #6
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	3312      	adds	r3, #18
 80037ce:	2217      	movs	r2, #23
 80037d0:	2116      	movs	r1, #22
 80037d2:	2015      	movs	r0, #21
 80037d4:	f7fd fce4 	bl	80011a0 <Display_event>
	 break;
 80037d8:	e7ad      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(25,26,36,27,7);
 80037da:	2307      	movs	r3, #7
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	2224      	movs	r2, #36	; 0x24
 80037e2:	211a      	movs	r1, #26
 80037e4:	2019      	movs	r0, #25
 80037e6:	f7fd fcdb 	bl	80011a0 <Display_event>
	 break;
 80037ea:	e7a4      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(28,29,30,32,8);
 80037ec:	2308      	movs	r3, #8
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	3318      	adds	r3, #24
 80037f2:	221e      	movs	r2, #30
 80037f4:	211d      	movs	r1, #29
 80037f6:	201c      	movs	r0, #28
 80037f8:	f7fd fcd2 	bl	80011a0 <Display_event>
	 break;
 80037fc:	e79b      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(37,38,39,40,9);
 80037fe:	2309      	movs	r3, #9
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	331f      	adds	r3, #31
 8003804:	2227      	movs	r2, #39	; 0x27
 8003806:	2126      	movs	r1, #38	; 0x26
 8003808:	2025      	movs	r0, #37	; 0x25
 800380a:	f7fd fcc9 	bl	80011a0 <Display_event>
}
 800380e:	e792      	b.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xe>
 8003810:	200000bc 	.word	0x200000bc
 8003814:	20000001 	.word	0x20000001
 8003818:	08003ed8 	.word	0x08003ed8
 800381c:	20000210 	.word	0x20000210
 8003820:	20000134 	.word	0x20000134
 8003824:	200000b4 	.word	0x200000b4
 8003828:	20000158 	.word	0x20000158

0800382c <HAL_ADC_ConvCpltCallback>:
{
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 for (int i = 0; i<8;i++)
 800382e:	2300      	movs	r3, #0
 8003830:	e005      	b.n	800383e <HAL_ADC_ConvCpltCallback+0x12>
  adc_val[i]  = adc_buf[i]; //*calibration;  // store the values in adc_val from buffer
 8003832:	009a      	lsls	r2, r3, #2
 8003834:	4921      	ldr	r1, [pc, #132]	; (80038bc <HAL_ADC_ConvCpltCallback+0x90>)
 8003836:	5850      	ldr	r0, [r2, r1]
 8003838:	4921      	ldr	r1, [pc, #132]	; (80038c0 <HAL_ADC_ConvCpltCallback+0x94>)
 800383a:	5050      	str	r0, [r2, r1]
 for (int i = 0; i<8;i++)
 800383c:	3301      	adds	r3, #1
 800383e:	2b07      	cmp	r3, #7
 8003840:	ddf7      	ble.n	8003832 <HAL_ADC_ConvCpltCallback+0x6>
 Total_Sample += adc_val[0];
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_ADC_ConvCpltCallback+0x94>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <HAL_ADC_ConvCpltCallback+0x98>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4694      	mov	ip, r2
 800384c:	4460      	add	r0, ip
 800384e:	6018      	str	r0, [r3, #0]
 CT_Sample++;
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8003852:	8819      	ldrh	r1, [r3, #0]
 8003854:	3101      	adds	r1, #1
 8003856:	b289      	uxth	r1, r1
 8003858:	8019      	strh	r1, [r3, #0]
 if(CT_Sample >= 200)
 800385a:	29c7      	cmp	r1, #199	; 0xc7
 800385c:	d92c      	bls.n	80038b8 <HAL_ADC_ConvCpltCallback+0x8c>
	 CT_Out  = Total_Sample/CT_Sample;
 800385e:	f7fc fcdd 	bl	800021c <__divsi3>
 8003862:	0004      	movs	r4, r0
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_ADC_ConvCpltCallback+0xa0>)
 8003866:	6018      	str	r0, [r3, #0]
	 Vdd[0]      = (3.3 *(*VREFINT_CAL_ADDR)*CT_Out)/(adc_val[7]*4095);
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_ADC_ConvCpltCallback+0xa4>)
 800386a:	8818      	ldrh	r0, [r3, #0]
 800386c:	f7fd fb76 	bl	8000f5c <__aeabi_i2d>
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_ADC_ConvCpltCallback+0xac>)
 8003874:	f7fd f8f2 	bl	8000a5c <__aeabi_dmul>
 8003878:	0006      	movs	r6, r0
 800387a:	000f      	movs	r7, r1
 800387c:	0020      	movs	r0, r4
 800387e:	f7fd fbaf 	bl	8000fe0 <__aeabi_ui2d>
 8003882:	0032      	movs	r2, r6
 8003884:	003b      	movs	r3, r7
 8003886:	f7fd f8e9 	bl	8000a5c <__aeabi_dmul>
 800388a:	0004      	movs	r4, r0
 800388c:	000d      	movs	r5, r1
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_ADC_ConvCpltCallback+0x94>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	0318      	lsls	r0, r3, #12
 8003894:	1ac0      	subs	r0, r0, r3
 8003896:	f7fd fba3 	bl	8000fe0 <__aeabi_ui2d>
 800389a:	0002      	movs	r2, r0
 800389c:	000b      	movs	r3, r1
 800389e:	0020      	movs	r0, r4
 80038a0:	0029      	movs	r1, r5
 80038a2:	f7fc fda7 	bl	80003f4 <__aeabi_ddiv>
 80038a6:	f7fd fbd3 	bl	8001050 <__aeabi_d2f>
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_ADC_ConvCpltCallback+0xb0>)
 80038ac:	6018      	str	r0, [r3, #0]
	 Total_Sample = 0 ;
 80038ae:	2300      	movs	r3, #0
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_ADC_ConvCpltCallback+0x98>)
 80038b2:	6013      	str	r3, [r2, #0]
	 CT_Sample    = 0 ;
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_ADC_ConvCpltCallback+0x9c>)
 80038b6:	8013      	strh	r3, [r2, #0]
}
 80038b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	2000015c 	.word	0x2000015c
 80038c0:	20000090 	.word	0x20000090
 80038c4:	2000017c 	.word	0x2000017c
 80038c8:	20000066 	.word	0x20000066
 80038cc:	200000fc 	.word	0x200000fc
 80038d0:	1ffff7ba 	.word	0x1ffff7ba
 80038d4:	66666666 	.word	0x66666666
 80038d8:	400a6666 	.word	0x400a6666
 80038dc:	20000100 	.word	0x20000100

080038e0 <SystemClock_Config>:
{
 80038e0:	b530      	push	{r4, r5, lr}
 80038e2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80038e4:	231a      	movs	r3, #26
 80038e6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038e8:	3b19      	subs	r3, #25
 80038ea:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80038ec:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80038ee:	2210      	movs	r2, #16
 80038f0:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80038f2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80038f4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038f6:	2502      	movs	r5, #2
 80038f8:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038fa:	2400      	movs	r4, #0
 80038fc:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80038fe:	23c0      	movs	r3, #192	; 0xc0
 8003900:	035b      	lsls	r3, r3, #13
 8003902:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003904:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003906:	a808      	add	r0, sp, #32
 8003908:	f7fe fc7c 	bl	8002204 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800390c:	2307      	movs	r3, #7
 800390e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003910:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003912:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003914:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003916:	2101      	movs	r1, #1
 8003918:	a804      	add	r0, sp, #16
 800391a:	f7fe fecf 	bl	80026bc <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	025b      	lsls	r3, r3, #9
 8003922:	9300      	str	r3, [sp, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800392a:	4668      	mov	r0, sp
 800392c:	f7fe ff76 	bl	800281c <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003930:	f7fe ff6e 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8003934:	21fa      	movs	r1, #250	; 0xfa
 8003936:	0089      	lsls	r1, r1, #2
 8003938:	f7fc fbe6 	bl	8000108 <__udivsi3>
 800393c:	f7fe f940 	bl	8001bc0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003940:	2004      	movs	r0, #4
 8003942:	f7fe f959 	bl	8001bf8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	2001      	movs	r0, #1
 800394c:	4240      	negs	r0, r0
 800394e:	f7fe f8fb 	bl	8001b48 <HAL_NVIC_SetPriority>
}
 8003952:	b015      	add	sp, #84	; 0x54
 8003954:	bd30      	pop	{r4, r5, pc}
	...

08003958 <main>:
{
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 800395a:	f7fd fe6b 	bl	8001634 <HAL_Init>
  SystemClock_Config();
 800395e:	f7ff ffbf 	bl	80038e0 <SystemClock_Config>
  HAL_FLASH_Unlock();
 8003962:	f7fe fa71 	bl	8001e48 <HAL_FLASH_Unlock>
  EE_Init();
 8003966:	f7ff fbd1 	bl	800310c <EE_Init>
  MX_GPIO_Init();
 800396a:	f7ff fd7f 	bl	800346c <MX_GPIO_Init>
  MX_DMA_Init();
 800396e:	f7ff fde7 	bl	8003540 <MX_DMA_Init>
  MX_ADC_Init();
 8003972:	f7ff fdfd 	bl	8003570 <MX_ADC_Init>
  MX_RTC_Init();
 8003976:	f7ff fe51 	bl	800361c <MX_RTC_Init>
  MX_TIM17_Init();
 800397a:	f7ff fe7b 	bl	8003674 <MX_TIM17_Init>
    EE_ReadVariable(VirtAddVarTab[9], &VarDataTab[9]);
 800397e:	4d37      	ldr	r5, [pc, #220]	; (8003a5c <main+0x104>)
 8003980:	002e      	movs	r6, r5
 8003982:	3612      	adds	r6, #18
 8003984:	4c36      	ldr	r4, [pc, #216]	; (8003a60 <main+0x108>)
 8003986:	8a60      	ldrh	r0, [r4, #18]
 8003988:	0031      	movs	r1, r6
 800398a:	f7ff fb8b 	bl	80030a4 <EE_ReadVariable>
     VarValue  = VarDataTab[9];
 800398e:	8a69      	ldrh	r1, [r5, #18]
    EE_WriteVariable(VirtAddVarTab[7], VarValue++);
 8003990:	89e0      	ldrh	r0, [r4, #14]
 8003992:	4f34      	ldr	r7, [pc, #208]	; (8003a64 <main+0x10c>)
 8003994:	1c4b      	adds	r3, r1, #1
 8003996:	803b      	strh	r3, [r7, #0]
 8003998:	f7ff fd5a 	bl	8003450 <EE_WriteVariable>
    EE_WriteVariable(VirtAddVarTab[8], VarValue++);
 800399c:	8a20      	ldrh	r0, [r4, #16]
 800399e:	8839      	ldrh	r1, [r7, #0]
 80039a0:	1c4b      	adds	r3, r1, #1
 80039a2:	803b      	strh	r3, [r7, #0]
 80039a4:	f7ff fd54 	bl	8003450 <EE_WriteVariable>
    EE_WriteVariable(VirtAddVarTab[9], VarValue++);
 80039a8:	8a60      	ldrh	r0, [r4, #18]
 80039aa:	8839      	ldrh	r1, [r7, #0]
 80039ac:	1c4b      	adds	r3, r1, #1
 80039ae:	803b      	strh	r3, [r7, #0]
 80039b0:	f7ff fd4e 	bl	8003450 <EE_WriteVariable>
    EE_ReadVariable(VirtAddVarTab[7], &VarDataTab[7]);
 80039b4:	0029      	movs	r1, r5
 80039b6:	310e      	adds	r1, #14
 80039b8:	89e0      	ldrh	r0, [r4, #14]
 80039ba:	f7ff fb73 	bl	80030a4 <EE_ReadVariable>
    EE_ReadVariable(VirtAddVarTab[8], &VarDataTab[8]);
 80039be:	0029      	movs	r1, r5
 80039c0:	3110      	adds	r1, #16
 80039c2:	8a20      	ldrh	r0, [r4, #16]
 80039c4:	f7ff fb6e 	bl	80030a4 <EE_ReadVariable>
    EE_ReadVariable(VirtAddVarTab[9], &VarDataTab[9]);
 80039c8:	8a60      	ldrh	r0, [r4, #18]
 80039ca:	0031      	movs	r1, r6
 80039cc:	f7ff fb6a 	bl	80030a4 <EE_ReadVariable>
  HAL_TIM_Base_Start_IT(&htim17);
 80039d0:	4825      	ldr	r0, [pc, #148]	; (8003a68 <main+0x110>)
 80039d2:	f7ff f997 	bl	8002d04 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA (&hadc, (uint32_t *)adc_buf, 8);
 80039d6:	2208      	movs	r2, #8
 80039d8:	4924      	ldr	r1, [pc, #144]	; (8003a6c <main+0x114>)
 80039da:	4825      	ldr	r0, [pc, #148]	; (8003a70 <main+0x118>)
 80039dc:	f7fd ff7a 	bl	80018d4 <HAL_ADC_Start_DMA>
 80039e0:	e009      	b.n	80039f6 <main+0x9e>
			HAL_Delay(1000);
 80039e2:	20fa      	movs	r0, #250	; 0xfa
 80039e4:	0080      	lsls	r0, r0, #2
 80039e6:	f7fd fe43 	bl	8001670 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB ,SW_down_Pin)==0)
 80039ea:	2108      	movs	r1, #8
 80039ec:	4821      	ldr	r0, [pc, #132]	; (8003a74 <main+0x11c>)
 80039ee:	f7fe fbf7 	bl	80021e0 <HAL_GPIO_ReadPin>
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d02b      	beq.n	8003a4e <main+0xf6>
	  get_time();
 80039f6:	f7ff fe83 	bl	8003700 <get_time>
	  Count  ();
 80039fa:	f7ff fe55 	bl	80036a8 <Count>
		if((HAL_GPIO_ReadPin(GPIOB ,SW_menu_Pin)==0)) //||
 80039fe:	2120      	movs	r1, #32
 8003a00:	481c      	ldr	r0, [pc, #112]	; (8003a74 <main+0x11c>)
 8003a02:	f7fe fbed 	bl	80021e0 <HAL_GPIO_ReadPin>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d10f      	bne.n	8003a2a <main+0xd2>
			MENU++;
 8003a0a:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <main+0x120>)
 8003a0c:	7813      	ldrb	r3, [r2, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	7013      	strb	r3, [r2, #0]
			if(MENU>10)
 8003a14:	7813      	ldrb	r3, [r2, #0]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b0a      	cmp	r3, #10
 8003a1a:	d902      	bls.n	8003a22 <main+0xca>
			 MENU=1;
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <main+0x120>)
 8003a20:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8003a22:	20fa      	movs	r0, #250	; 0xfa
 8003a24:	0080      	lsls	r0, r0, #2
 8003a26:	f7fd fe23 	bl	8001670 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB ,SW_up_Pin)==0)
 8003a2a:	2110      	movs	r1, #16
 8003a2c:	4811      	ldr	r0, [pc, #68]	; (8003a74 <main+0x11c>)
 8003a2e:	f7fe fbd7 	bl	80021e0 <HAL_GPIO_ReadPin>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d1d9      	bne.n	80039ea <main+0x92>
			MENU--;
 8003a36:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <main+0x120>)
 8003a38:	7813      	ldrb	r3, [r2, #0]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	7013      	strb	r3, [r2, #0]
			if(MENU<=0)
 8003a40:	7813      	ldrb	r3, [r2, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1cd      	bne.n	80039e2 <main+0x8a>
			 MENU=10;
 8003a46:	220a      	movs	r2, #10
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <main+0x120>)
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e7c9      	b.n	80039e2 <main+0x8a>
			HAL_GPIO_TogglePin(GPIOB ,BUZZER_Pin);
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	00c9      	lsls	r1, r1, #3
 8003a52:	4808      	ldr	r0, [pc, #32]	; (8003a74 <main+0x11c>)
 8003a54:	f7fe fbd1 	bl	80021fa <HAL_GPIO_TogglePin>
 8003a58:	e7cd      	b.n	80039f6 <main+0x9e>
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	20000004 	.word	0x20000004
 8003a60:	20000024 	.word	0x20000024
 8003a64:	20000068 	.word	0x20000068
 8003a68:	200000bc 	.word	0x200000bc
 8003a6c:	2000015c 	.word	0x2000015c
 8003a70:	200001c4 	.word	0x200001c4
 8003a74:	48000400 	.word	0x48000400
 8003a78:	20000001 	.word	0x20000001

08003a7c <_Error_Handler>:
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a80:	b500      	push	{lr}
 8003a82:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_MspInit+0x50>)
 8003a86:	6999      	ldr	r1, [r3, #24]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	6199      	str	r1, [r3, #24]
 8003a8e:	6999      	ldr	r1, [r3, #24]
 8003a90:	400a      	ands	r2, r1
 8003a92:	9200      	str	r2, [sp, #0]
 8003a94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	0549      	lsls	r1, r1, #21
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	61da      	str	r2, [r3, #28]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	2005      	movs	r0, #5
 8003aae:	4240      	negs	r0, r0
 8003ab0:	f7fe f84a 	bl	8001b48 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	2002      	movs	r0, #2
 8003aba:	4240      	negs	r0, r0
 8003abc:	f7fe f844 	bl	8001b48 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	4240      	negs	r0, r0
 8003ac8:	f7fe f83e 	bl	8001b48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003acc:	b003      	add	sp, #12
 8003ace:	bd00      	pop	{pc}
 8003ad0:	40021000 	.word	0x40021000

08003ad4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_ADC_MspInit+0x74>)
 8003adc:	6802      	ldr	r2, [r0, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d001      	beq.n	8003ae6 <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ae2:	b006      	add	sp, #24
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_ADC_MspInit+0x78>)
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	2680      	movs	r6, #128	; 0x80
 8003aec:	00b6      	lsls	r6, r6, #2
 8003aee:	4332      	orrs	r2, r6
 8003af0:	619a      	str	r2, [r3, #24]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4033      	ands	r3, r6
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003afa:	233f      	movs	r3, #63	; 0x3f
 8003afc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003afe:	3b3c      	subs	r3, #60	; 0x3c
 8003b00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2500      	movs	r5, #0
 8003b04:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	a901      	add	r1, sp, #4
 8003b08:	2090      	movs	r0, #144	; 0x90
 8003b0a:	05c0      	lsls	r0, r0, #23
 8003b0c:	f7fe faa2 	bl	8002054 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8003b10:	480f      	ldr	r0, [pc, #60]	; (8003b50 <HAL_ADC_MspInit+0x7c>)
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <HAL_ADC_MspInit+0x80>)
 8003b14:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b16:	6045      	str	r5, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b18:	6085      	str	r5, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b1e:	6106      	str	r6, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003b26:	2320      	movs	r3, #32
 8003b28:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003b2a:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003b2c:	f7fe f8a2 	bl	8001c74 <HAL_DMA_Init>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d103      	bne.n	8003b3c <HAL_ADC_MspInit+0x68>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_ADC_MspInit+0x7c>)
 8003b36:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003b38:	625c      	str	r4, [r3, #36]	; 0x24
}
 8003b3a:	e7d2      	b.n	8003ae2 <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8003b3c:	216e      	movs	r1, #110	; 0x6e
 8003b3e:	4806      	ldr	r0, [pc, #24]	; (8003b58 <HAL_ADC_MspInit+0x84>)
 8003b40:	f7ff ff9c 	bl	8003a7c <_Error_Handler>
 8003b44:	e7f6      	b.n	8003b34 <HAL_ADC_MspInit+0x60>
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	40012400 	.word	0x40012400
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	20000180 	.word	0x20000180
 8003b54:	40020008 	.word	0x40020008
 8003b58:	08003f04 	.word	0x08003f04

08003b5c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8003b5c:	6802      	ldr	r2, [r0, #0]
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RTC_MspInit+0x18>)
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d000      	beq.n	8003b66 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b64:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_RTC_MspInit+0x1c>)
 8003b68:	6a11      	ldr	r1, [r2, #32]
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6213      	str	r3, [r2, #32]
}
 8003b72:	e7f7      	b.n	8003b64 <HAL_RTC_MspInit+0x8>
 8003b74:	40002800 	.word	0x40002800
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b7c:	b500      	push	{lr}
 8003b7e:	b083      	sub	sp, #12

  if(htim_base->Instance==TIM17)
 8003b80:	6802      	ldr	r2, [r0, #0]
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_TIM_Base_MspInit+0x38>)
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003b88:	b003      	add	sp, #12
 8003b8a:	bd00      	pop	{pc}
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8003b8e:	6991      	ldr	r1, [r2, #24]
 8003b90:	2080      	movs	r0, #128	; 0x80
 8003b92:	02c0      	lsls	r0, r0, #11
 8003b94:	4301      	orrs	r1, r0
 8003b96:	6191      	str	r1, [r2, #24]
 8003b98:	6993      	ldr	r3, [r2, #24]
 8003b9a:	4003      	ands	r3, r0
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	2016      	movs	r0, #22
 8003ba6:	f7fd ffcf 	bl	8001b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003baa:	2016      	movs	r0, #22
 8003bac:	f7fd fffe 	bl	8001bac <HAL_NVIC_EnableIRQ>
}
 8003bb0:	e7ea      	b.n	8003b88 <HAL_TIM_Base_MspInit+0xc>
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	40021000 	.word	0x40021000

08003bbc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bbc:	4770      	bx	lr

08003bbe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003bbe:	e7fe      	b.n	8003bbe <HardFault_Handler>

08003bc0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003bc0:	4770      	bx	lr

08003bc2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bc2:	4770      	bx	lr

08003bc4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003bc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc6:	f7fd fd45 	bl	8001654 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003bca:	f7fe f826 	bl	8001c1a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bce:	bd10      	pop	{r4, pc}

08003bd0 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8003bd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003bd2:	4802      	ldr	r0, [pc, #8]	; (8003bdc <DMA1_Channel1_IRQHandler+0xc>)
 8003bd4:	f7fe f8b5 	bl	8001d42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bd8:	bd10      	pop	{r4, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	20000180 	.word	0x20000180

08003be0 <TIM17_IRQHandler>:

/**
* @brief This function handles TIM17 global interrupt.
*/
void TIM17_IRQHandler(void)
{
 8003be0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003be2:	4802      	ldr	r0, [pc, #8]	; (8003bec <TIM17_IRQHandler+0xc>)
 8003be4:	f7ff f89d 	bl	8002d22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	200000bc 	.word	0x200000bc

08003bf0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <SystemInit+0x48>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	480f      	ldr	r0, [pc, #60]	; (8003c3c <SystemInit+0x4c>)
 8003bfe:	4002      	ands	r2, r0
 8003c00:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	480e      	ldr	r0, [pc, #56]	; (8003c40 <SystemInit+0x50>)
 8003c06:	4002      	ands	r2, r0
 8003c08:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	480d      	ldr	r0, [pc, #52]	; (8003c44 <SystemInit+0x54>)
 8003c0e:	4002      	ands	r2, r0
 8003c10:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	480c      	ldr	r0, [pc, #48]	; (8003c48 <SystemInit+0x58>)
 8003c16:	4002      	ands	r2, r0
 8003c18:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	200f      	movs	r0, #15
 8003c1e:	4382      	bics	r2, r0
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c24:	4809      	ldr	r0, [pc, #36]	; (8003c4c <SystemInit+0x5c>)
 8003c26:	4002      	ands	r2, r0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c2c:	438a      	bics	r2, r1
 8003c2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]

}
 8003c34:	4770      	bx	lr
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	08ffb80c 	.word	0x08ffb80c
 8003c40:	fef6ffff 	.word	0xfef6ffff
 8003c44:	fffbffff 	.word	0xfffbffff
 8003c48:	ffc0ffff 	.word	0xffc0ffff
 8003c4c:	fffffeec 	.word	0xfffffeec

08003c50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c50:	480d      	ldr	r0, [pc, #52]	; (8003c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c54:	480d      	ldr	r0, [pc, #52]	; (8003c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8003c56:	490e      	ldr	r1, [pc, #56]	; (8003c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c58:	4a0e      	ldr	r2, [pc, #56]	; (8003c94 <LoopForever+0xe>)
  movs r3, #0
 8003c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c5c:	e002      	b.n	8003c64 <LoopCopyDataInit>

08003c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c62:	3304      	adds	r3, #4

08003c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c68:	d3f9      	bcc.n	8003c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c6a:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c6c:	4c0b      	ldr	r4, [pc, #44]	; (8003c9c <LoopForever+0x16>)
  movs r3, #0
 8003c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c70:	e001      	b.n	8003c76 <LoopFillZerobss>

08003c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c74:	3204      	adds	r2, #4

08003c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c78:	d3fb      	bcc.n	8003c72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c7a:	f7ff ffb9 	bl	8003bf0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003c7e:	f000 f811 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c82:	f7ff fe69 	bl	8003958 <main>

08003c86 <LoopForever>:

LoopForever:
    b LoopForever
 8003c86:	e7fe      	b.n	8003c86 <LoopForever>
  ldr   r0, =_estack
 8003c88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c90:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8003c94:	08003f38 	.word	0x08003f38
  ldr r2, =_sbss
 8003c98:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8003c9c:	20000214 	.word	0x20000214

08003ca0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ca0:	e7fe      	b.n	8003ca0 <ADC1_IRQHandler>
	...

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	4d0c      	ldr	r5, [pc, #48]	; (8003cdc <__libc_init_array+0x38>)
 8003caa:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <__libc_init_array+0x3c>)
 8003cac:	1b64      	subs	r4, r4, r5
 8003cae:	10a4      	asrs	r4, r4, #2
 8003cb0:	42a6      	cmp	r6, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	f000 f819 	bl	8003cec <_init>
 8003cba:	4d0a      	ldr	r5, [pc, #40]	; (8003ce4 <__libc_init_array+0x40>)
 8003cbc:	4c0a      	ldr	r4, [pc, #40]	; (8003ce8 <__libc_init_array+0x44>)
 8003cbe:	1b64      	subs	r4, r4, r5
 8003cc0:	10a4      	asrs	r4, r4, #2
 8003cc2:	42a6      	cmp	r6, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	00b3      	lsls	r3, r6, #2
 8003cca:	58eb      	ldr	r3, [r5, r3]
 8003ccc:	4798      	blx	r3
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	00b3      	lsls	r3, r6, #2
 8003cd4:	58eb      	ldr	r3, [r5, r3]
 8003cd6:	4798      	blx	r3
 8003cd8:	3601      	adds	r6, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	08003f30 	.word	0x08003f30
 8003ce0:	08003f30 	.word	0x08003f30
 8003ce4:	08003f30 	.word	0x08003f30
 8003ce8:	08003f34 	.word	0x08003f34

08003cec <_init>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr

08003cf8 <_fini>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr
