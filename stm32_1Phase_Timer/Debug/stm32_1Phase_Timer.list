
stm32_1Phase_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004890  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000004c  20000000  08004b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000194  20000050  08004bd0  00020050  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200001e4  08004bd0  000201e4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016a1c  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f5f  00000000  00000000  00036a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008dcb  00000000  00000000  000399ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b70  00000000  00000000  000427c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bd0  00000000  00000000  00043330  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000634a  00000000  00000000  00043f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003b4a  00000000  00000000  0004a24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004dd94  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002004  00000000  00000000  0004de10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000050 	.word	0x20000050
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004938 	.word	0x08004938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000054 	.word	0x20000054
 8000104:	08004938 	.word	0x08004938

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f847 	bl	8001498 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 ffa1 	bl	800135c <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f839 	bl	8001498 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f82f 	bl	8001498 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffc1 	bl	80013d0 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ffb7 	bl	80013d0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f899 	bl	80005b0 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f82b 	bl	80004e4 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f88b 	bl	80005b0 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f881 	bl	80005b0 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f837 	bl	8000530 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f82d 	bl	8000530 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__eqsf2>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0042      	lsls	r2, r0, #1
 80004e8:	0245      	lsls	r5, r0, #9
 80004ea:	024e      	lsls	r6, r1, #9
 80004ec:	004c      	lsls	r4, r1, #1
 80004ee:	0fc3      	lsrs	r3, r0, #31
 80004f0:	0a6d      	lsrs	r5, r5, #9
 80004f2:	0e12      	lsrs	r2, r2, #24
 80004f4:	0a76      	lsrs	r6, r6, #9
 80004f6:	0e24      	lsrs	r4, r4, #24
 80004f8:	0fc9      	lsrs	r1, r1, #31
 80004fa:	2001      	movs	r0, #1
 80004fc:	2aff      	cmp	r2, #255	; 0xff
 80004fe:	d006      	beq.n	800050e <__eqsf2+0x2a>
 8000500:	2cff      	cmp	r4, #255	; 0xff
 8000502:	d003      	beq.n	800050c <__eqsf2+0x28>
 8000504:	42a2      	cmp	r2, r4
 8000506:	d101      	bne.n	800050c <__eqsf2+0x28>
 8000508:	42b5      	cmp	r5, r6
 800050a:	d006      	beq.n	800051a <__eqsf2+0x36>
 800050c:	bd70      	pop	{r4, r5, r6, pc}
 800050e:	2d00      	cmp	r5, #0
 8000510:	d1fc      	bne.n	800050c <__eqsf2+0x28>
 8000512:	2cff      	cmp	r4, #255	; 0xff
 8000514:	d1fa      	bne.n	800050c <__eqsf2+0x28>
 8000516:	2e00      	cmp	r6, #0
 8000518:	d1f8      	bne.n	800050c <__eqsf2+0x28>
 800051a:	428b      	cmp	r3, r1
 800051c:	d006      	beq.n	800052c <__eqsf2+0x48>
 800051e:	2001      	movs	r0, #1
 8000520:	2a00      	cmp	r2, #0
 8000522:	d1f3      	bne.n	800050c <__eqsf2+0x28>
 8000524:	0028      	movs	r0, r5
 8000526:	1e45      	subs	r5, r0, #1
 8000528:	41a8      	sbcs	r0, r5
 800052a:	e7ef      	b.n	800050c <__eqsf2+0x28>
 800052c:	2000      	movs	r0, #0
 800052e:	e7ed      	b.n	800050c <__eqsf2+0x28>

08000530 <__gesf2>:
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	0042      	lsls	r2, r0, #1
 8000534:	0245      	lsls	r5, r0, #9
 8000536:	024c      	lsls	r4, r1, #9
 8000538:	0fc3      	lsrs	r3, r0, #31
 800053a:	0048      	lsls	r0, r1, #1
 800053c:	0a6d      	lsrs	r5, r5, #9
 800053e:	0e12      	lsrs	r2, r2, #24
 8000540:	0a64      	lsrs	r4, r4, #9
 8000542:	0e00      	lsrs	r0, r0, #24
 8000544:	0fc9      	lsrs	r1, r1, #31
 8000546:	2aff      	cmp	r2, #255	; 0xff
 8000548:	d01e      	beq.n	8000588 <__gesf2+0x58>
 800054a:	28ff      	cmp	r0, #255	; 0xff
 800054c:	d021      	beq.n	8000592 <__gesf2+0x62>
 800054e:	2a00      	cmp	r2, #0
 8000550:	d10a      	bne.n	8000568 <__gesf2+0x38>
 8000552:	426e      	negs	r6, r5
 8000554:	416e      	adcs	r6, r5
 8000556:	b2f6      	uxtb	r6, r6
 8000558:	2800      	cmp	r0, #0
 800055a:	d10f      	bne.n	800057c <__gesf2+0x4c>
 800055c:	2c00      	cmp	r4, #0
 800055e:	d10d      	bne.n	800057c <__gesf2+0x4c>
 8000560:	2000      	movs	r0, #0
 8000562:	2d00      	cmp	r5, #0
 8000564:	d009      	beq.n	800057a <__gesf2+0x4a>
 8000566:	e005      	b.n	8000574 <__gesf2+0x44>
 8000568:	2800      	cmp	r0, #0
 800056a:	d101      	bne.n	8000570 <__gesf2+0x40>
 800056c:	2c00      	cmp	r4, #0
 800056e:	d001      	beq.n	8000574 <__gesf2+0x44>
 8000570:	428b      	cmp	r3, r1
 8000572:	d011      	beq.n	8000598 <__gesf2+0x68>
 8000574:	2101      	movs	r1, #1
 8000576:	4258      	negs	r0, r3
 8000578:	4308      	orrs	r0, r1
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	2e00      	cmp	r6, #0
 800057e:	d0f7      	beq.n	8000570 <__gesf2+0x40>
 8000580:	2001      	movs	r0, #1
 8000582:	3901      	subs	r1, #1
 8000584:	4308      	orrs	r0, r1
 8000586:	e7f8      	b.n	800057a <__gesf2+0x4a>
 8000588:	2d00      	cmp	r5, #0
 800058a:	d0de      	beq.n	800054a <__gesf2+0x1a>
 800058c:	2002      	movs	r0, #2
 800058e:	4240      	negs	r0, r0
 8000590:	e7f3      	b.n	800057a <__gesf2+0x4a>
 8000592:	2c00      	cmp	r4, #0
 8000594:	d0db      	beq.n	800054e <__gesf2+0x1e>
 8000596:	e7f9      	b.n	800058c <__gesf2+0x5c>
 8000598:	4282      	cmp	r2, r0
 800059a:	dceb      	bgt.n	8000574 <__gesf2+0x44>
 800059c:	db04      	blt.n	80005a8 <__gesf2+0x78>
 800059e:	42a5      	cmp	r5, r4
 80005a0:	d8e8      	bhi.n	8000574 <__gesf2+0x44>
 80005a2:	2000      	movs	r0, #0
 80005a4:	42a5      	cmp	r5, r4
 80005a6:	d2e8      	bcs.n	800057a <__gesf2+0x4a>
 80005a8:	2101      	movs	r1, #1
 80005aa:	1e58      	subs	r0, r3, #1
 80005ac:	4308      	orrs	r0, r1
 80005ae:	e7e4      	b.n	800057a <__gesf2+0x4a>

080005b0 <__lesf2>:
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	0042      	lsls	r2, r0, #1
 80005b4:	024d      	lsls	r5, r1, #9
 80005b6:	004c      	lsls	r4, r1, #1
 80005b8:	0246      	lsls	r6, r0, #9
 80005ba:	0a76      	lsrs	r6, r6, #9
 80005bc:	0e12      	lsrs	r2, r2, #24
 80005be:	0fc3      	lsrs	r3, r0, #31
 80005c0:	0a6d      	lsrs	r5, r5, #9
 80005c2:	0e24      	lsrs	r4, r4, #24
 80005c4:	0fc9      	lsrs	r1, r1, #31
 80005c6:	2aff      	cmp	r2, #255	; 0xff
 80005c8:	d016      	beq.n	80005f8 <__lesf2+0x48>
 80005ca:	2cff      	cmp	r4, #255	; 0xff
 80005cc:	d018      	beq.n	8000600 <__lesf2+0x50>
 80005ce:	2a00      	cmp	r2, #0
 80005d0:	d10a      	bne.n	80005e8 <__lesf2+0x38>
 80005d2:	4270      	negs	r0, r6
 80005d4:	4170      	adcs	r0, r6
 80005d6:	b2c0      	uxtb	r0, r0
 80005d8:	2c00      	cmp	r4, #0
 80005da:	d015      	beq.n	8000608 <__lesf2+0x58>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d005      	beq.n	80005ec <__lesf2+0x3c>
 80005e0:	2001      	movs	r0, #1
 80005e2:	3901      	subs	r1, #1
 80005e4:	4308      	orrs	r0, r1
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	2c00      	cmp	r4, #0
 80005ea:	d013      	beq.n	8000614 <__lesf2+0x64>
 80005ec:	4299      	cmp	r1, r3
 80005ee:	d014      	beq.n	800061a <__lesf2+0x6a>
 80005f0:	2001      	movs	r0, #1
 80005f2:	425b      	negs	r3, r3
 80005f4:	4318      	orrs	r0, r3
 80005f6:	e7f6      	b.n	80005e6 <__lesf2+0x36>
 80005f8:	2002      	movs	r0, #2
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d1f3      	bne.n	80005e6 <__lesf2+0x36>
 80005fe:	e7e4      	b.n	80005ca <__lesf2+0x1a>
 8000600:	2002      	movs	r0, #2
 8000602:	2d00      	cmp	r5, #0
 8000604:	d1ef      	bne.n	80005e6 <__lesf2+0x36>
 8000606:	e7e2      	b.n	80005ce <__lesf2+0x1e>
 8000608:	2d00      	cmp	r5, #0
 800060a:	d1e7      	bne.n	80005dc <__lesf2+0x2c>
 800060c:	2000      	movs	r0, #0
 800060e:	2e00      	cmp	r6, #0
 8000610:	d0e9      	beq.n	80005e6 <__lesf2+0x36>
 8000612:	e7ed      	b.n	80005f0 <__lesf2+0x40>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d1e9      	bne.n	80005ec <__lesf2+0x3c>
 8000618:	e7ea      	b.n	80005f0 <__lesf2+0x40>
 800061a:	42a2      	cmp	r2, r4
 800061c:	dc06      	bgt.n	800062c <__lesf2+0x7c>
 800061e:	dbdf      	blt.n	80005e0 <__lesf2+0x30>
 8000620:	42ae      	cmp	r6, r5
 8000622:	d803      	bhi.n	800062c <__lesf2+0x7c>
 8000624:	2000      	movs	r0, #0
 8000626:	42ae      	cmp	r6, r5
 8000628:	d3da      	bcc.n	80005e0 <__lesf2+0x30>
 800062a:	e7dc      	b.n	80005e6 <__lesf2+0x36>
 800062c:	2001      	movs	r0, #1
 800062e:	4249      	negs	r1, r1
 8000630:	4308      	orrs	r0, r1
 8000632:	e7d8      	b.n	80005e6 <__lesf2+0x36>

08000634 <__aeabi_i2f>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2800      	cmp	r0, #0
 8000638:	d030      	beq.n	800069c <__aeabi_i2f+0x68>
 800063a:	17c3      	asrs	r3, r0, #31
 800063c:	18c4      	adds	r4, r0, r3
 800063e:	405c      	eors	r4, r3
 8000640:	0fc5      	lsrs	r5, r0, #31
 8000642:	0020      	movs	r0, r4
 8000644:	f001 fb28 	bl	8001c98 <__clzsi2>
 8000648:	239e      	movs	r3, #158	; 0x9e
 800064a:	1a1b      	subs	r3, r3, r0
 800064c:	2b96      	cmp	r3, #150	; 0x96
 800064e:	dc0d      	bgt.n	800066c <__aeabi_i2f+0x38>
 8000650:	2296      	movs	r2, #150	; 0x96
 8000652:	1ad2      	subs	r2, r2, r3
 8000654:	4094      	lsls	r4, r2
 8000656:	002a      	movs	r2, r5
 8000658:	0264      	lsls	r4, r4, #9
 800065a:	0a64      	lsrs	r4, r4, #9
 800065c:	b2db      	uxtb	r3, r3
 800065e:	0264      	lsls	r4, r4, #9
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0a60      	lsrs	r0, r4, #9
 8000664:	07d2      	lsls	r2, r2, #31
 8000666:	4318      	orrs	r0, r3
 8000668:	4310      	orrs	r0, r2
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	2b99      	cmp	r3, #153	; 0x99
 800066e:	dc19      	bgt.n	80006a4 <__aeabi_i2f+0x70>
 8000670:	2299      	movs	r2, #153	; 0x99
 8000672:	1ad2      	subs	r2, r2, r3
 8000674:	2a00      	cmp	r2, #0
 8000676:	dd29      	ble.n	80006cc <__aeabi_i2f+0x98>
 8000678:	4094      	lsls	r4, r2
 800067a:	0022      	movs	r2, r4
 800067c:	4c14      	ldr	r4, [pc, #80]	; (80006d0 <__aeabi_i2f+0x9c>)
 800067e:	4014      	ands	r4, r2
 8000680:	0751      	lsls	r1, r2, #29
 8000682:	d004      	beq.n	800068e <__aeabi_i2f+0x5a>
 8000684:	210f      	movs	r1, #15
 8000686:	400a      	ands	r2, r1
 8000688:	2a04      	cmp	r2, #4
 800068a:	d000      	beq.n	800068e <__aeabi_i2f+0x5a>
 800068c:	3404      	adds	r4, #4
 800068e:	0162      	lsls	r2, r4, #5
 8000690:	d413      	bmi.n	80006ba <__aeabi_i2f+0x86>
 8000692:	01a4      	lsls	r4, r4, #6
 8000694:	0a64      	lsrs	r4, r4, #9
 8000696:	b2db      	uxtb	r3, r3
 8000698:	002a      	movs	r2, r5
 800069a:	e7e0      	b.n	800065e <__aeabi_i2f+0x2a>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	2400      	movs	r4, #0
 80006a2:	e7dc      	b.n	800065e <__aeabi_i2f+0x2a>
 80006a4:	2205      	movs	r2, #5
 80006a6:	0021      	movs	r1, r4
 80006a8:	1a12      	subs	r2, r2, r0
 80006aa:	40d1      	lsrs	r1, r2
 80006ac:	22b9      	movs	r2, #185	; 0xb9
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	4094      	lsls	r4, r2
 80006b2:	1e62      	subs	r2, r4, #1
 80006b4:	4194      	sbcs	r4, r2
 80006b6:	430c      	orrs	r4, r1
 80006b8:	e7da      	b.n	8000670 <__aeabi_i2f+0x3c>
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <__aeabi_i2f+0x9c>)
 80006bc:	002a      	movs	r2, r5
 80006be:	401c      	ands	r4, r3
 80006c0:	239f      	movs	r3, #159	; 0x9f
 80006c2:	01a4      	lsls	r4, r4, #6
 80006c4:	1a1b      	subs	r3, r3, r0
 80006c6:	0a64      	lsrs	r4, r4, #9
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	e7c8      	b.n	800065e <__aeabi_i2f+0x2a>
 80006cc:	0022      	movs	r2, r4
 80006ce:	e7d5      	b.n	800067c <__aeabi_i2f+0x48>
 80006d0:	fbffffff 	.word	0xfbffffff

080006d4 <__aeabi_dadd>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	4645      	mov	r5, r8
 80006d8:	46de      	mov	lr, fp
 80006da:	4657      	mov	r7, sl
 80006dc:	464e      	mov	r6, r9
 80006de:	030c      	lsls	r4, r1, #12
 80006e0:	b5e0      	push	{r5, r6, r7, lr}
 80006e2:	004e      	lsls	r6, r1, #1
 80006e4:	0fc9      	lsrs	r1, r1, #31
 80006e6:	4688      	mov	r8, r1
 80006e8:	000d      	movs	r5, r1
 80006ea:	0a61      	lsrs	r1, r4, #9
 80006ec:	0f44      	lsrs	r4, r0, #29
 80006ee:	430c      	orrs	r4, r1
 80006f0:	00c7      	lsls	r7, r0, #3
 80006f2:	0319      	lsls	r1, r3, #12
 80006f4:	0058      	lsls	r0, r3, #1
 80006f6:	0fdb      	lsrs	r3, r3, #31
 80006f8:	469b      	mov	fp, r3
 80006fa:	0a4b      	lsrs	r3, r1, #9
 80006fc:	0f51      	lsrs	r1, r2, #29
 80006fe:	430b      	orrs	r3, r1
 8000700:	0d76      	lsrs	r6, r6, #21
 8000702:	0d40      	lsrs	r0, r0, #21
 8000704:	0019      	movs	r1, r3
 8000706:	00d2      	lsls	r2, r2, #3
 8000708:	45d8      	cmp	r8, fp
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x3a>
 800070c:	e0ae      	b.n	800086c <__aeabi_dadd+0x198>
 800070e:	1a35      	subs	r5, r6, r0
 8000710:	2d00      	cmp	r5, #0
 8000712:	dc00      	bgt.n	8000716 <__aeabi_dadd+0x42>
 8000714:	e0f6      	b.n	8000904 <__aeabi_dadd+0x230>
 8000716:	2800      	cmp	r0, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dadd+0x66>
 800071a:	4313      	orrs	r3, r2
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x4c>
 800071e:	e0db      	b.n	80008d8 <__aeabi_dadd+0x204>
 8000720:	1e6b      	subs	r3, r5, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_dadd+0x54>
 8000726:	e137      	b.n	8000998 <__aeabi_dadd+0x2c4>
 8000728:	1aba      	subs	r2, r7, r2
 800072a:	4297      	cmp	r7, r2
 800072c:	41bf      	sbcs	r7, r7
 800072e:	1a64      	subs	r4, r4, r1
 8000730:	427f      	negs	r7, r7
 8000732:	1be4      	subs	r4, r4, r7
 8000734:	2601      	movs	r6, #1
 8000736:	0017      	movs	r7, r2
 8000738:	e024      	b.n	8000784 <__aeabi_dadd+0xb0>
 800073a:	4bc6      	ldr	r3, [pc, #792]	; (8000a54 <__aeabi_dadd+0x380>)
 800073c:	429e      	cmp	r6, r3
 800073e:	d04d      	beq.n	80007dc <__aeabi_dadd+0x108>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	041b      	lsls	r3, r3, #16
 8000744:	4319      	orrs	r1, r3
 8000746:	2d38      	cmp	r5, #56	; 0x38
 8000748:	dd00      	ble.n	800074c <__aeabi_dadd+0x78>
 800074a:	e107      	b.n	800095c <__aeabi_dadd+0x288>
 800074c:	2d1f      	cmp	r5, #31
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0x7e>
 8000750:	e138      	b.n	80009c4 <__aeabi_dadd+0x2f0>
 8000752:	2020      	movs	r0, #32
 8000754:	1b43      	subs	r3, r0, r5
 8000756:	469a      	mov	sl, r3
 8000758:	000b      	movs	r3, r1
 800075a:	4650      	mov	r0, sl
 800075c:	4083      	lsls	r3, r0
 800075e:	4699      	mov	r9, r3
 8000760:	0013      	movs	r3, r2
 8000762:	4648      	mov	r0, r9
 8000764:	40eb      	lsrs	r3, r5
 8000766:	4318      	orrs	r0, r3
 8000768:	0003      	movs	r3, r0
 800076a:	4650      	mov	r0, sl
 800076c:	4082      	lsls	r2, r0
 800076e:	1e50      	subs	r0, r2, #1
 8000770:	4182      	sbcs	r2, r0
 8000772:	40e9      	lsrs	r1, r5
 8000774:	431a      	orrs	r2, r3
 8000776:	1aba      	subs	r2, r7, r2
 8000778:	1a61      	subs	r1, r4, r1
 800077a:	4297      	cmp	r7, r2
 800077c:	41a4      	sbcs	r4, r4
 800077e:	0017      	movs	r7, r2
 8000780:	4264      	negs	r4, r4
 8000782:	1b0c      	subs	r4, r1, r4
 8000784:	0223      	lsls	r3, r4, #8
 8000786:	d562      	bpl.n	800084e <__aeabi_dadd+0x17a>
 8000788:	0264      	lsls	r4, r4, #9
 800078a:	0a65      	lsrs	r5, r4, #9
 800078c:	2d00      	cmp	r5, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0xbe>
 8000790:	e0df      	b.n	8000952 <__aeabi_dadd+0x27e>
 8000792:	0028      	movs	r0, r5
 8000794:	f001 fa80 	bl	8001c98 <__clzsi2>
 8000798:	0003      	movs	r3, r0
 800079a:	3b08      	subs	r3, #8
 800079c:	2b1f      	cmp	r3, #31
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dadd+0xce>
 80007a0:	e0d2      	b.n	8000948 <__aeabi_dadd+0x274>
 80007a2:	2220      	movs	r2, #32
 80007a4:	003c      	movs	r4, r7
 80007a6:	1ad2      	subs	r2, r2, r3
 80007a8:	409d      	lsls	r5, r3
 80007aa:	40d4      	lsrs	r4, r2
 80007ac:	409f      	lsls	r7, r3
 80007ae:	4325      	orrs	r5, r4
 80007b0:	429e      	cmp	r6, r3
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xe2>
 80007b4:	e0c4      	b.n	8000940 <__aeabi_dadd+0x26c>
 80007b6:	1b9e      	subs	r6, r3, r6
 80007b8:	1c73      	adds	r3, r6, #1
 80007ba:	2b1f      	cmp	r3, #31
 80007bc:	dd00      	ble.n	80007c0 <__aeabi_dadd+0xec>
 80007be:	e0f1      	b.n	80009a4 <__aeabi_dadd+0x2d0>
 80007c0:	2220      	movs	r2, #32
 80007c2:	0038      	movs	r0, r7
 80007c4:	0029      	movs	r1, r5
 80007c6:	1ad2      	subs	r2, r2, r3
 80007c8:	40d8      	lsrs	r0, r3
 80007ca:	4091      	lsls	r1, r2
 80007cc:	4097      	lsls	r7, r2
 80007ce:	002c      	movs	r4, r5
 80007d0:	4301      	orrs	r1, r0
 80007d2:	1e78      	subs	r0, r7, #1
 80007d4:	4187      	sbcs	r7, r0
 80007d6:	40dc      	lsrs	r4, r3
 80007d8:	2600      	movs	r6, #0
 80007da:	430f      	orrs	r7, r1
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	d009      	beq.n	80007f4 <__aeabi_dadd+0x120>
 80007e0:	230f      	movs	r3, #15
 80007e2:	403b      	ands	r3, r7
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d005      	beq.n	80007f4 <__aeabi_dadd+0x120>
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	42bb      	cmp	r3, r7
 80007ec:	41bf      	sbcs	r7, r7
 80007ee:	427f      	negs	r7, r7
 80007f0:	19e4      	adds	r4, r4, r7
 80007f2:	001f      	movs	r7, r3
 80007f4:	0223      	lsls	r3, r4, #8
 80007f6:	d52c      	bpl.n	8000852 <__aeabi_dadd+0x17e>
 80007f8:	4b96      	ldr	r3, [pc, #600]	; (8000a54 <__aeabi_dadd+0x380>)
 80007fa:	3601      	adds	r6, #1
 80007fc:	429e      	cmp	r6, r3
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x12e>
 8000800:	e09a      	b.n	8000938 <__aeabi_dadd+0x264>
 8000802:	4645      	mov	r5, r8
 8000804:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <__aeabi_dadd+0x384>)
 8000806:	08ff      	lsrs	r7, r7, #3
 8000808:	401c      	ands	r4, r3
 800080a:	0760      	lsls	r0, r4, #29
 800080c:	0576      	lsls	r6, r6, #21
 800080e:	0264      	lsls	r4, r4, #9
 8000810:	4307      	orrs	r7, r0
 8000812:	0b24      	lsrs	r4, r4, #12
 8000814:	0d76      	lsrs	r6, r6, #21
 8000816:	2100      	movs	r1, #0
 8000818:	0324      	lsls	r4, r4, #12
 800081a:	0b23      	lsrs	r3, r4, #12
 800081c:	0d0c      	lsrs	r4, r1, #20
 800081e:	4a8f      	ldr	r2, [pc, #572]	; (8000a5c <__aeabi_dadd+0x388>)
 8000820:	0524      	lsls	r4, r4, #20
 8000822:	431c      	orrs	r4, r3
 8000824:	4014      	ands	r4, r2
 8000826:	0533      	lsls	r3, r6, #20
 8000828:	4323      	orrs	r3, r4
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	07ed      	lsls	r5, r5, #31
 800082e:	085b      	lsrs	r3, r3, #1
 8000830:	432b      	orrs	r3, r5
 8000832:	0038      	movs	r0, r7
 8000834:	0019      	movs	r1, r3
 8000836:	bc3c      	pop	{r2, r3, r4, r5}
 8000838:	4690      	mov	r8, r2
 800083a:	4699      	mov	r9, r3
 800083c:	46a2      	mov	sl, r4
 800083e:	46ab      	mov	fp, r5
 8000840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000842:	4664      	mov	r4, ip
 8000844:	4304      	orrs	r4, r0
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x176>
 8000848:	e211      	b.n	8000c6e <__aeabi_dadd+0x59a>
 800084a:	0004      	movs	r4, r0
 800084c:	4667      	mov	r7, ip
 800084e:	077b      	lsls	r3, r7, #29
 8000850:	d1c6      	bne.n	80007e0 <__aeabi_dadd+0x10c>
 8000852:	4645      	mov	r5, r8
 8000854:	0760      	lsls	r0, r4, #29
 8000856:	08ff      	lsrs	r7, r7, #3
 8000858:	4307      	orrs	r7, r0
 800085a:	08e4      	lsrs	r4, r4, #3
 800085c:	4b7d      	ldr	r3, [pc, #500]	; (8000a54 <__aeabi_dadd+0x380>)
 800085e:	429e      	cmp	r6, r3
 8000860:	d030      	beq.n	80008c4 <__aeabi_dadd+0x1f0>
 8000862:	0324      	lsls	r4, r4, #12
 8000864:	0576      	lsls	r6, r6, #21
 8000866:	0b24      	lsrs	r4, r4, #12
 8000868:	0d76      	lsrs	r6, r6, #21
 800086a:	e7d4      	b.n	8000816 <__aeabi_dadd+0x142>
 800086c:	1a33      	subs	r3, r6, r0
 800086e:	469a      	mov	sl, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	dd78      	ble.n	8000966 <__aeabi_dadd+0x292>
 8000874:	2800      	cmp	r0, #0
 8000876:	d031      	beq.n	80008dc <__aeabi_dadd+0x208>
 8000878:	4876      	ldr	r0, [pc, #472]	; (8000a54 <__aeabi_dadd+0x380>)
 800087a:	4286      	cmp	r6, r0
 800087c:	d0ae      	beq.n	80007dc <__aeabi_dadd+0x108>
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	0400      	lsls	r0, r0, #16
 8000882:	4301      	orrs	r1, r0
 8000884:	4653      	mov	r3, sl
 8000886:	2b38      	cmp	r3, #56	; 0x38
 8000888:	dc00      	bgt.n	800088c <__aeabi_dadd+0x1b8>
 800088a:	e0e9      	b.n	8000a60 <__aeabi_dadd+0x38c>
 800088c:	430a      	orrs	r2, r1
 800088e:	1e51      	subs	r1, r2, #1
 8000890:	418a      	sbcs	r2, r1
 8000892:	2100      	movs	r1, #0
 8000894:	19d2      	adds	r2, r2, r7
 8000896:	42ba      	cmp	r2, r7
 8000898:	41bf      	sbcs	r7, r7
 800089a:	1909      	adds	r1, r1, r4
 800089c:	427c      	negs	r4, r7
 800089e:	0017      	movs	r7, r2
 80008a0:	190c      	adds	r4, r1, r4
 80008a2:	0223      	lsls	r3, r4, #8
 80008a4:	d5d3      	bpl.n	800084e <__aeabi_dadd+0x17a>
 80008a6:	4b6b      	ldr	r3, [pc, #428]	; (8000a54 <__aeabi_dadd+0x380>)
 80008a8:	3601      	adds	r6, #1
 80008aa:	429e      	cmp	r6, r3
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x1dc>
 80008ae:	e13a      	b.n	8000b26 <__aeabi_dadd+0x452>
 80008b0:	2001      	movs	r0, #1
 80008b2:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <__aeabi_dadd+0x384>)
 80008b4:	401c      	ands	r4, r3
 80008b6:	087b      	lsrs	r3, r7, #1
 80008b8:	4007      	ands	r7, r0
 80008ba:	431f      	orrs	r7, r3
 80008bc:	07e0      	lsls	r0, r4, #31
 80008be:	4307      	orrs	r7, r0
 80008c0:	0864      	lsrs	r4, r4, #1
 80008c2:	e78b      	b.n	80007dc <__aeabi_dadd+0x108>
 80008c4:	0023      	movs	r3, r4
 80008c6:	433b      	orrs	r3, r7
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x1f8>
 80008ca:	e1cb      	b.n	8000c64 <__aeabi_dadd+0x590>
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0312      	lsls	r2, r2, #12
 80008d0:	4314      	orrs	r4, r2
 80008d2:	0324      	lsls	r4, r4, #12
 80008d4:	0b24      	lsrs	r4, r4, #12
 80008d6:	e79e      	b.n	8000816 <__aeabi_dadd+0x142>
 80008d8:	002e      	movs	r6, r5
 80008da:	e77f      	b.n	80007dc <__aeabi_dadd+0x108>
 80008dc:	0008      	movs	r0, r1
 80008de:	4310      	orrs	r0, r2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x210>
 80008e2:	e0b4      	b.n	8000a4e <__aeabi_dadd+0x37a>
 80008e4:	1e58      	subs	r0, r3, #1
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x218>
 80008ea:	e0de      	b.n	8000aaa <__aeabi_dadd+0x3d6>
 80008ec:	18ba      	adds	r2, r7, r2
 80008ee:	42ba      	cmp	r2, r7
 80008f0:	419b      	sbcs	r3, r3
 80008f2:	1864      	adds	r4, r4, r1
 80008f4:	425b      	negs	r3, r3
 80008f6:	18e4      	adds	r4, r4, r3
 80008f8:	0017      	movs	r7, r2
 80008fa:	2601      	movs	r6, #1
 80008fc:	0223      	lsls	r3, r4, #8
 80008fe:	d5a6      	bpl.n	800084e <__aeabi_dadd+0x17a>
 8000900:	2602      	movs	r6, #2
 8000902:	e7d5      	b.n	80008b0 <__aeabi_dadd+0x1dc>
 8000904:	2d00      	cmp	r5, #0
 8000906:	d16e      	bne.n	80009e6 <__aeabi_dadd+0x312>
 8000908:	1c70      	adds	r0, r6, #1
 800090a:	0540      	lsls	r0, r0, #21
 800090c:	0d40      	lsrs	r0, r0, #21
 800090e:	2801      	cmp	r0, #1
 8000910:	dc00      	bgt.n	8000914 <__aeabi_dadd+0x240>
 8000912:	e0f9      	b.n	8000b08 <__aeabi_dadd+0x434>
 8000914:	1ab8      	subs	r0, r7, r2
 8000916:	4684      	mov	ip, r0
 8000918:	4287      	cmp	r7, r0
 800091a:	4180      	sbcs	r0, r0
 800091c:	1ae5      	subs	r5, r4, r3
 800091e:	4240      	negs	r0, r0
 8000920:	1a2d      	subs	r5, r5, r0
 8000922:	0228      	lsls	r0, r5, #8
 8000924:	d400      	bmi.n	8000928 <__aeabi_dadd+0x254>
 8000926:	e089      	b.n	8000a3c <__aeabi_dadd+0x368>
 8000928:	1bd7      	subs	r7, r2, r7
 800092a:	42ba      	cmp	r2, r7
 800092c:	4192      	sbcs	r2, r2
 800092e:	1b1c      	subs	r4, r3, r4
 8000930:	4252      	negs	r2, r2
 8000932:	1aa5      	subs	r5, r4, r2
 8000934:	46d8      	mov	r8, fp
 8000936:	e729      	b.n	800078c <__aeabi_dadd+0xb8>
 8000938:	4645      	mov	r5, r8
 800093a:	2400      	movs	r4, #0
 800093c:	2700      	movs	r7, #0
 800093e:	e76a      	b.n	8000816 <__aeabi_dadd+0x142>
 8000940:	4c45      	ldr	r4, [pc, #276]	; (8000a58 <__aeabi_dadd+0x384>)
 8000942:	1af6      	subs	r6, r6, r3
 8000944:	402c      	ands	r4, r5
 8000946:	e749      	b.n	80007dc <__aeabi_dadd+0x108>
 8000948:	003d      	movs	r5, r7
 800094a:	3828      	subs	r0, #40	; 0x28
 800094c:	4085      	lsls	r5, r0
 800094e:	2700      	movs	r7, #0
 8000950:	e72e      	b.n	80007b0 <__aeabi_dadd+0xdc>
 8000952:	0038      	movs	r0, r7
 8000954:	f001 f9a0 	bl	8001c98 <__clzsi2>
 8000958:	3020      	adds	r0, #32
 800095a:	e71d      	b.n	8000798 <__aeabi_dadd+0xc4>
 800095c:	430a      	orrs	r2, r1
 800095e:	1e51      	subs	r1, r2, #1
 8000960:	418a      	sbcs	r2, r1
 8000962:	2100      	movs	r1, #0
 8000964:	e707      	b.n	8000776 <__aeabi_dadd+0xa2>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x298>
 800096a:	e0f3      	b.n	8000b54 <__aeabi_dadd+0x480>
 800096c:	1c70      	adds	r0, r6, #1
 800096e:	0543      	lsls	r3, r0, #21
 8000970:	0d5b      	lsrs	r3, r3, #21
 8000972:	2b01      	cmp	r3, #1
 8000974:	dc00      	bgt.n	8000978 <__aeabi_dadd+0x2a4>
 8000976:	e0ad      	b.n	8000ad4 <__aeabi_dadd+0x400>
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <__aeabi_dadd+0x380>)
 800097a:	4298      	cmp	r0, r3
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2ac>
 800097e:	e0d1      	b.n	8000b24 <__aeabi_dadd+0x450>
 8000980:	18ba      	adds	r2, r7, r2
 8000982:	42ba      	cmp	r2, r7
 8000984:	41bf      	sbcs	r7, r7
 8000986:	1864      	adds	r4, r4, r1
 8000988:	427f      	negs	r7, r7
 800098a:	19e4      	adds	r4, r4, r7
 800098c:	07e7      	lsls	r7, r4, #31
 800098e:	0852      	lsrs	r2, r2, #1
 8000990:	4317      	orrs	r7, r2
 8000992:	0864      	lsrs	r4, r4, #1
 8000994:	0006      	movs	r6, r0
 8000996:	e721      	b.n	80007dc <__aeabi_dadd+0x108>
 8000998:	482e      	ldr	r0, [pc, #184]	; (8000a54 <__aeabi_dadd+0x380>)
 800099a:	4285      	cmp	r5, r0
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x2cc>
 800099e:	e093      	b.n	8000ac8 <__aeabi_dadd+0x3f4>
 80009a0:	001d      	movs	r5, r3
 80009a2:	e6d0      	b.n	8000746 <__aeabi_dadd+0x72>
 80009a4:	0029      	movs	r1, r5
 80009a6:	3e1f      	subs	r6, #31
 80009a8:	40f1      	lsrs	r1, r6
 80009aa:	2b20      	cmp	r3, #32
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x2dc>
 80009ae:	e08d      	b.n	8000acc <__aeabi_dadd+0x3f8>
 80009b0:	2240      	movs	r2, #64	; 0x40
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	409d      	lsls	r5, r3
 80009b6:	432f      	orrs	r7, r5
 80009b8:	1e7d      	subs	r5, r7, #1
 80009ba:	41af      	sbcs	r7, r5
 80009bc:	2400      	movs	r4, #0
 80009be:	430f      	orrs	r7, r1
 80009c0:	2600      	movs	r6, #0
 80009c2:	e744      	b.n	800084e <__aeabi_dadd+0x17a>
 80009c4:	002b      	movs	r3, r5
 80009c6:	0008      	movs	r0, r1
 80009c8:	3b20      	subs	r3, #32
 80009ca:	40d8      	lsrs	r0, r3
 80009cc:	0003      	movs	r3, r0
 80009ce:	2d20      	cmp	r5, #32
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x300>
 80009d2:	e07d      	b.n	8000ad0 <__aeabi_dadd+0x3fc>
 80009d4:	2040      	movs	r0, #64	; 0x40
 80009d6:	1b45      	subs	r5, r0, r5
 80009d8:	40a9      	lsls	r1, r5
 80009da:	430a      	orrs	r2, r1
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	418a      	sbcs	r2, r1
 80009e0:	2100      	movs	r1, #0
 80009e2:	431a      	orrs	r2, r3
 80009e4:	e6c7      	b.n	8000776 <__aeabi_dadd+0xa2>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d050      	beq.n	8000a8c <__aeabi_dadd+0x3b8>
 80009ea:	4e1a      	ldr	r6, [pc, #104]	; (8000a54 <__aeabi_dadd+0x380>)
 80009ec:	42b0      	cmp	r0, r6
 80009ee:	d057      	beq.n	8000aa0 <__aeabi_dadd+0x3cc>
 80009f0:	2680      	movs	r6, #128	; 0x80
 80009f2:	426b      	negs	r3, r5
 80009f4:	4699      	mov	r9, r3
 80009f6:	0436      	lsls	r6, r6, #16
 80009f8:	4334      	orrs	r4, r6
 80009fa:	464b      	mov	r3, r9
 80009fc:	2b38      	cmp	r3, #56	; 0x38
 80009fe:	dd00      	ble.n	8000a02 <__aeabi_dadd+0x32e>
 8000a00:	e0d6      	b.n	8000bb0 <__aeabi_dadd+0x4dc>
 8000a02:	2b1f      	cmp	r3, #31
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_dadd+0x334>
 8000a06:	e135      	b.n	8000c74 <__aeabi_dadd+0x5a0>
 8000a08:	2620      	movs	r6, #32
 8000a0a:	1af5      	subs	r5, r6, r3
 8000a0c:	0026      	movs	r6, r4
 8000a0e:	40ae      	lsls	r6, r5
 8000a10:	46b2      	mov	sl, r6
 8000a12:	003e      	movs	r6, r7
 8000a14:	40de      	lsrs	r6, r3
 8000a16:	46ac      	mov	ip, r5
 8000a18:	0035      	movs	r5, r6
 8000a1a:	4656      	mov	r6, sl
 8000a1c:	432e      	orrs	r6, r5
 8000a1e:	4665      	mov	r5, ip
 8000a20:	40af      	lsls	r7, r5
 8000a22:	1e7d      	subs	r5, r7, #1
 8000a24:	41af      	sbcs	r7, r5
 8000a26:	40dc      	lsrs	r4, r3
 8000a28:	4337      	orrs	r7, r6
 8000a2a:	1bd7      	subs	r7, r2, r7
 8000a2c:	42ba      	cmp	r2, r7
 8000a2e:	4192      	sbcs	r2, r2
 8000a30:	1b0c      	subs	r4, r1, r4
 8000a32:	4252      	negs	r2, r2
 8000a34:	1aa4      	subs	r4, r4, r2
 8000a36:	0006      	movs	r6, r0
 8000a38:	46d8      	mov	r8, fp
 8000a3a:	e6a3      	b.n	8000784 <__aeabi_dadd+0xb0>
 8000a3c:	4664      	mov	r4, ip
 8000a3e:	4667      	mov	r7, ip
 8000a40:	432c      	orrs	r4, r5
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dadd+0x372>
 8000a44:	e6a2      	b.n	800078c <__aeabi_dadd+0xb8>
 8000a46:	2500      	movs	r5, #0
 8000a48:	2600      	movs	r6, #0
 8000a4a:	2700      	movs	r7, #0
 8000a4c:	e706      	b.n	800085c <__aeabi_dadd+0x188>
 8000a4e:	001e      	movs	r6, r3
 8000a50:	e6c4      	b.n	80007dc <__aeabi_dadd+0x108>
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	000007ff 	.word	0x000007ff
 8000a58:	ff7fffff 	.word	0xff7fffff
 8000a5c:	800fffff 	.word	0x800fffff
 8000a60:	2b1f      	cmp	r3, #31
 8000a62:	dc63      	bgt.n	8000b2c <__aeabi_dadd+0x458>
 8000a64:	2020      	movs	r0, #32
 8000a66:	1ac3      	subs	r3, r0, r3
 8000a68:	0008      	movs	r0, r1
 8000a6a:	4098      	lsls	r0, r3
 8000a6c:	469c      	mov	ip, r3
 8000a6e:	4683      	mov	fp, r0
 8000a70:	4653      	mov	r3, sl
 8000a72:	0010      	movs	r0, r2
 8000a74:	40d8      	lsrs	r0, r3
 8000a76:	0003      	movs	r3, r0
 8000a78:	4658      	mov	r0, fp
 8000a7a:	4318      	orrs	r0, r3
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	1e53      	subs	r3, r2, #1
 8000a82:	419a      	sbcs	r2, r3
 8000a84:	4653      	mov	r3, sl
 8000a86:	4302      	orrs	r2, r0
 8000a88:	40d9      	lsrs	r1, r3
 8000a8a:	e703      	b.n	8000894 <__aeabi_dadd+0x1c0>
 8000a8c:	0026      	movs	r6, r4
 8000a8e:	433e      	orrs	r6, r7
 8000a90:	d006      	beq.n	8000aa0 <__aeabi_dadd+0x3cc>
 8000a92:	43eb      	mvns	r3, r5
 8000a94:	4699      	mov	r9, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0c7      	beq.n	8000a2a <__aeabi_dadd+0x356>
 8000a9a:	4e94      	ldr	r6, [pc, #592]	; (8000cec <__aeabi_dadd+0x618>)
 8000a9c:	42b0      	cmp	r0, r6
 8000a9e:	d1ac      	bne.n	80009fa <__aeabi_dadd+0x326>
 8000aa0:	000c      	movs	r4, r1
 8000aa2:	0017      	movs	r7, r2
 8000aa4:	0006      	movs	r6, r0
 8000aa6:	46d8      	mov	r8, fp
 8000aa8:	e698      	b.n	80007dc <__aeabi_dadd+0x108>
 8000aaa:	4b90      	ldr	r3, [pc, #576]	; (8000cec <__aeabi_dadd+0x618>)
 8000aac:	459a      	cmp	sl, r3
 8000aae:	d00b      	beq.n	8000ac8 <__aeabi_dadd+0x3f4>
 8000ab0:	4682      	mov	sl, r0
 8000ab2:	e6e7      	b.n	8000884 <__aeabi_dadd+0x1b0>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_dadd+0x3e6>
 8000ab8:	e09e      	b.n	8000bf8 <__aeabi_dadd+0x524>
 8000aba:	0018      	movs	r0, r3
 8000abc:	4310      	orrs	r0, r2
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x3ee>
 8000ac0:	e0e9      	b.n	8000c96 <__aeabi_dadd+0x5c2>
 8000ac2:	001c      	movs	r4, r3
 8000ac4:	0017      	movs	r7, r2
 8000ac6:	46d8      	mov	r8, fp
 8000ac8:	4e88      	ldr	r6, [pc, #544]	; (8000cec <__aeabi_dadd+0x618>)
 8000aca:	e687      	b.n	80007dc <__aeabi_dadd+0x108>
 8000acc:	2500      	movs	r5, #0
 8000ace:	e772      	b.n	80009b6 <__aeabi_dadd+0x2e2>
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	e782      	b.n	80009da <__aeabi_dadd+0x306>
 8000ad4:	0023      	movs	r3, r4
 8000ad6:	433b      	orrs	r3, r7
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x40a>
 8000adc:	e0ab      	b.n	8000c36 <__aeabi_dadd+0x562>
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x410>
 8000ae2:	e0e7      	b.n	8000cb4 <__aeabi_dadd+0x5e0>
 8000ae4:	000b      	movs	r3, r1
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x418>
 8000aea:	e677      	b.n	80007dc <__aeabi_dadd+0x108>
 8000aec:	18ba      	adds	r2, r7, r2
 8000aee:	42ba      	cmp	r2, r7
 8000af0:	41bf      	sbcs	r7, r7
 8000af2:	1864      	adds	r4, r4, r1
 8000af4:	427f      	negs	r7, r7
 8000af6:	19e4      	adds	r4, r4, r7
 8000af8:	0223      	lsls	r3, r4, #8
 8000afa:	d400      	bmi.n	8000afe <__aeabi_dadd+0x42a>
 8000afc:	e0f2      	b.n	8000ce4 <__aeabi_dadd+0x610>
 8000afe:	4b7c      	ldr	r3, [pc, #496]	; (8000cf0 <__aeabi_dadd+0x61c>)
 8000b00:	0017      	movs	r7, r2
 8000b02:	401c      	ands	r4, r3
 8000b04:	0006      	movs	r6, r0
 8000b06:	e669      	b.n	80007dc <__aeabi_dadd+0x108>
 8000b08:	0020      	movs	r0, r4
 8000b0a:	4338      	orrs	r0, r7
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d1d1      	bne.n	8000ab4 <__aeabi_dadd+0x3e0>
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d15b      	bne.n	8000bcc <__aeabi_dadd+0x4f8>
 8000b14:	001c      	movs	r4, r3
 8000b16:	4314      	orrs	r4, r2
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x448>
 8000b1a:	e0a8      	b.n	8000c6e <__aeabi_dadd+0x59a>
 8000b1c:	001c      	movs	r4, r3
 8000b1e:	0017      	movs	r7, r2
 8000b20:	46d8      	mov	r8, fp
 8000b22:	e65b      	b.n	80007dc <__aeabi_dadd+0x108>
 8000b24:	0006      	movs	r6, r0
 8000b26:	2400      	movs	r4, #0
 8000b28:	2700      	movs	r7, #0
 8000b2a:	e697      	b.n	800085c <__aeabi_dadd+0x188>
 8000b2c:	4650      	mov	r0, sl
 8000b2e:	000b      	movs	r3, r1
 8000b30:	3820      	subs	r0, #32
 8000b32:	40c3      	lsrs	r3, r0
 8000b34:	4699      	mov	r9, r3
 8000b36:	4653      	mov	r3, sl
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x46a>
 8000b3c:	e095      	b.n	8000c6a <__aeabi_dadd+0x596>
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	4650      	mov	r0, sl
 8000b42:	1a1b      	subs	r3, r3, r0
 8000b44:	4099      	lsls	r1, r3
 8000b46:	430a      	orrs	r2, r1
 8000b48:	1e51      	subs	r1, r2, #1
 8000b4a:	418a      	sbcs	r2, r1
 8000b4c:	464b      	mov	r3, r9
 8000b4e:	2100      	movs	r1, #0
 8000b50:	431a      	orrs	r2, r3
 8000b52:	e69f      	b.n	8000894 <__aeabi_dadd+0x1c0>
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d130      	bne.n	8000bba <__aeabi_dadd+0x4e6>
 8000b58:	0026      	movs	r6, r4
 8000b5a:	433e      	orrs	r6, r7
 8000b5c:	d067      	beq.n	8000c2e <__aeabi_dadd+0x55a>
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	469a      	mov	sl, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d01c      	beq.n	8000ba0 <__aeabi_dadd+0x4cc>
 8000b66:	4e61      	ldr	r6, [pc, #388]	; (8000cec <__aeabi_dadd+0x618>)
 8000b68:	42b0      	cmp	r0, r6
 8000b6a:	d060      	beq.n	8000c2e <__aeabi_dadd+0x55a>
 8000b6c:	4653      	mov	r3, sl
 8000b6e:	2b38      	cmp	r3, #56	; 0x38
 8000b70:	dd00      	ble.n	8000b74 <__aeabi_dadd+0x4a0>
 8000b72:	e096      	b.n	8000ca2 <__aeabi_dadd+0x5ce>
 8000b74:	2b1f      	cmp	r3, #31
 8000b76:	dd00      	ble.n	8000b7a <__aeabi_dadd+0x4a6>
 8000b78:	e09f      	b.n	8000cba <__aeabi_dadd+0x5e6>
 8000b7a:	2620      	movs	r6, #32
 8000b7c:	1af3      	subs	r3, r6, r3
 8000b7e:	0026      	movs	r6, r4
 8000b80:	409e      	lsls	r6, r3
 8000b82:	469c      	mov	ip, r3
 8000b84:	46b3      	mov	fp, r6
 8000b86:	4653      	mov	r3, sl
 8000b88:	003e      	movs	r6, r7
 8000b8a:	40de      	lsrs	r6, r3
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	465e      	mov	r6, fp
 8000b90:	431e      	orrs	r6, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	409f      	lsls	r7, r3
 8000b96:	1e7b      	subs	r3, r7, #1
 8000b98:	419f      	sbcs	r7, r3
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	40dc      	lsrs	r4, r3
 8000b9e:	4337      	orrs	r7, r6
 8000ba0:	18bf      	adds	r7, r7, r2
 8000ba2:	4297      	cmp	r7, r2
 8000ba4:	4192      	sbcs	r2, r2
 8000ba6:	1864      	adds	r4, r4, r1
 8000ba8:	4252      	negs	r2, r2
 8000baa:	18a4      	adds	r4, r4, r2
 8000bac:	0006      	movs	r6, r0
 8000bae:	e678      	b.n	80008a2 <__aeabi_dadd+0x1ce>
 8000bb0:	4327      	orrs	r7, r4
 8000bb2:	1e7c      	subs	r4, r7, #1
 8000bb4:	41a7      	sbcs	r7, r4
 8000bb6:	2400      	movs	r4, #0
 8000bb8:	e737      	b.n	8000a2a <__aeabi_dadd+0x356>
 8000bba:	4e4c      	ldr	r6, [pc, #304]	; (8000cec <__aeabi_dadd+0x618>)
 8000bbc:	42b0      	cmp	r0, r6
 8000bbe:	d036      	beq.n	8000c2e <__aeabi_dadd+0x55a>
 8000bc0:	2680      	movs	r6, #128	; 0x80
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	0436      	lsls	r6, r6, #16
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	4334      	orrs	r4, r6
 8000bca:	e7cf      	b.n	8000b6c <__aeabi_dadd+0x498>
 8000bcc:	0018      	movs	r0, r3
 8000bce:	4310      	orrs	r0, r2
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x500>
 8000bd2:	e603      	b.n	80007dc <__aeabi_dadd+0x108>
 8000bd4:	1ab8      	subs	r0, r7, r2
 8000bd6:	4684      	mov	ip, r0
 8000bd8:	4567      	cmp	r7, ip
 8000bda:	41ad      	sbcs	r5, r5
 8000bdc:	1ae0      	subs	r0, r4, r3
 8000bde:	426d      	negs	r5, r5
 8000be0:	1b40      	subs	r0, r0, r5
 8000be2:	0205      	lsls	r5, r0, #8
 8000be4:	d400      	bmi.n	8000be8 <__aeabi_dadd+0x514>
 8000be6:	e62c      	b.n	8000842 <__aeabi_dadd+0x16e>
 8000be8:	1bd7      	subs	r7, r2, r7
 8000bea:	42ba      	cmp	r2, r7
 8000bec:	4192      	sbcs	r2, r2
 8000bee:	1b1c      	subs	r4, r3, r4
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	1aa4      	subs	r4, r4, r2
 8000bf4:	46d8      	mov	r8, fp
 8000bf6:	e5f1      	b.n	80007dc <__aeabi_dadd+0x108>
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	4310      	orrs	r0, r2
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x52c>
 8000bfe:	e763      	b.n	8000ac8 <__aeabi_dadd+0x3f4>
 8000c00:	08f8      	lsrs	r0, r7, #3
 8000c02:	0767      	lsls	r7, r4, #29
 8000c04:	4307      	orrs	r7, r0
 8000c06:	2080      	movs	r0, #128	; 0x80
 8000c08:	08e4      	lsrs	r4, r4, #3
 8000c0a:	0300      	lsls	r0, r0, #12
 8000c0c:	4204      	tst	r4, r0
 8000c0e:	d008      	beq.n	8000c22 <__aeabi_dadd+0x54e>
 8000c10:	08dd      	lsrs	r5, r3, #3
 8000c12:	4205      	tst	r5, r0
 8000c14:	d105      	bne.n	8000c22 <__aeabi_dadd+0x54e>
 8000c16:	08d2      	lsrs	r2, r2, #3
 8000c18:	0759      	lsls	r1, r3, #29
 8000c1a:	4311      	orrs	r1, r2
 8000c1c:	000f      	movs	r7, r1
 8000c1e:	002c      	movs	r4, r5
 8000c20:	46d8      	mov	r8, fp
 8000c22:	0f7b      	lsrs	r3, r7, #29
 8000c24:	00e4      	lsls	r4, r4, #3
 8000c26:	431c      	orrs	r4, r3
 8000c28:	00ff      	lsls	r7, r7, #3
 8000c2a:	4e30      	ldr	r6, [pc, #192]	; (8000cec <__aeabi_dadd+0x618>)
 8000c2c:	e5d6      	b.n	80007dc <__aeabi_dadd+0x108>
 8000c2e:	000c      	movs	r4, r1
 8000c30:	0017      	movs	r7, r2
 8000c32:	0006      	movs	r6, r0
 8000c34:	e5d2      	b.n	80007dc <__aeabi_dadd+0x108>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d038      	beq.n	8000cac <__aeabi_dadd+0x5d8>
 8000c3a:	000b      	movs	r3, r1
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x56e>
 8000c40:	e742      	b.n	8000ac8 <__aeabi_dadd+0x3f4>
 8000c42:	08f8      	lsrs	r0, r7, #3
 8000c44:	0767      	lsls	r7, r4, #29
 8000c46:	4307      	orrs	r7, r0
 8000c48:	2080      	movs	r0, #128	; 0x80
 8000c4a:	08e4      	lsrs	r4, r4, #3
 8000c4c:	0300      	lsls	r0, r0, #12
 8000c4e:	4204      	tst	r4, r0
 8000c50:	d0e7      	beq.n	8000c22 <__aeabi_dadd+0x54e>
 8000c52:	08cb      	lsrs	r3, r1, #3
 8000c54:	4203      	tst	r3, r0
 8000c56:	d1e4      	bne.n	8000c22 <__aeabi_dadd+0x54e>
 8000c58:	08d2      	lsrs	r2, r2, #3
 8000c5a:	0749      	lsls	r1, r1, #29
 8000c5c:	4311      	orrs	r1, r2
 8000c5e:	000f      	movs	r7, r1
 8000c60:	001c      	movs	r4, r3
 8000c62:	e7de      	b.n	8000c22 <__aeabi_dadd+0x54e>
 8000c64:	2700      	movs	r7, #0
 8000c66:	2400      	movs	r4, #0
 8000c68:	e5d5      	b.n	8000816 <__aeabi_dadd+0x142>
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	e76b      	b.n	8000b46 <__aeabi_dadd+0x472>
 8000c6e:	2500      	movs	r5, #0
 8000c70:	2700      	movs	r7, #0
 8000c72:	e5f3      	b.n	800085c <__aeabi_dadd+0x188>
 8000c74:	464e      	mov	r6, r9
 8000c76:	0025      	movs	r5, r4
 8000c78:	3e20      	subs	r6, #32
 8000c7a:	40f5      	lsrs	r5, r6
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	002e      	movs	r6, r5
 8000c80:	2b20      	cmp	r3, #32
 8000c82:	d02d      	beq.n	8000ce0 <__aeabi_dadd+0x60c>
 8000c84:	2540      	movs	r5, #64	; 0x40
 8000c86:	1aed      	subs	r5, r5, r3
 8000c88:	40ac      	lsls	r4, r5
 8000c8a:	4327      	orrs	r7, r4
 8000c8c:	1e7c      	subs	r4, r7, #1
 8000c8e:	41a7      	sbcs	r7, r4
 8000c90:	2400      	movs	r4, #0
 8000c92:	4337      	orrs	r7, r6
 8000c94:	e6c9      	b.n	8000a2a <__aeabi_dadd+0x356>
 8000c96:	2480      	movs	r4, #128	; 0x80
 8000c98:	2500      	movs	r5, #0
 8000c9a:	0324      	lsls	r4, r4, #12
 8000c9c:	4e13      	ldr	r6, [pc, #76]	; (8000cec <__aeabi_dadd+0x618>)
 8000c9e:	2700      	movs	r7, #0
 8000ca0:	e5dc      	b.n	800085c <__aeabi_dadd+0x188>
 8000ca2:	4327      	orrs	r7, r4
 8000ca4:	1e7c      	subs	r4, r7, #1
 8000ca6:	41a7      	sbcs	r7, r4
 8000ca8:	2400      	movs	r4, #0
 8000caa:	e779      	b.n	8000ba0 <__aeabi_dadd+0x4cc>
 8000cac:	000c      	movs	r4, r1
 8000cae:	0017      	movs	r7, r2
 8000cb0:	4e0e      	ldr	r6, [pc, #56]	; (8000cec <__aeabi_dadd+0x618>)
 8000cb2:	e593      	b.n	80007dc <__aeabi_dadd+0x108>
 8000cb4:	000c      	movs	r4, r1
 8000cb6:	0017      	movs	r7, r2
 8000cb8:	e590      	b.n	80007dc <__aeabi_dadd+0x108>
 8000cba:	4656      	mov	r6, sl
 8000cbc:	0023      	movs	r3, r4
 8000cbe:	3e20      	subs	r6, #32
 8000cc0:	40f3      	lsrs	r3, r6
 8000cc2:	4699      	mov	r9, r3
 8000cc4:	4653      	mov	r3, sl
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	d00e      	beq.n	8000ce8 <__aeabi_dadd+0x614>
 8000cca:	2340      	movs	r3, #64	; 0x40
 8000ccc:	4656      	mov	r6, sl
 8000cce:	1b9b      	subs	r3, r3, r6
 8000cd0:	409c      	lsls	r4, r3
 8000cd2:	4327      	orrs	r7, r4
 8000cd4:	1e7c      	subs	r4, r7, #1
 8000cd6:	41a7      	sbcs	r7, r4
 8000cd8:	464b      	mov	r3, r9
 8000cda:	2400      	movs	r4, #0
 8000cdc:	431f      	orrs	r7, r3
 8000cde:	e75f      	b.n	8000ba0 <__aeabi_dadd+0x4cc>
 8000ce0:	2400      	movs	r4, #0
 8000ce2:	e7d2      	b.n	8000c8a <__aeabi_dadd+0x5b6>
 8000ce4:	0017      	movs	r7, r2
 8000ce6:	e5b2      	b.n	800084e <__aeabi_dadd+0x17a>
 8000ce8:	2400      	movs	r4, #0
 8000cea:	e7f2      	b.n	8000cd2 <__aeabi_dadd+0x5fe>
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	ff7fffff 	.word	0xff7fffff

08000cf4 <__aeabi_ddiv>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	4645      	mov	r5, r8
 8000cfa:	46de      	mov	lr, fp
 8000cfc:	464e      	mov	r6, r9
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	004c      	lsls	r4, r1, #1
 8000d02:	030e      	lsls	r6, r1, #12
 8000d04:	b087      	sub	sp, #28
 8000d06:	4683      	mov	fp, r0
 8000d08:	4692      	mov	sl, r2
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	4680      	mov	r8, r0
 8000d0e:	0b36      	lsrs	r6, r6, #12
 8000d10:	0d64      	lsrs	r4, r4, #21
 8000d12:	0fcf      	lsrs	r7, r1, #31
 8000d14:	2c00      	cmp	r4, #0
 8000d16:	d04f      	beq.n	8000db8 <__aeabi_ddiv+0xc4>
 8000d18:	4b6f      	ldr	r3, [pc, #444]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	d035      	beq.n	8000d8a <__aeabi_ddiv+0x96>
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	0f42      	lsrs	r2, r0, #29
 8000d22:	041b      	lsls	r3, r3, #16
 8000d24:	00f6      	lsls	r6, r6, #3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	4333      	orrs	r3, r6
 8000d2a:	4699      	mov	r9, r3
 8000d2c:	00c3      	lsls	r3, r0, #3
 8000d2e:	4698      	mov	r8, r3
 8000d30:	4b6a      	ldr	r3, [pc, #424]	; (8000edc <__aeabi_ddiv+0x1e8>)
 8000d32:	2600      	movs	r6, #0
 8000d34:	469c      	mov	ip, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	4464      	add	r4, ip
 8000d3a:	9303      	str	r3, [sp, #12]
 8000d3c:	032b      	lsls	r3, r5, #12
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	469b      	mov	fp, r3
 8000d42:	006b      	lsls	r3, r5, #1
 8000d44:	0fed      	lsrs	r5, r5, #31
 8000d46:	4650      	mov	r0, sl
 8000d48:	0d5b      	lsrs	r3, r3, #21
 8000d4a:	9501      	str	r5, [sp, #4]
 8000d4c:	d05e      	beq.n	8000e0c <__aeabi_ddiv+0x118>
 8000d4e:	4a62      	ldr	r2, [pc, #392]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d053      	beq.n	8000dfc <__aeabi_ddiv+0x108>
 8000d54:	465a      	mov	r2, fp
 8000d56:	00d1      	lsls	r1, r2, #3
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0f40      	lsrs	r0, r0, #29
 8000d5c:	0412      	lsls	r2, r2, #16
 8000d5e:	4302      	orrs	r2, r0
 8000d60:	430a      	orrs	r2, r1
 8000d62:	4693      	mov	fp, r2
 8000d64:	4652      	mov	r2, sl
 8000d66:	00d1      	lsls	r1, r2, #3
 8000d68:	4a5c      	ldr	r2, [pc, #368]	; (8000edc <__aeabi_ddiv+0x1e8>)
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4463      	add	r3, ip
 8000d70:	0038      	movs	r0, r7
 8000d72:	4068      	eors	r0, r5
 8000d74:	4684      	mov	ip, r0
 8000d76:	9002      	str	r0, [sp, #8]
 8000d78:	1ae4      	subs	r4, r4, r3
 8000d7a:	4316      	orrs	r6, r2
 8000d7c:	2e0f      	cmp	r6, #15
 8000d7e:	d900      	bls.n	8000d82 <__aeabi_ddiv+0x8e>
 8000d80:	e0b4      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 8000d82:	4b57      	ldr	r3, [pc, #348]	; (8000ee0 <__aeabi_ddiv+0x1ec>)
 8000d84:	00b6      	lsls	r6, r6, #2
 8000d86:	599b      	ldr	r3, [r3, r6]
 8000d88:	469f      	mov	pc, r3
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	4333      	orrs	r3, r6
 8000d8e:	4699      	mov	r9, r3
 8000d90:	d16c      	bne.n	8000e6c <__aeabi_ddiv+0x178>
 8000d92:	2300      	movs	r3, #0
 8000d94:	4698      	mov	r8, r3
 8000d96:	3302      	adds	r3, #2
 8000d98:	2608      	movs	r6, #8
 8000d9a:	9303      	str	r3, [sp, #12]
 8000d9c:	e7ce      	b.n	8000d3c <__aeabi_ddiv+0x48>
 8000d9e:	46cb      	mov	fp, r9
 8000da0:	4641      	mov	r1, r8
 8000da2:	9a03      	ldr	r2, [sp, #12]
 8000da4:	9701      	str	r7, [sp, #4]
 8000da6:	2a02      	cmp	r2, #2
 8000da8:	d165      	bne.n	8000e76 <__aeabi_ddiv+0x182>
 8000daa:	9b01      	ldr	r3, [sp, #4]
 8000dac:	4c4a      	ldr	r4, [pc, #296]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000dae:	469c      	mov	ip, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	4698      	mov	r8, r3
 8000db6:	e06b      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8000db8:	0003      	movs	r3, r0
 8000dba:	4333      	orrs	r3, r6
 8000dbc:	4699      	mov	r9, r3
 8000dbe:	d04e      	beq.n	8000e5e <__aeabi_ddiv+0x16a>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0xd2>
 8000dc4:	e1bc      	b.n	8001140 <__aeabi_ddiv+0x44c>
 8000dc6:	0030      	movs	r0, r6
 8000dc8:	f000 ff66 	bl	8001c98 <__clzsi2>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	3b0b      	subs	r3, #11
 8000dd0:	2b1c      	cmp	r3, #28
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_ddiv+0xe2>
 8000dd4:	e1ac      	b.n	8001130 <__aeabi_ddiv+0x43c>
 8000dd6:	221d      	movs	r2, #29
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	465a      	mov	r2, fp
 8000ddc:	0001      	movs	r1, r0
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	3908      	subs	r1, #8
 8000de2:	408e      	lsls	r6, r1
 8000de4:	0013      	movs	r3, r2
 8000de6:	4333      	orrs	r3, r6
 8000de8:	4699      	mov	r9, r3
 8000dea:	465b      	mov	r3, fp
 8000dec:	408b      	lsls	r3, r1
 8000dee:	4698      	mov	r8, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	4c3c      	ldr	r4, [pc, #240]	; (8000ee4 <__aeabi_ddiv+0x1f0>)
 8000df4:	2600      	movs	r6, #0
 8000df6:	1a24      	subs	r4, r4, r0
 8000df8:	9303      	str	r3, [sp, #12]
 8000dfa:	e79f      	b.n	8000d3c <__aeabi_ddiv+0x48>
 8000dfc:	4651      	mov	r1, sl
 8000dfe:	465a      	mov	r2, fp
 8000e00:	4311      	orrs	r1, r2
 8000e02:	d129      	bne.n	8000e58 <__aeabi_ddiv+0x164>
 8000e04:	2200      	movs	r2, #0
 8000e06:	4693      	mov	fp, r2
 8000e08:	3202      	adds	r2, #2
 8000e0a:	e7b1      	b.n	8000d70 <__aeabi_ddiv+0x7c>
 8000e0c:	4659      	mov	r1, fp
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	d01e      	beq.n	8000e50 <__aeabi_ddiv+0x15c>
 8000e12:	465b      	mov	r3, fp
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d100      	bne.n	8000e1a <__aeabi_ddiv+0x126>
 8000e18:	e19e      	b.n	8001158 <__aeabi_ddiv+0x464>
 8000e1a:	4658      	mov	r0, fp
 8000e1c:	f000 ff3c 	bl	8001c98 <__clzsi2>
 8000e20:	0003      	movs	r3, r0
 8000e22:	3b0b      	subs	r3, #11
 8000e24:	2b1c      	cmp	r3, #28
 8000e26:	dd00      	ble.n	8000e2a <__aeabi_ddiv+0x136>
 8000e28:	e18f      	b.n	800114a <__aeabi_ddiv+0x456>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	4659      	mov	r1, fp
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	4091      	lsls	r1, r2
 8000e32:	468b      	mov	fp, r1
 8000e34:	211d      	movs	r1, #29
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	4651      	mov	r1, sl
 8000e3a:	40d9      	lsrs	r1, r3
 8000e3c:	000b      	movs	r3, r1
 8000e3e:	4659      	mov	r1, fp
 8000e40:	430b      	orrs	r3, r1
 8000e42:	4651      	mov	r1, sl
 8000e44:	469b      	mov	fp, r3
 8000e46:	4091      	lsls	r1, r2
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <__aeabi_ddiv+0x1f0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	1a1b      	subs	r3, r3, r0
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_ddiv+0x7c>
 8000e50:	2300      	movs	r3, #0
 8000e52:	2201      	movs	r2, #1
 8000e54:	469b      	mov	fp, r3
 8000e56:	e78b      	b.n	8000d70 <__aeabi_ddiv+0x7c>
 8000e58:	4651      	mov	r1, sl
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	e788      	b.n	8000d70 <__aeabi_ddiv+0x7c>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	4698      	mov	r8, r3
 8000e62:	3301      	adds	r3, #1
 8000e64:	2604      	movs	r6, #4
 8000e66:	2400      	movs	r4, #0
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	e767      	b.n	8000d3c <__aeabi_ddiv+0x48>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	46b1      	mov	r9, r6
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	260c      	movs	r6, #12
 8000e74:	e762      	b.n	8000d3c <__aeabi_ddiv+0x48>
 8000e76:	2a03      	cmp	r2, #3
 8000e78:	d100      	bne.n	8000e7c <__aeabi_ddiv+0x188>
 8000e7a:	e25c      	b.n	8001336 <__aeabi_ddiv+0x642>
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	2a01      	cmp	r2, #1
 8000e80:	d000      	beq.n	8000e84 <__aeabi_ddiv+0x190>
 8000e82:	e1e4      	b.n	800124e <__aeabi_ddiv+0x55a>
 8000e84:	4013      	ands	r3, r2
 8000e86:	469c      	mov	ip, r3
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2400      	movs	r4, #0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4698      	mov	r8, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	0312      	lsls	r2, r2, #12
 8000e94:	0b13      	lsrs	r3, r2, #12
 8000e96:	0d0a      	lsrs	r2, r1, #20
 8000e98:	0512      	lsls	r2, r2, #20
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	0523      	lsls	r3, r4, #20
 8000e9e:	4c12      	ldr	r4, [pc, #72]	; (8000ee8 <__aeabi_ddiv+0x1f4>)
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	4022      	ands	r2, r4
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	4662      	mov	r2, ip
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	07d2      	lsls	r2, r2, #31
 8000eac:	085b      	lsrs	r3, r3, #1
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	b007      	add	sp, #28
 8000eb4:	bc3c      	pop	{r2, r3, r4, r5}
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4699      	mov	r9, r3
 8000eba:	46a2      	mov	sl, r4
 8000ebc:	46ab      	mov	fp, r5
 8000ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	469c      	mov	ip, r3
 8000ec6:	0312      	lsls	r2, r2, #12
 8000ec8:	4698      	mov	r8, r3
 8000eca:	4c03      	ldr	r4, [pc, #12]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000ecc:	e7e0      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4c01      	ldr	r4, [pc, #4]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	e7db      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	08004970 	.word	0x08004970
 8000ee4:	fffffc0d 	.word	0xfffffc0d
 8000ee8:	800fffff 	.word	0x800fffff
 8000eec:	45d9      	cmp	r9, fp
 8000eee:	d900      	bls.n	8000ef2 <__aeabi_ddiv+0x1fe>
 8000ef0:	e139      	b.n	8001166 <__aeabi_ddiv+0x472>
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0x202>
 8000ef4:	e134      	b.n	8001160 <__aeabi_ddiv+0x46c>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	4646      	mov	r6, r8
 8000efa:	464d      	mov	r5, r9
 8000efc:	469a      	mov	sl, r3
 8000efe:	3c01      	subs	r4, #1
 8000f00:	465b      	mov	r3, fp
 8000f02:	0e0a      	lsrs	r2, r1, #24
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	431a      	orrs	r2, r3
 8000f08:	020b      	lsls	r3, r1, #8
 8000f0a:	0c17      	lsrs	r7, r2, #16
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	0413      	lsls	r3, r2, #16
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	0039      	movs	r1, r7
 8000f14:	0028      	movs	r0, r5
 8000f16:	4690      	mov	r8, r2
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	f7ff f8f5 	bl	8000108 <__udivsi3>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	9b01      	ldr	r3, [sp, #4]
 8000f22:	4683      	mov	fp, r0
 8000f24:	435a      	muls	r2, r3
 8000f26:	0028      	movs	r0, r5
 8000f28:	0039      	movs	r1, r7
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	f7ff f972 	bl	8000214 <__aeabi_uidivmod>
 8000f30:	0c35      	lsrs	r5, r6, #16
 8000f32:	0409      	lsls	r1, r1, #16
 8000f34:	430d      	orrs	r5, r1
 8000f36:	45a9      	cmp	r9, r5
 8000f38:	d90d      	bls.n	8000f56 <__aeabi_ddiv+0x262>
 8000f3a:	465b      	mov	r3, fp
 8000f3c:	4445      	add	r5, r8
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	45a8      	cmp	r8, r5
 8000f42:	d900      	bls.n	8000f46 <__aeabi_ddiv+0x252>
 8000f44:	e13a      	b.n	80011bc <__aeabi_ddiv+0x4c8>
 8000f46:	45a9      	cmp	r9, r5
 8000f48:	d800      	bhi.n	8000f4c <__aeabi_ddiv+0x258>
 8000f4a:	e137      	b.n	80011bc <__aeabi_ddiv+0x4c8>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	425b      	negs	r3, r3
 8000f50:	469c      	mov	ip, r3
 8000f52:	4445      	add	r5, r8
 8000f54:	44e3      	add	fp, ip
 8000f56:	464b      	mov	r3, r9
 8000f58:	1aeb      	subs	r3, r5, r3
 8000f5a:	0039      	movs	r1, r7
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	9304      	str	r3, [sp, #16]
 8000f60:	f7ff f8d2 	bl	8000108 <__udivsi3>
 8000f64:	9b01      	ldr	r3, [sp, #4]
 8000f66:	0005      	movs	r5, r0
 8000f68:	4343      	muls	r3, r0
 8000f6a:	0039      	movs	r1, r7
 8000f6c:	9804      	ldr	r0, [sp, #16]
 8000f6e:	4699      	mov	r9, r3
 8000f70:	f7ff f950 	bl	8000214 <__aeabi_uidivmod>
 8000f74:	0433      	lsls	r3, r6, #16
 8000f76:	0409      	lsls	r1, r1, #16
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	4599      	cmp	r9, r3
 8000f7e:	d909      	bls.n	8000f94 <__aeabi_ddiv+0x2a0>
 8000f80:	4443      	add	r3, r8
 8000f82:	1e6a      	subs	r2, r5, #1
 8000f84:	4598      	cmp	r8, r3
 8000f86:	d900      	bls.n	8000f8a <__aeabi_ddiv+0x296>
 8000f88:	e11a      	b.n	80011c0 <__aeabi_ddiv+0x4cc>
 8000f8a:	4599      	cmp	r9, r3
 8000f8c:	d800      	bhi.n	8000f90 <__aeabi_ddiv+0x29c>
 8000f8e:	e117      	b.n	80011c0 <__aeabi_ddiv+0x4cc>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4443      	add	r3, r8
 8000f94:	464a      	mov	r2, r9
 8000f96:	1a9b      	subs	r3, r3, r2
 8000f98:	465a      	mov	r2, fp
 8000f9a:	0412      	lsls	r2, r2, #16
 8000f9c:	432a      	orrs	r2, r5
 8000f9e:	9903      	ldr	r1, [sp, #12]
 8000fa0:	4693      	mov	fp, r2
 8000fa2:	0c10      	lsrs	r0, r2, #16
 8000fa4:	0c0a      	lsrs	r2, r1, #16
 8000fa6:	4691      	mov	r9, r2
 8000fa8:	0409      	lsls	r1, r1, #16
 8000faa:	465a      	mov	r2, fp
 8000fac:	0c09      	lsrs	r1, r1, #16
 8000fae:	464e      	mov	r6, r9
 8000fb0:	000d      	movs	r5, r1
 8000fb2:	0412      	lsls	r2, r2, #16
 8000fb4:	0c12      	lsrs	r2, r2, #16
 8000fb6:	4345      	muls	r5, r0
 8000fb8:	9105      	str	r1, [sp, #20]
 8000fba:	4351      	muls	r1, r2
 8000fbc:	4372      	muls	r2, r6
 8000fbe:	4370      	muls	r0, r6
 8000fc0:	1952      	adds	r2, r2, r5
 8000fc2:	0c0e      	lsrs	r6, r1, #16
 8000fc4:	18b2      	adds	r2, r6, r2
 8000fc6:	4295      	cmp	r5, r2
 8000fc8:	d903      	bls.n	8000fd2 <__aeabi_ddiv+0x2de>
 8000fca:	2580      	movs	r5, #128	; 0x80
 8000fcc:	026d      	lsls	r5, r5, #9
 8000fce:	46ac      	mov	ip, r5
 8000fd0:	4460      	add	r0, ip
 8000fd2:	0c15      	lsrs	r5, r2, #16
 8000fd4:	0409      	lsls	r1, r1, #16
 8000fd6:	0412      	lsls	r2, r2, #16
 8000fd8:	0c09      	lsrs	r1, r1, #16
 8000fda:	1828      	adds	r0, r5, r0
 8000fdc:	1852      	adds	r2, r2, r1
 8000fde:	4283      	cmp	r3, r0
 8000fe0:	d200      	bcs.n	8000fe4 <__aeabi_ddiv+0x2f0>
 8000fe2:	e0ce      	b.n	8001182 <__aeabi_ddiv+0x48e>
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0x2f4>
 8000fe6:	e0c8      	b.n	800117a <__aeabi_ddiv+0x486>
 8000fe8:	1a1d      	subs	r5, r3, r0
 8000fea:	4653      	mov	r3, sl
 8000fec:	1a9e      	subs	r6, r3, r2
 8000fee:	45b2      	cmp	sl, r6
 8000ff0:	4192      	sbcs	r2, r2
 8000ff2:	4252      	negs	r2, r2
 8000ff4:	1aab      	subs	r3, r5, r2
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	4598      	cmp	r8, r3
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x30a>
 8000ffc:	e117      	b.n	800122e <__aeabi_ddiv+0x53a>
 8000ffe:	0039      	movs	r1, r7
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff f881 	bl	8000108 <__udivsi3>
 8001006:	9b01      	ldr	r3, [sp, #4]
 8001008:	0005      	movs	r5, r0
 800100a:	4343      	muls	r3, r0
 800100c:	0039      	movs	r1, r7
 800100e:	4650      	mov	r0, sl
 8001010:	9304      	str	r3, [sp, #16]
 8001012:	f7ff f8ff 	bl	8000214 <__aeabi_uidivmod>
 8001016:	9804      	ldr	r0, [sp, #16]
 8001018:	040b      	lsls	r3, r1, #16
 800101a:	0c31      	lsrs	r1, r6, #16
 800101c:	4319      	orrs	r1, r3
 800101e:	4288      	cmp	r0, r1
 8001020:	d909      	bls.n	8001036 <__aeabi_ddiv+0x342>
 8001022:	4441      	add	r1, r8
 8001024:	1e6b      	subs	r3, r5, #1
 8001026:	4588      	cmp	r8, r1
 8001028:	d900      	bls.n	800102c <__aeabi_ddiv+0x338>
 800102a:	e107      	b.n	800123c <__aeabi_ddiv+0x548>
 800102c:	4288      	cmp	r0, r1
 800102e:	d800      	bhi.n	8001032 <__aeabi_ddiv+0x33e>
 8001030:	e104      	b.n	800123c <__aeabi_ddiv+0x548>
 8001032:	3d02      	subs	r5, #2
 8001034:	4441      	add	r1, r8
 8001036:	9b04      	ldr	r3, [sp, #16]
 8001038:	1acb      	subs	r3, r1, r3
 800103a:	0018      	movs	r0, r3
 800103c:	0039      	movs	r1, r7
 800103e:	9304      	str	r3, [sp, #16]
 8001040:	f7ff f862 	bl	8000108 <__udivsi3>
 8001044:	9b01      	ldr	r3, [sp, #4]
 8001046:	4682      	mov	sl, r0
 8001048:	4343      	muls	r3, r0
 800104a:	0039      	movs	r1, r7
 800104c:	9804      	ldr	r0, [sp, #16]
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	f7ff f8e0 	bl	8000214 <__aeabi_uidivmod>
 8001054:	9801      	ldr	r0, [sp, #4]
 8001056:	040b      	lsls	r3, r1, #16
 8001058:	0431      	lsls	r1, r6, #16
 800105a:	0c09      	lsrs	r1, r1, #16
 800105c:	4319      	orrs	r1, r3
 800105e:	4288      	cmp	r0, r1
 8001060:	d90d      	bls.n	800107e <__aeabi_ddiv+0x38a>
 8001062:	4653      	mov	r3, sl
 8001064:	4441      	add	r1, r8
 8001066:	3b01      	subs	r3, #1
 8001068:	4588      	cmp	r8, r1
 800106a:	d900      	bls.n	800106e <__aeabi_ddiv+0x37a>
 800106c:	e0e8      	b.n	8001240 <__aeabi_ddiv+0x54c>
 800106e:	4288      	cmp	r0, r1
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x380>
 8001072:	e0e5      	b.n	8001240 <__aeabi_ddiv+0x54c>
 8001074:	2302      	movs	r3, #2
 8001076:	425b      	negs	r3, r3
 8001078:	469c      	mov	ip, r3
 800107a:	4441      	add	r1, r8
 800107c:	44e2      	add	sl, ip
 800107e:	9b01      	ldr	r3, [sp, #4]
 8001080:	042d      	lsls	r5, r5, #16
 8001082:	1ace      	subs	r6, r1, r3
 8001084:	4651      	mov	r1, sl
 8001086:	4329      	orrs	r1, r5
 8001088:	9d05      	ldr	r5, [sp, #20]
 800108a:	464f      	mov	r7, r9
 800108c:	002a      	movs	r2, r5
 800108e:	040b      	lsls	r3, r1, #16
 8001090:	0c08      	lsrs	r0, r1, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	4345      	muls	r5, r0
 8001098:	437b      	muls	r3, r7
 800109a:	4378      	muls	r0, r7
 800109c:	195b      	adds	r3, r3, r5
 800109e:	0c17      	lsrs	r7, r2, #16
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	429d      	cmp	r5, r3
 80010a4:	d903      	bls.n	80010ae <__aeabi_ddiv+0x3ba>
 80010a6:	2580      	movs	r5, #128	; 0x80
 80010a8:	026d      	lsls	r5, r5, #9
 80010aa:	46ac      	mov	ip, r5
 80010ac:	4460      	add	r0, ip
 80010ae:	0c1d      	lsrs	r5, r3, #16
 80010b0:	0412      	lsls	r2, r2, #16
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	0c12      	lsrs	r2, r2, #16
 80010b6:	1828      	adds	r0, r5, r0
 80010b8:	189b      	adds	r3, r3, r2
 80010ba:	4286      	cmp	r6, r0
 80010bc:	d200      	bcs.n	80010c0 <__aeabi_ddiv+0x3cc>
 80010be:	e093      	b.n	80011e8 <__aeabi_ddiv+0x4f4>
 80010c0:	d100      	bne.n	80010c4 <__aeabi_ddiv+0x3d0>
 80010c2:	e08e      	b.n	80011e2 <__aeabi_ddiv+0x4ee>
 80010c4:	2301      	movs	r3, #1
 80010c6:	4319      	orrs	r1, r3
 80010c8:	4ba0      	ldr	r3, [pc, #640]	; (800134c <__aeabi_ddiv+0x658>)
 80010ca:	18e3      	adds	r3, r4, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dc00      	bgt.n	80010d2 <__aeabi_ddiv+0x3de>
 80010d0:	e099      	b.n	8001206 <__aeabi_ddiv+0x512>
 80010d2:	074a      	lsls	r2, r1, #29
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x3e4>
 80010d6:	e09e      	b.n	8001216 <__aeabi_ddiv+0x522>
 80010d8:	465a      	mov	r2, fp
 80010da:	01d2      	lsls	r2, r2, #7
 80010dc:	d506      	bpl.n	80010ec <__aeabi_ddiv+0x3f8>
 80010de:	465a      	mov	r2, fp
 80010e0:	4b9b      	ldr	r3, [pc, #620]	; (8001350 <__aeabi_ddiv+0x65c>)
 80010e2:	401a      	ands	r2, r3
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	4693      	mov	fp, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	18e3      	adds	r3, r4, r3
 80010ec:	4a99      	ldr	r2, [pc, #612]	; (8001354 <__aeabi_ddiv+0x660>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	dd68      	ble.n	80011c4 <__aeabi_ddiv+0x4d0>
 80010f2:	2301      	movs	r3, #1
 80010f4:	9a02      	ldr	r2, [sp, #8]
 80010f6:	4c98      	ldr	r4, [pc, #608]	; (8001358 <__aeabi_ddiv+0x664>)
 80010f8:	401a      	ands	r2, r3
 80010fa:	2300      	movs	r3, #0
 80010fc:	4694      	mov	ip, r2
 80010fe:	4698      	mov	r8, r3
 8001100:	2200      	movs	r2, #0
 8001102:	e6c5      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	464b      	mov	r3, r9
 8001108:	0312      	lsls	r2, r2, #12
 800110a:	4213      	tst	r3, r2
 800110c:	d00a      	beq.n	8001124 <__aeabi_ddiv+0x430>
 800110e:	465b      	mov	r3, fp
 8001110:	4213      	tst	r3, r2
 8001112:	d106      	bne.n	8001122 <__aeabi_ddiv+0x42e>
 8001114:	431a      	orrs	r2, r3
 8001116:	0312      	lsls	r2, r2, #12
 8001118:	0b12      	lsrs	r2, r2, #12
 800111a:	46ac      	mov	ip, r5
 800111c:	4688      	mov	r8, r1
 800111e:	4c8e      	ldr	r4, [pc, #568]	; (8001358 <__aeabi_ddiv+0x664>)
 8001120:	e6b6      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8001122:	464b      	mov	r3, r9
 8001124:	431a      	orrs	r2, r3
 8001126:	0312      	lsls	r2, r2, #12
 8001128:	0b12      	lsrs	r2, r2, #12
 800112a:	46bc      	mov	ip, r7
 800112c:	4c8a      	ldr	r4, [pc, #552]	; (8001358 <__aeabi_ddiv+0x664>)
 800112e:	e6af      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8001130:	0003      	movs	r3, r0
 8001132:	465a      	mov	r2, fp
 8001134:	3b28      	subs	r3, #40	; 0x28
 8001136:	409a      	lsls	r2, r3
 8001138:	2300      	movs	r3, #0
 800113a:	4691      	mov	r9, r2
 800113c:	4698      	mov	r8, r3
 800113e:	e657      	b.n	8000df0 <__aeabi_ddiv+0xfc>
 8001140:	4658      	mov	r0, fp
 8001142:	f000 fda9 	bl	8001c98 <__clzsi2>
 8001146:	3020      	adds	r0, #32
 8001148:	e640      	b.n	8000dcc <__aeabi_ddiv+0xd8>
 800114a:	0003      	movs	r3, r0
 800114c:	4652      	mov	r2, sl
 800114e:	3b28      	subs	r3, #40	; 0x28
 8001150:	409a      	lsls	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	4693      	mov	fp, r2
 8001156:	e677      	b.n	8000e48 <__aeabi_ddiv+0x154>
 8001158:	f000 fd9e 	bl	8001c98 <__clzsi2>
 800115c:	3020      	adds	r0, #32
 800115e:	e65f      	b.n	8000e20 <__aeabi_ddiv+0x12c>
 8001160:	4588      	cmp	r8, r1
 8001162:	d200      	bcs.n	8001166 <__aeabi_ddiv+0x472>
 8001164:	e6c7      	b.n	8000ef6 <__aeabi_ddiv+0x202>
 8001166:	464b      	mov	r3, r9
 8001168:	07de      	lsls	r6, r3, #31
 800116a:	085d      	lsrs	r5, r3, #1
 800116c:	4643      	mov	r3, r8
 800116e:	085b      	lsrs	r3, r3, #1
 8001170:	431e      	orrs	r6, r3
 8001172:	4643      	mov	r3, r8
 8001174:	07db      	lsls	r3, r3, #31
 8001176:	469a      	mov	sl, r3
 8001178:	e6c2      	b.n	8000f00 <__aeabi_ddiv+0x20c>
 800117a:	2500      	movs	r5, #0
 800117c:	4592      	cmp	sl, r2
 800117e:	d300      	bcc.n	8001182 <__aeabi_ddiv+0x48e>
 8001180:	e733      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 8001182:	9e03      	ldr	r6, [sp, #12]
 8001184:	4659      	mov	r1, fp
 8001186:	46b4      	mov	ip, r6
 8001188:	44e2      	add	sl, ip
 800118a:	45b2      	cmp	sl, r6
 800118c:	41ad      	sbcs	r5, r5
 800118e:	426d      	negs	r5, r5
 8001190:	4445      	add	r5, r8
 8001192:	18eb      	adds	r3, r5, r3
 8001194:	3901      	subs	r1, #1
 8001196:	4598      	cmp	r8, r3
 8001198:	d207      	bcs.n	80011aa <__aeabi_ddiv+0x4b6>
 800119a:	4298      	cmp	r0, r3
 800119c:	d900      	bls.n	80011a0 <__aeabi_ddiv+0x4ac>
 800119e:	e07f      	b.n	80012a0 <__aeabi_ddiv+0x5ac>
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x4b0>
 80011a2:	e0bc      	b.n	800131e <__aeabi_ddiv+0x62a>
 80011a4:	1a1d      	subs	r5, r3, r0
 80011a6:	468b      	mov	fp, r1
 80011a8:	e71f      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 80011aa:	4598      	cmp	r8, r3
 80011ac:	d1fa      	bne.n	80011a4 <__aeabi_ddiv+0x4b0>
 80011ae:	9d03      	ldr	r5, [sp, #12]
 80011b0:	4555      	cmp	r5, sl
 80011b2:	d9f2      	bls.n	800119a <__aeabi_ddiv+0x4a6>
 80011b4:	4643      	mov	r3, r8
 80011b6:	468b      	mov	fp, r1
 80011b8:	1a1d      	subs	r5, r3, r0
 80011ba:	e716      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 80011bc:	469b      	mov	fp, r3
 80011be:	e6ca      	b.n	8000f56 <__aeabi_ddiv+0x262>
 80011c0:	0015      	movs	r5, r2
 80011c2:	e6e7      	b.n	8000f94 <__aeabi_ddiv+0x2a0>
 80011c4:	465a      	mov	r2, fp
 80011c6:	08c9      	lsrs	r1, r1, #3
 80011c8:	0752      	lsls	r2, r2, #29
 80011ca:	430a      	orrs	r2, r1
 80011cc:	055b      	lsls	r3, r3, #21
 80011ce:	4690      	mov	r8, r2
 80011d0:	0d5c      	lsrs	r4, r3, #21
 80011d2:	465a      	mov	r2, fp
 80011d4:	2301      	movs	r3, #1
 80011d6:	9902      	ldr	r1, [sp, #8]
 80011d8:	0252      	lsls	r2, r2, #9
 80011da:	4019      	ands	r1, r3
 80011dc:	0b12      	lsrs	r2, r2, #12
 80011de:	468c      	mov	ip, r1
 80011e0:	e656      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x4f4>
 80011e6:	e76f      	b.n	80010c8 <__aeabi_ddiv+0x3d4>
 80011e8:	4446      	add	r6, r8
 80011ea:	1e4a      	subs	r2, r1, #1
 80011ec:	45b0      	cmp	r8, r6
 80011ee:	d929      	bls.n	8001244 <__aeabi_ddiv+0x550>
 80011f0:	0011      	movs	r1, r2
 80011f2:	4286      	cmp	r6, r0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_ddiv+0x504>
 80011f6:	e765      	b.n	80010c4 <__aeabi_ddiv+0x3d0>
 80011f8:	9a03      	ldr	r2, [sp, #12]
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d000      	beq.n	8001200 <__aeabi_ddiv+0x50c>
 80011fe:	e761      	b.n	80010c4 <__aeabi_ddiv+0x3d0>
 8001200:	e762      	b.n	80010c8 <__aeabi_ddiv+0x3d4>
 8001202:	2101      	movs	r1, #1
 8001204:	4249      	negs	r1, r1
 8001206:	2001      	movs	r0, #1
 8001208:	1ac2      	subs	r2, r0, r3
 800120a:	2a38      	cmp	r2, #56	; 0x38
 800120c:	dd21      	ble.n	8001252 <__aeabi_ddiv+0x55e>
 800120e:	9b02      	ldr	r3, [sp, #8]
 8001210:	4003      	ands	r3, r0
 8001212:	469c      	mov	ip, r3
 8001214:	e638      	b.n	8000e88 <__aeabi_ddiv+0x194>
 8001216:	220f      	movs	r2, #15
 8001218:	400a      	ands	r2, r1
 800121a:	2a04      	cmp	r2, #4
 800121c:	d100      	bne.n	8001220 <__aeabi_ddiv+0x52c>
 800121e:	e75b      	b.n	80010d8 <__aeabi_ddiv+0x3e4>
 8001220:	000a      	movs	r2, r1
 8001222:	1d11      	adds	r1, r2, #4
 8001224:	4291      	cmp	r1, r2
 8001226:	4192      	sbcs	r2, r2
 8001228:	4252      	negs	r2, r2
 800122a:	4493      	add	fp, r2
 800122c:	e754      	b.n	80010d8 <__aeabi_ddiv+0x3e4>
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <__aeabi_ddiv+0x658>)
 8001230:	18e3      	adds	r3, r4, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	dde5      	ble.n	8001202 <__aeabi_ddiv+0x50e>
 8001236:	2201      	movs	r2, #1
 8001238:	4252      	negs	r2, r2
 800123a:	e7f2      	b.n	8001222 <__aeabi_ddiv+0x52e>
 800123c:	001d      	movs	r5, r3
 800123e:	e6fa      	b.n	8001036 <__aeabi_ddiv+0x342>
 8001240:	469a      	mov	sl, r3
 8001242:	e71c      	b.n	800107e <__aeabi_ddiv+0x38a>
 8001244:	42b0      	cmp	r0, r6
 8001246:	d839      	bhi.n	80012bc <__aeabi_ddiv+0x5c8>
 8001248:	d06e      	beq.n	8001328 <__aeabi_ddiv+0x634>
 800124a:	0011      	movs	r1, r2
 800124c:	e73a      	b.n	80010c4 <__aeabi_ddiv+0x3d0>
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	e73a      	b.n	80010c8 <__aeabi_ddiv+0x3d4>
 8001252:	2a1f      	cmp	r2, #31
 8001254:	dc3c      	bgt.n	80012d0 <__aeabi_ddiv+0x5dc>
 8001256:	2320      	movs	r3, #32
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	000c      	movs	r4, r1
 800125c:	4658      	mov	r0, fp
 800125e:	4099      	lsls	r1, r3
 8001260:	4098      	lsls	r0, r3
 8001262:	1e4b      	subs	r3, r1, #1
 8001264:	4199      	sbcs	r1, r3
 8001266:	465b      	mov	r3, fp
 8001268:	40d4      	lsrs	r4, r2
 800126a:	40d3      	lsrs	r3, r2
 800126c:	4320      	orrs	r0, r4
 800126e:	4308      	orrs	r0, r1
 8001270:	001a      	movs	r2, r3
 8001272:	0743      	lsls	r3, r0, #29
 8001274:	d009      	beq.n	800128a <__aeabi_ddiv+0x596>
 8001276:	230f      	movs	r3, #15
 8001278:	4003      	ands	r3, r0
 800127a:	2b04      	cmp	r3, #4
 800127c:	d005      	beq.n	800128a <__aeabi_ddiv+0x596>
 800127e:	0001      	movs	r1, r0
 8001280:	1d08      	adds	r0, r1, #4
 8001282:	4288      	cmp	r0, r1
 8001284:	419b      	sbcs	r3, r3
 8001286:	425b      	negs	r3, r3
 8001288:	18d2      	adds	r2, r2, r3
 800128a:	0213      	lsls	r3, r2, #8
 800128c:	d53a      	bpl.n	8001304 <__aeabi_ddiv+0x610>
 800128e:	2301      	movs	r3, #1
 8001290:	9a02      	ldr	r2, [sp, #8]
 8001292:	2401      	movs	r4, #1
 8001294:	401a      	ands	r2, r3
 8001296:	2300      	movs	r3, #0
 8001298:	4694      	mov	ip, r2
 800129a:	4698      	mov	r8, r3
 800129c:	2200      	movs	r2, #0
 800129e:	e5f7      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 80012a0:	2102      	movs	r1, #2
 80012a2:	4249      	negs	r1, r1
 80012a4:	468c      	mov	ip, r1
 80012a6:	9d03      	ldr	r5, [sp, #12]
 80012a8:	44e3      	add	fp, ip
 80012aa:	46ac      	mov	ip, r5
 80012ac:	44e2      	add	sl, ip
 80012ae:	45aa      	cmp	sl, r5
 80012b0:	41ad      	sbcs	r5, r5
 80012b2:	426d      	negs	r5, r5
 80012b4:	4445      	add	r5, r8
 80012b6:	18ed      	adds	r5, r5, r3
 80012b8:	1a2d      	subs	r5, r5, r0
 80012ba:	e696      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 80012bc:	1e8a      	subs	r2, r1, #2
 80012be:	9903      	ldr	r1, [sp, #12]
 80012c0:	004d      	lsls	r5, r1, #1
 80012c2:	428d      	cmp	r5, r1
 80012c4:	4189      	sbcs	r1, r1
 80012c6:	4249      	negs	r1, r1
 80012c8:	4441      	add	r1, r8
 80012ca:	1876      	adds	r6, r6, r1
 80012cc:	9503      	str	r5, [sp, #12]
 80012ce:	e78f      	b.n	80011f0 <__aeabi_ddiv+0x4fc>
 80012d0:	201f      	movs	r0, #31
 80012d2:	4240      	negs	r0, r0
 80012d4:	1ac3      	subs	r3, r0, r3
 80012d6:	4658      	mov	r0, fp
 80012d8:	40d8      	lsrs	r0, r3
 80012da:	0003      	movs	r3, r0
 80012dc:	2a20      	cmp	r2, #32
 80012de:	d028      	beq.n	8001332 <__aeabi_ddiv+0x63e>
 80012e0:	2040      	movs	r0, #64	; 0x40
 80012e2:	465d      	mov	r5, fp
 80012e4:	1a82      	subs	r2, r0, r2
 80012e6:	4095      	lsls	r5, r2
 80012e8:	4329      	orrs	r1, r5
 80012ea:	1e4a      	subs	r2, r1, #1
 80012ec:	4191      	sbcs	r1, r2
 80012ee:	4319      	orrs	r1, r3
 80012f0:	2307      	movs	r3, #7
 80012f2:	2200      	movs	r2, #0
 80012f4:	400b      	ands	r3, r1
 80012f6:	d009      	beq.n	800130c <__aeabi_ddiv+0x618>
 80012f8:	230f      	movs	r3, #15
 80012fa:	2200      	movs	r2, #0
 80012fc:	400b      	ands	r3, r1
 80012fe:	0008      	movs	r0, r1
 8001300:	2b04      	cmp	r3, #4
 8001302:	d1bd      	bne.n	8001280 <__aeabi_ddiv+0x58c>
 8001304:	0001      	movs	r1, r0
 8001306:	0753      	lsls	r3, r2, #29
 8001308:	0252      	lsls	r2, r2, #9
 800130a:	0b12      	lsrs	r2, r2, #12
 800130c:	08c9      	lsrs	r1, r1, #3
 800130e:	4319      	orrs	r1, r3
 8001310:	2301      	movs	r3, #1
 8001312:	4688      	mov	r8, r1
 8001314:	9902      	ldr	r1, [sp, #8]
 8001316:	2400      	movs	r4, #0
 8001318:	4019      	ands	r1, r3
 800131a:	468c      	mov	ip, r1
 800131c:	e5b8      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 800131e:	4552      	cmp	r2, sl
 8001320:	d8be      	bhi.n	80012a0 <__aeabi_ddiv+0x5ac>
 8001322:	468b      	mov	fp, r1
 8001324:	2500      	movs	r5, #0
 8001326:	e660      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 8001328:	9d03      	ldr	r5, [sp, #12]
 800132a:	429d      	cmp	r5, r3
 800132c:	d3c6      	bcc.n	80012bc <__aeabi_ddiv+0x5c8>
 800132e:	0011      	movs	r1, r2
 8001330:	e762      	b.n	80011f8 <__aeabi_ddiv+0x504>
 8001332:	2500      	movs	r5, #0
 8001334:	e7d8      	b.n	80012e8 <__aeabi_ddiv+0x5f4>
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	465b      	mov	r3, fp
 800133a:	0312      	lsls	r2, r2, #12
 800133c:	431a      	orrs	r2, r3
 800133e:	9b01      	ldr	r3, [sp, #4]
 8001340:	0312      	lsls	r2, r2, #12
 8001342:	0b12      	lsrs	r2, r2, #12
 8001344:	469c      	mov	ip, r3
 8001346:	4688      	mov	r8, r1
 8001348:	4c03      	ldr	r4, [pc, #12]	; (8001358 <__aeabi_ddiv+0x664>)
 800134a:	e5a1      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 800134c:	000003ff 	.word	0x000003ff
 8001350:	feffffff 	.word	0xfeffffff
 8001354:	000007fe 	.word	0x000007fe
 8001358:	000007ff 	.word	0x000007ff

0800135c <__eqdf2>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	464f      	mov	r7, r9
 8001360:	4646      	mov	r6, r8
 8001362:	46d6      	mov	lr, sl
 8001364:	005c      	lsls	r4, r3, #1
 8001366:	b5c0      	push	{r6, r7, lr}
 8001368:	031f      	lsls	r7, r3, #12
 800136a:	0fdb      	lsrs	r3, r3, #31
 800136c:	469a      	mov	sl, r3
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <__eqdf2+0x70>)
 8001370:	030e      	lsls	r6, r1, #12
 8001372:	004d      	lsls	r5, r1, #1
 8001374:	4684      	mov	ip, r0
 8001376:	4680      	mov	r8, r0
 8001378:	0b36      	lsrs	r6, r6, #12
 800137a:	0d6d      	lsrs	r5, r5, #21
 800137c:	0fc9      	lsrs	r1, r1, #31
 800137e:	4691      	mov	r9, r2
 8001380:	0b3f      	lsrs	r7, r7, #12
 8001382:	0d64      	lsrs	r4, r4, #21
 8001384:	2001      	movs	r0, #1
 8001386:	429d      	cmp	r5, r3
 8001388:	d008      	beq.n	800139c <__eqdf2+0x40>
 800138a:	429c      	cmp	r4, r3
 800138c:	d001      	beq.n	8001392 <__eqdf2+0x36>
 800138e:	42a5      	cmp	r5, r4
 8001390:	d00b      	beq.n	80013aa <__eqdf2+0x4e>
 8001392:	bc1c      	pop	{r2, r3, r4}
 8001394:	4690      	mov	r8, r2
 8001396:	4699      	mov	r9, r3
 8001398:	46a2      	mov	sl, r4
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139c:	4663      	mov	r3, ip
 800139e:	4333      	orrs	r3, r6
 80013a0:	d1f7      	bne.n	8001392 <__eqdf2+0x36>
 80013a2:	42ac      	cmp	r4, r5
 80013a4:	d1f5      	bne.n	8001392 <__eqdf2+0x36>
 80013a6:	433a      	orrs	r2, r7
 80013a8:	d1f3      	bne.n	8001392 <__eqdf2+0x36>
 80013aa:	2001      	movs	r0, #1
 80013ac:	42be      	cmp	r6, r7
 80013ae:	d1f0      	bne.n	8001392 <__eqdf2+0x36>
 80013b0:	45c8      	cmp	r8, r9
 80013b2:	d1ee      	bne.n	8001392 <__eqdf2+0x36>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	d007      	beq.n	80013c8 <__eqdf2+0x6c>
 80013b8:	2d00      	cmp	r5, #0
 80013ba:	d1ea      	bne.n	8001392 <__eqdf2+0x36>
 80013bc:	4663      	mov	r3, ip
 80013be:	431e      	orrs	r6, r3
 80013c0:	0030      	movs	r0, r6
 80013c2:	1e46      	subs	r6, r0, #1
 80013c4:	41b0      	sbcs	r0, r6
 80013c6:	e7e4      	b.n	8001392 <__eqdf2+0x36>
 80013c8:	2000      	movs	r0, #0
 80013ca:	e7e2      	b.n	8001392 <__eqdf2+0x36>
 80013cc:	000007ff 	.word	0x000007ff

080013d0 <__gedf2>:
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	4645      	mov	r5, r8
 80013d4:	46de      	mov	lr, fp
 80013d6:	4657      	mov	r7, sl
 80013d8:	464e      	mov	r6, r9
 80013da:	b5e0      	push	{r5, r6, r7, lr}
 80013dc:	031f      	lsls	r7, r3, #12
 80013de:	0b3d      	lsrs	r5, r7, #12
 80013e0:	4f2c      	ldr	r7, [pc, #176]	; (8001494 <__gedf2+0xc4>)
 80013e2:	030e      	lsls	r6, r1, #12
 80013e4:	004c      	lsls	r4, r1, #1
 80013e6:	46ab      	mov	fp, r5
 80013e8:	005d      	lsls	r5, r3, #1
 80013ea:	4684      	mov	ip, r0
 80013ec:	0b36      	lsrs	r6, r6, #12
 80013ee:	0d64      	lsrs	r4, r4, #21
 80013f0:	0fc9      	lsrs	r1, r1, #31
 80013f2:	4690      	mov	r8, r2
 80013f4:	0d6d      	lsrs	r5, r5, #21
 80013f6:	0fdb      	lsrs	r3, r3, #31
 80013f8:	42bc      	cmp	r4, r7
 80013fa:	d02a      	beq.n	8001452 <__gedf2+0x82>
 80013fc:	4f25      	ldr	r7, [pc, #148]	; (8001494 <__gedf2+0xc4>)
 80013fe:	42bd      	cmp	r5, r7
 8001400:	d02d      	beq.n	800145e <__gedf2+0x8e>
 8001402:	2c00      	cmp	r4, #0
 8001404:	d10f      	bne.n	8001426 <__gedf2+0x56>
 8001406:	4330      	orrs	r0, r6
 8001408:	0007      	movs	r7, r0
 800140a:	4681      	mov	r9, r0
 800140c:	4278      	negs	r0, r7
 800140e:	4178      	adcs	r0, r7
 8001410:	b2c0      	uxtb	r0, r0
 8001412:	2d00      	cmp	r5, #0
 8001414:	d117      	bne.n	8001446 <__gedf2+0x76>
 8001416:	465f      	mov	r7, fp
 8001418:	433a      	orrs	r2, r7
 800141a:	d114      	bne.n	8001446 <__gedf2+0x76>
 800141c:	464b      	mov	r3, r9
 800141e:	2000      	movs	r0, #0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00a      	beq.n	800143a <__gedf2+0x6a>
 8001424:	e006      	b.n	8001434 <__gedf2+0x64>
 8001426:	2d00      	cmp	r5, #0
 8001428:	d102      	bne.n	8001430 <__gedf2+0x60>
 800142a:	4658      	mov	r0, fp
 800142c:	4302      	orrs	r2, r0
 800142e:	d001      	beq.n	8001434 <__gedf2+0x64>
 8001430:	4299      	cmp	r1, r3
 8001432:	d018      	beq.n	8001466 <__gedf2+0x96>
 8001434:	4248      	negs	r0, r1
 8001436:	2101      	movs	r1, #1
 8001438:	4308      	orrs	r0, r1
 800143a:	bc3c      	pop	{r2, r3, r4, r5}
 800143c:	4690      	mov	r8, r2
 800143e:	4699      	mov	r9, r3
 8001440:	46a2      	mov	sl, r4
 8001442:	46ab      	mov	fp, r5
 8001444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001446:	2800      	cmp	r0, #0
 8001448:	d0f2      	beq.n	8001430 <__gedf2+0x60>
 800144a:	2001      	movs	r0, #1
 800144c:	3b01      	subs	r3, #1
 800144e:	4318      	orrs	r0, r3
 8001450:	e7f3      	b.n	800143a <__gedf2+0x6a>
 8001452:	0037      	movs	r7, r6
 8001454:	4307      	orrs	r7, r0
 8001456:	d0d1      	beq.n	80013fc <__gedf2+0x2c>
 8001458:	2002      	movs	r0, #2
 800145a:	4240      	negs	r0, r0
 800145c:	e7ed      	b.n	800143a <__gedf2+0x6a>
 800145e:	465f      	mov	r7, fp
 8001460:	4317      	orrs	r7, r2
 8001462:	d0ce      	beq.n	8001402 <__gedf2+0x32>
 8001464:	e7f8      	b.n	8001458 <__gedf2+0x88>
 8001466:	42ac      	cmp	r4, r5
 8001468:	dce4      	bgt.n	8001434 <__gedf2+0x64>
 800146a:	da03      	bge.n	8001474 <__gedf2+0xa4>
 800146c:	1e48      	subs	r0, r1, #1
 800146e:	2101      	movs	r1, #1
 8001470:	4308      	orrs	r0, r1
 8001472:	e7e2      	b.n	800143a <__gedf2+0x6a>
 8001474:	455e      	cmp	r6, fp
 8001476:	d8dd      	bhi.n	8001434 <__gedf2+0x64>
 8001478:	d006      	beq.n	8001488 <__gedf2+0xb8>
 800147a:	2000      	movs	r0, #0
 800147c:	455e      	cmp	r6, fp
 800147e:	d2dc      	bcs.n	800143a <__gedf2+0x6a>
 8001480:	2301      	movs	r3, #1
 8001482:	1e48      	subs	r0, r1, #1
 8001484:	4318      	orrs	r0, r3
 8001486:	e7d8      	b.n	800143a <__gedf2+0x6a>
 8001488:	45c4      	cmp	ip, r8
 800148a:	d8d3      	bhi.n	8001434 <__gedf2+0x64>
 800148c:	2000      	movs	r0, #0
 800148e:	45c4      	cmp	ip, r8
 8001490:	d3f6      	bcc.n	8001480 <__gedf2+0xb0>
 8001492:	e7d2      	b.n	800143a <__gedf2+0x6a>
 8001494:	000007ff 	.word	0x000007ff

08001498 <__ledf2>:
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	464e      	mov	r6, r9
 800149c:	4645      	mov	r5, r8
 800149e:	46de      	mov	lr, fp
 80014a0:	4657      	mov	r7, sl
 80014a2:	005c      	lsls	r4, r3, #1
 80014a4:	b5e0      	push	{r5, r6, r7, lr}
 80014a6:	031f      	lsls	r7, r3, #12
 80014a8:	0fdb      	lsrs	r3, r3, #31
 80014aa:	4699      	mov	r9, r3
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <__ledf2+0xc0>)
 80014ae:	030e      	lsls	r6, r1, #12
 80014b0:	004d      	lsls	r5, r1, #1
 80014b2:	0fc9      	lsrs	r1, r1, #31
 80014b4:	4684      	mov	ip, r0
 80014b6:	0b36      	lsrs	r6, r6, #12
 80014b8:	0d6d      	lsrs	r5, r5, #21
 80014ba:	468b      	mov	fp, r1
 80014bc:	4690      	mov	r8, r2
 80014be:	0b3f      	lsrs	r7, r7, #12
 80014c0:	0d64      	lsrs	r4, r4, #21
 80014c2:	429d      	cmp	r5, r3
 80014c4:	d020      	beq.n	8001508 <__ledf2+0x70>
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <__ledf2+0xc0>)
 80014c8:	429c      	cmp	r4, r3
 80014ca:	d022      	beq.n	8001512 <__ledf2+0x7a>
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	d112      	bne.n	80014f6 <__ledf2+0x5e>
 80014d0:	4330      	orrs	r0, r6
 80014d2:	4243      	negs	r3, r0
 80014d4:	4143      	adcs	r3, r0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d01f      	beq.n	800151c <__ledf2+0x84>
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00c      	beq.n	80014fa <__ledf2+0x62>
 80014e0:	464b      	mov	r3, r9
 80014e2:	2001      	movs	r0, #1
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4303      	orrs	r3, r0
 80014e8:	0018      	movs	r0, r3
 80014ea:	bc3c      	pop	{r2, r3, r4, r5}
 80014ec:	4690      	mov	r8, r2
 80014ee:	4699      	mov	r9, r3
 80014f0:	46a2      	mov	sl, r4
 80014f2:	46ab      	mov	fp, r5
 80014f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f6:	2c00      	cmp	r4, #0
 80014f8:	d016      	beq.n	8001528 <__ledf2+0x90>
 80014fa:	45cb      	cmp	fp, r9
 80014fc:	d017      	beq.n	800152e <__ledf2+0x96>
 80014fe:	465b      	mov	r3, fp
 8001500:	4259      	negs	r1, r3
 8001502:	2301      	movs	r3, #1
 8001504:	430b      	orrs	r3, r1
 8001506:	e7ef      	b.n	80014e8 <__ledf2+0x50>
 8001508:	0031      	movs	r1, r6
 800150a:	2302      	movs	r3, #2
 800150c:	4301      	orrs	r1, r0
 800150e:	d1eb      	bne.n	80014e8 <__ledf2+0x50>
 8001510:	e7d9      	b.n	80014c6 <__ledf2+0x2e>
 8001512:	0039      	movs	r1, r7
 8001514:	2302      	movs	r3, #2
 8001516:	4311      	orrs	r1, r2
 8001518:	d1e6      	bne.n	80014e8 <__ledf2+0x50>
 800151a:	e7d7      	b.n	80014cc <__ledf2+0x34>
 800151c:	433a      	orrs	r2, r7
 800151e:	d1dd      	bne.n	80014dc <__ledf2+0x44>
 8001520:	2300      	movs	r3, #0
 8001522:	2800      	cmp	r0, #0
 8001524:	d0e0      	beq.n	80014e8 <__ledf2+0x50>
 8001526:	e7ea      	b.n	80014fe <__ledf2+0x66>
 8001528:	433a      	orrs	r2, r7
 800152a:	d1e6      	bne.n	80014fa <__ledf2+0x62>
 800152c:	e7e7      	b.n	80014fe <__ledf2+0x66>
 800152e:	42a5      	cmp	r5, r4
 8001530:	dce5      	bgt.n	80014fe <__ledf2+0x66>
 8001532:	db05      	blt.n	8001540 <__ledf2+0xa8>
 8001534:	42be      	cmp	r6, r7
 8001536:	d8e2      	bhi.n	80014fe <__ledf2+0x66>
 8001538:	d007      	beq.n	800154a <__ledf2+0xb2>
 800153a:	2300      	movs	r3, #0
 800153c:	42be      	cmp	r6, r7
 800153e:	d2d3      	bcs.n	80014e8 <__ledf2+0x50>
 8001540:	4659      	mov	r1, fp
 8001542:	2301      	movs	r3, #1
 8001544:	3901      	subs	r1, #1
 8001546:	430b      	orrs	r3, r1
 8001548:	e7ce      	b.n	80014e8 <__ledf2+0x50>
 800154a:	45c4      	cmp	ip, r8
 800154c:	d8d7      	bhi.n	80014fe <__ledf2+0x66>
 800154e:	2300      	movs	r3, #0
 8001550:	45c4      	cmp	ip, r8
 8001552:	d3f5      	bcc.n	8001540 <__ledf2+0xa8>
 8001554:	e7c8      	b.n	80014e8 <__ledf2+0x50>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	000007ff 	.word	0x000007ff

0800155c <__aeabi_dmul>:
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	4657      	mov	r7, sl
 8001560:	4645      	mov	r5, r8
 8001562:	46de      	mov	lr, fp
 8001564:	464e      	mov	r6, r9
 8001566:	b5e0      	push	{r5, r6, r7, lr}
 8001568:	030c      	lsls	r4, r1, #12
 800156a:	4698      	mov	r8, r3
 800156c:	004e      	lsls	r6, r1, #1
 800156e:	0b23      	lsrs	r3, r4, #12
 8001570:	b087      	sub	sp, #28
 8001572:	0007      	movs	r7, r0
 8001574:	4692      	mov	sl, r2
 8001576:	469b      	mov	fp, r3
 8001578:	0d76      	lsrs	r6, r6, #21
 800157a:	0fcd      	lsrs	r5, r1, #31
 800157c:	2e00      	cmp	r6, #0
 800157e:	d06b      	beq.n	8001658 <__aeabi_dmul+0xfc>
 8001580:	4b6d      	ldr	r3, [pc, #436]	; (8001738 <__aeabi_dmul+0x1dc>)
 8001582:	429e      	cmp	r6, r3
 8001584:	d035      	beq.n	80015f2 <__aeabi_dmul+0x96>
 8001586:	2480      	movs	r4, #128	; 0x80
 8001588:	465b      	mov	r3, fp
 800158a:	0f42      	lsrs	r2, r0, #29
 800158c:	0424      	lsls	r4, r4, #16
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4314      	orrs	r4, r2
 8001592:	431c      	orrs	r4, r3
 8001594:	00c3      	lsls	r3, r0, #3
 8001596:	4699      	mov	r9, r3
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <__aeabi_dmul+0x1e0>)
 800159a:	46a3      	mov	fp, r4
 800159c:	469c      	mov	ip, r3
 800159e:	2300      	movs	r3, #0
 80015a0:	2700      	movs	r7, #0
 80015a2:	4466      	add	r6, ip
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	4643      	mov	r3, r8
 80015a8:	031c      	lsls	r4, r3, #12
 80015aa:	005a      	lsls	r2, r3, #1
 80015ac:	0fdb      	lsrs	r3, r3, #31
 80015ae:	4650      	mov	r0, sl
 80015b0:	0b24      	lsrs	r4, r4, #12
 80015b2:	0d52      	lsrs	r2, r2, #21
 80015b4:	4698      	mov	r8, r3
 80015b6:	d100      	bne.n	80015ba <__aeabi_dmul+0x5e>
 80015b8:	e076      	b.n	80016a8 <__aeabi_dmul+0x14c>
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <__aeabi_dmul+0x1dc>)
 80015bc:	429a      	cmp	r2, r3
 80015be:	d06d      	beq.n	800169c <__aeabi_dmul+0x140>
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	0f41      	lsrs	r1, r0, #29
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	430b      	orrs	r3, r1
 80015c8:	495c      	ldr	r1, [pc, #368]	; (800173c <__aeabi_dmul+0x1e0>)
 80015ca:	00e4      	lsls	r4, r4, #3
 80015cc:	468c      	mov	ip, r1
 80015ce:	431c      	orrs	r4, r3
 80015d0:	00c3      	lsls	r3, r0, #3
 80015d2:	2000      	movs	r0, #0
 80015d4:	4462      	add	r2, ip
 80015d6:	4641      	mov	r1, r8
 80015d8:	18b6      	adds	r6, r6, r2
 80015da:	4069      	eors	r1, r5
 80015dc:	1c72      	adds	r2, r6, #1
 80015de:	9101      	str	r1, [sp, #4]
 80015e0:	4694      	mov	ip, r2
 80015e2:	4307      	orrs	r7, r0
 80015e4:	2f0f      	cmp	r7, #15
 80015e6:	d900      	bls.n	80015ea <__aeabi_dmul+0x8e>
 80015e8:	e0b0      	b.n	800174c <__aeabi_dmul+0x1f0>
 80015ea:	4a55      	ldr	r2, [pc, #340]	; (8001740 <__aeabi_dmul+0x1e4>)
 80015ec:	00bf      	lsls	r7, r7, #2
 80015ee:	59d2      	ldr	r2, [r2, r7]
 80015f0:	4697      	mov	pc, r2
 80015f2:	465b      	mov	r3, fp
 80015f4:	4303      	orrs	r3, r0
 80015f6:	4699      	mov	r9, r3
 80015f8:	d000      	beq.n	80015fc <__aeabi_dmul+0xa0>
 80015fa:	e087      	b.n	800170c <__aeabi_dmul+0x1b0>
 80015fc:	2300      	movs	r3, #0
 80015fe:	469b      	mov	fp, r3
 8001600:	3302      	adds	r3, #2
 8001602:	2708      	movs	r7, #8
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	e7ce      	b.n	80015a6 <__aeabi_dmul+0x4a>
 8001608:	4642      	mov	r2, r8
 800160a:	9201      	str	r2, [sp, #4]
 800160c:	2802      	cmp	r0, #2
 800160e:	d067      	beq.n	80016e0 <__aeabi_dmul+0x184>
 8001610:	2803      	cmp	r0, #3
 8001612:	d100      	bne.n	8001616 <__aeabi_dmul+0xba>
 8001614:	e20e      	b.n	8001a34 <__aeabi_dmul+0x4d8>
 8001616:	2801      	cmp	r0, #1
 8001618:	d000      	beq.n	800161c <__aeabi_dmul+0xc0>
 800161a:	e162      	b.n	80018e2 <__aeabi_dmul+0x386>
 800161c:	2300      	movs	r3, #0
 800161e:	2400      	movs	r4, #0
 8001620:	2200      	movs	r2, #0
 8001622:	4699      	mov	r9, r3
 8001624:	9901      	ldr	r1, [sp, #4]
 8001626:	4001      	ands	r1, r0
 8001628:	b2cd      	uxtb	r5, r1
 800162a:	2100      	movs	r1, #0
 800162c:	0312      	lsls	r2, r2, #12
 800162e:	0d0b      	lsrs	r3, r1, #20
 8001630:	0b12      	lsrs	r2, r2, #12
 8001632:	051b      	lsls	r3, r3, #20
 8001634:	4313      	orrs	r3, r2
 8001636:	4a43      	ldr	r2, [pc, #268]	; (8001744 <__aeabi_dmul+0x1e8>)
 8001638:	0524      	lsls	r4, r4, #20
 800163a:	4013      	ands	r3, r2
 800163c:	431c      	orrs	r4, r3
 800163e:	0064      	lsls	r4, r4, #1
 8001640:	07ed      	lsls	r5, r5, #31
 8001642:	0864      	lsrs	r4, r4, #1
 8001644:	432c      	orrs	r4, r5
 8001646:	4648      	mov	r0, r9
 8001648:	0021      	movs	r1, r4
 800164a:	b007      	add	sp, #28
 800164c:	bc3c      	pop	{r2, r3, r4, r5}
 800164e:	4690      	mov	r8, r2
 8001650:	4699      	mov	r9, r3
 8001652:	46a2      	mov	sl, r4
 8001654:	46ab      	mov	fp, r5
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001658:	4303      	orrs	r3, r0
 800165a:	4699      	mov	r9, r3
 800165c:	d04f      	beq.n	80016fe <__aeabi_dmul+0x1a2>
 800165e:	465b      	mov	r3, fp
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x10a>
 8001664:	e189      	b.n	800197a <__aeabi_dmul+0x41e>
 8001666:	4658      	mov	r0, fp
 8001668:	f000 fb16 	bl	8001c98 <__clzsi2>
 800166c:	0003      	movs	r3, r0
 800166e:	3b0b      	subs	r3, #11
 8001670:	2b1c      	cmp	r3, #28
 8001672:	dd00      	ble.n	8001676 <__aeabi_dmul+0x11a>
 8001674:	e17a      	b.n	800196c <__aeabi_dmul+0x410>
 8001676:	221d      	movs	r2, #29
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	003a      	movs	r2, r7
 800167c:	0001      	movs	r1, r0
 800167e:	465c      	mov	r4, fp
 8001680:	40da      	lsrs	r2, r3
 8001682:	3908      	subs	r1, #8
 8001684:	408c      	lsls	r4, r1
 8001686:	0013      	movs	r3, r2
 8001688:	408f      	lsls	r7, r1
 800168a:	4323      	orrs	r3, r4
 800168c:	469b      	mov	fp, r3
 800168e:	46b9      	mov	r9, r7
 8001690:	2300      	movs	r3, #0
 8001692:	4e2d      	ldr	r6, [pc, #180]	; (8001748 <__aeabi_dmul+0x1ec>)
 8001694:	2700      	movs	r7, #0
 8001696:	1a36      	subs	r6, r6, r0
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	e784      	b.n	80015a6 <__aeabi_dmul+0x4a>
 800169c:	4653      	mov	r3, sl
 800169e:	4323      	orrs	r3, r4
 80016a0:	d12a      	bne.n	80016f8 <__aeabi_dmul+0x19c>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2002      	movs	r0, #2
 80016a6:	e796      	b.n	80015d6 <__aeabi_dmul+0x7a>
 80016a8:	4653      	mov	r3, sl
 80016aa:	4323      	orrs	r3, r4
 80016ac:	d020      	beq.n	80016f0 <__aeabi_dmul+0x194>
 80016ae:	2c00      	cmp	r4, #0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dmul+0x158>
 80016b2:	e157      	b.n	8001964 <__aeabi_dmul+0x408>
 80016b4:	0020      	movs	r0, r4
 80016b6:	f000 faef 	bl	8001c98 <__clzsi2>
 80016ba:	0003      	movs	r3, r0
 80016bc:	3b0b      	subs	r3, #11
 80016be:	2b1c      	cmp	r3, #28
 80016c0:	dd00      	ble.n	80016c4 <__aeabi_dmul+0x168>
 80016c2:	e149      	b.n	8001958 <__aeabi_dmul+0x3fc>
 80016c4:	211d      	movs	r1, #29
 80016c6:	1acb      	subs	r3, r1, r3
 80016c8:	4651      	mov	r1, sl
 80016ca:	0002      	movs	r2, r0
 80016cc:	40d9      	lsrs	r1, r3
 80016ce:	4653      	mov	r3, sl
 80016d0:	3a08      	subs	r2, #8
 80016d2:	4094      	lsls	r4, r2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	430c      	orrs	r4, r1
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <__aeabi_dmul+0x1ec>)
 80016da:	1a12      	subs	r2, r2, r0
 80016dc:	2000      	movs	r0, #0
 80016de:	e77a      	b.n	80015d6 <__aeabi_dmul+0x7a>
 80016e0:	2501      	movs	r5, #1
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	4c14      	ldr	r4, [pc, #80]	; (8001738 <__aeabi_dmul+0x1dc>)
 80016e6:	401d      	ands	r5, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	2200      	movs	r2, #0
 80016ec:	4699      	mov	r9, r3
 80016ee:	e79c      	b.n	800162a <__aeabi_dmul+0xce>
 80016f0:	2400      	movs	r4, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	2001      	movs	r0, #1
 80016f6:	e76e      	b.n	80015d6 <__aeabi_dmul+0x7a>
 80016f8:	4653      	mov	r3, sl
 80016fa:	2003      	movs	r0, #3
 80016fc:	e76b      	b.n	80015d6 <__aeabi_dmul+0x7a>
 80016fe:	2300      	movs	r3, #0
 8001700:	469b      	mov	fp, r3
 8001702:	3301      	adds	r3, #1
 8001704:	2704      	movs	r7, #4
 8001706:	2600      	movs	r6, #0
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	e74c      	b.n	80015a6 <__aeabi_dmul+0x4a>
 800170c:	2303      	movs	r3, #3
 800170e:	4681      	mov	r9, r0
 8001710:	270c      	movs	r7, #12
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	e747      	b.n	80015a6 <__aeabi_dmul+0x4a>
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	2300      	movs	r3, #0
 800171a:	2500      	movs	r5, #0
 800171c:	0312      	lsls	r2, r2, #12
 800171e:	4699      	mov	r9, r3
 8001720:	4c05      	ldr	r4, [pc, #20]	; (8001738 <__aeabi_dmul+0x1dc>)
 8001722:	e782      	b.n	800162a <__aeabi_dmul+0xce>
 8001724:	465c      	mov	r4, fp
 8001726:	464b      	mov	r3, r9
 8001728:	9802      	ldr	r0, [sp, #8]
 800172a:	e76f      	b.n	800160c <__aeabi_dmul+0xb0>
 800172c:	465c      	mov	r4, fp
 800172e:	464b      	mov	r3, r9
 8001730:	9501      	str	r5, [sp, #4]
 8001732:	9802      	ldr	r0, [sp, #8]
 8001734:	e76a      	b.n	800160c <__aeabi_dmul+0xb0>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	000007ff 	.word	0x000007ff
 800173c:	fffffc01 	.word	0xfffffc01
 8001740:	080049b0 	.word	0x080049b0
 8001744:	800fffff 	.word	0x800fffff
 8001748:	fffffc0d 	.word	0xfffffc0d
 800174c:	464a      	mov	r2, r9
 800174e:	4649      	mov	r1, r9
 8001750:	0c17      	lsrs	r7, r2, #16
 8001752:	0c1a      	lsrs	r2, r3, #16
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	0408      	lsls	r0, r1, #16
 800175a:	0019      	movs	r1, r3
 800175c:	0c00      	lsrs	r0, r0, #16
 800175e:	4341      	muls	r1, r0
 8001760:	0015      	movs	r5, r2
 8001762:	4688      	mov	r8, r1
 8001764:	0019      	movs	r1, r3
 8001766:	437d      	muls	r5, r7
 8001768:	4379      	muls	r1, r7
 800176a:	9503      	str	r5, [sp, #12]
 800176c:	4689      	mov	r9, r1
 800176e:	0029      	movs	r1, r5
 8001770:	0015      	movs	r5, r2
 8001772:	4345      	muls	r5, r0
 8001774:	444d      	add	r5, r9
 8001776:	9502      	str	r5, [sp, #8]
 8001778:	4645      	mov	r5, r8
 800177a:	0c2d      	lsrs	r5, r5, #16
 800177c:	46aa      	mov	sl, r5
 800177e:	9d02      	ldr	r5, [sp, #8]
 8001780:	4455      	add	r5, sl
 8001782:	45a9      	cmp	r9, r5
 8001784:	d906      	bls.n	8001794 <__aeabi_dmul+0x238>
 8001786:	468a      	mov	sl, r1
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0249      	lsls	r1, r1, #9
 800178c:	4689      	mov	r9, r1
 800178e:	44ca      	add	sl, r9
 8001790:	4651      	mov	r1, sl
 8001792:	9103      	str	r1, [sp, #12]
 8001794:	0c29      	lsrs	r1, r5, #16
 8001796:	9104      	str	r1, [sp, #16]
 8001798:	4641      	mov	r1, r8
 800179a:	0409      	lsls	r1, r1, #16
 800179c:	042d      	lsls	r5, r5, #16
 800179e:	0c09      	lsrs	r1, r1, #16
 80017a0:	4688      	mov	r8, r1
 80017a2:	0029      	movs	r1, r5
 80017a4:	0c25      	lsrs	r5, r4, #16
 80017a6:	0424      	lsls	r4, r4, #16
 80017a8:	4441      	add	r1, r8
 80017aa:	0c24      	lsrs	r4, r4, #16
 80017ac:	9105      	str	r1, [sp, #20]
 80017ae:	0021      	movs	r1, r4
 80017b0:	4341      	muls	r1, r0
 80017b2:	4688      	mov	r8, r1
 80017b4:	0021      	movs	r1, r4
 80017b6:	4379      	muls	r1, r7
 80017b8:	468a      	mov	sl, r1
 80017ba:	4368      	muls	r0, r5
 80017bc:	4641      	mov	r1, r8
 80017be:	4450      	add	r0, sl
 80017c0:	4681      	mov	r9, r0
 80017c2:	0c08      	lsrs	r0, r1, #16
 80017c4:	4448      	add	r0, r9
 80017c6:	436f      	muls	r7, r5
 80017c8:	4582      	cmp	sl, r0
 80017ca:	d903      	bls.n	80017d4 <__aeabi_dmul+0x278>
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	0249      	lsls	r1, r1, #9
 80017d0:	4689      	mov	r9, r1
 80017d2:	444f      	add	r7, r9
 80017d4:	0c01      	lsrs	r1, r0, #16
 80017d6:	4689      	mov	r9, r1
 80017d8:	0039      	movs	r1, r7
 80017da:	4449      	add	r1, r9
 80017dc:	9102      	str	r1, [sp, #8]
 80017de:	4641      	mov	r1, r8
 80017e0:	040f      	lsls	r7, r1, #16
 80017e2:	9904      	ldr	r1, [sp, #16]
 80017e4:	0c3f      	lsrs	r7, r7, #16
 80017e6:	4688      	mov	r8, r1
 80017e8:	0400      	lsls	r0, r0, #16
 80017ea:	19c0      	adds	r0, r0, r7
 80017ec:	4480      	add	r8, r0
 80017ee:	4641      	mov	r1, r8
 80017f0:	9104      	str	r1, [sp, #16]
 80017f2:	4659      	mov	r1, fp
 80017f4:	0c0f      	lsrs	r7, r1, #16
 80017f6:	0409      	lsls	r1, r1, #16
 80017f8:	0c09      	lsrs	r1, r1, #16
 80017fa:	4688      	mov	r8, r1
 80017fc:	4359      	muls	r1, r3
 80017fe:	468a      	mov	sl, r1
 8001800:	0039      	movs	r1, r7
 8001802:	4351      	muls	r1, r2
 8001804:	4689      	mov	r9, r1
 8001806:	4641      	mov	r1, r8
 8001808:	434a      	muls	r2, r1
 800180a:	4651      	mov	r1, sl
 800180c:	0c09      	lsrs	r1, r1, #16
 800180e:	468b      	mov	fp, r1
 8001810:	437b      	muls	r3, r7
 8001812:	18d2      	adds	r2, r2, r3
 8001814:	445a      	add	r2, fp
 8001816:	4293      	cmp	r3, r2
 8001818:	d903      	bls.n	8001822 <__aeabi_dmul+0x2c6>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	469b      	mov	fp, r3
 8001820:	44d9      	add	r9, fp
 8001822:	4651      	mov	r1, sl
 8001824:	0409      	lsls	r1, r1, #16
 8001826:	0c09      	lsrs	r1, r1, #16
 8001828:	468a      	mov	sl, r1
 800182a:	4641      	mov	r1, r8
 800182c:	4361      	muls	r1, r4
 800182e:	437c      	muls	r4, r7
 8001830:	0c13      	lsrs	r3, r2, #16
 8001832:	0412      	lsls	r2, r2, #16
 8001834:	444b      	add	r3, r9
 8001836:	4452      	add	r2, sl
 8001838:	46a1      	mov	r9, r4
 800183a:	468a      	mov	sl, r1
 800183c:	003c      	movs	r4, r7
 800183e:	4641      	mov	r1, r8
 8001840:	436c      	muls	r4, r5
 8001842:	434d      	muls	r5, r1
 8001844:	4651      	mov	r1, sl
 8001846:	444d      	add	r5, r9
 8001848:	0c0f      	lsrs	r7, r1, #16
 800184a:	197d      	adds	r5, r7, r5
 800184c:	45a9      	cmp	r9, r5
 800184e:	d903      	bls.n	8001858 <__aeabi_dmul+0x2fc>
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0249      	lsls	r1, r1, #9
 8001854:	4688      	mov	r8, r1
 8001856:	4444      	add	r4, r8
 8001858:	9f04      	ldr	r7, [sp, #16]
 800185a:	9903      	ldr	r1, [sp, #12]
 800185c:	46b8      	mov	r8, r7
 800185e:	4441      	add	r1, r8
 8001860:	468b      	mov	fp, r1
 8001862:	4583      	cmp	fp, r0
 8001864:	4180      	sbcs	r0, r0
 8001866:	4241      	negs	r1, r0
 8001868:	4688      	mov	r8, r1
 800186a:	4651      	mov	r1, sl
 800186c:	0408      	lsls	r0, r1, #16
 800186e:	042f      	lsls	r7, r5, #16
 8001870:	0c00      	lsrs	r0, r0, #16
 8001872:	183f      	adds	r7, r7, r0
 8001874:	4658      	mov	r0, fp
 8001876:	9902      	ldr	r1, [sp, #8]
 8001878:	1810      	adds	r0, r2, r0
 800187a:	4689      	mov	r9, r1
 800187c:	4290      	cmp	r0, r2
 800187e:	4192      	sbcs	r2, r2
 8001880:	444f      	add	r7, r9
 8001882:	46ba      	mov	sl, r7
 8001884:	4252      	negs	r2, r2
 8001886:	4699      	mov	r9, r3
 8001888:	4693      	mov	fp, r2
 800188a:	44c2      	add	sl, r8
 800188c:	44d1      	add	r9, sl
 800188e:	44cb      	add	fp, r9
 8001890:	428f      	cmp	r7, r1
 8001892:	41bf      	sbcs	r7, r7
 8001894:	45c2      	cmp	sl, r8
 8001896:	4189      	sbcs	r1, r1
 8001898:	4599      	cmp	r9, r3
 800189a:	419b      	sbcs	r3, r3
 800189c:	4593      	cmp	fp, r2
 800189e:	4192      	sbcs	r2, r2
 80018a0:	427f      	negs	r7, r7
 80018a2:	4249      	negs	r1, r1
 80018a4:	0c2d      	lsrs	r5, r5, #16
 80018a6:	4252      	negs	r2, r2
 80018a8:	430f      	orrs	r7, r1
 80018aa:	425b      	negs	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	197f      	adds	r7, r7, r5
 80018b0:	18ff      	adds	r7, r7, r3
 80018b2:	465b      	mov	r3, fp
 80018b4:	193c      	adds	r4, r7, r4
 80018b6:	0ddb      	lsrs	r3, r3, #23
 80018b8:	9a05      	ldr	r2, [sp, #20]
 80018ba:	0264      	lsls	r4, r4, #9
 80018bc:	431c      	orrs	r4, r3
 80018be:	0243      	lsls	r3, r0, #9
 80018c0:	4313      	orrs	r3, r2
 80018c2:	1e5d      	subs	r5, r3, #1
 80018c4:	41ab      	sbcs	r3, r5
 80018c6:	465a      	mov	r2, fp
 80018c8:	0dc0      	lsrs	r0, r0, #23
 80018ca:	4303      	orrs	r3, r0
 80018cc:	0252      	lsls	r2, r2, #9
 80018ce:	4313      	orrs	r3, r2
 80018d0:	01e2      	lsls	r2, r4, #7
 80018d2:	d556      	bpl.n	8001982 <__aeabi_dmul+0x426>
 80018d4:	2001      	movs	r0, #1
 80018d6:	085a      	lsrs	r2, r3, #1
 80018d8:	4003      	ands	r3, r0
 80018da:	4313      	orrs	r3, r2
 80018dc:	07e2      	lsls	r2, r4, #31
 80018de:	4313      	orrs	r3, r2
 80018e0:	0864      	lsrs	r4, r4, #1
 80018e2:	485a      	ldr	r0, [pc, #360]	; (8001a4c <__aeabi_dmul+0x4f0>)
 80018e4:	4460      	add	r0, ip
 80018e6:	2800      	cmp	r0, #0
 80018e8:	dd4d      	ble.n	8001986 <__aeabi_dmul+0x42a>
 80018ea:	075a      	lsls	r2, r3, #29
 80018ec:	d009      	beq.n	8001902 <__aeabi_dmul+0x3a6>
 80018ee:	220f      	movs	r2, #15
 80018f0:	401a      	ands	r2, r3
 80018f2:	2a04      	cmp	r2, #4
 80018f4:	d005      	beq.n	8001902 <__aeabi_dmul+0x3a6>
 80018f6:	1d1a      	adds	r2, r3, #4
 80018f8:	429a      	cmp	r2, r3
 80018fa:	419b      	sbcs	r3, r3
 80018fc:	425b      	negs	r3, r3
 80018fe:	18e4      	adds	r4, r4, r3
 8001900:	0013      	movs	r3, r2
 8001902:	01e2      	lsls	r2, r4, #7
 8001904:	d504      	bpl.n	8001910 <__aeabi_dmul+0x3b4>
 8001906:	2080      	movs	r0, #128	; 0x80
 8001908:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <__aeabi_dmul+0x4f4>)
 800190a:	00c0      	lsls	r0, r0, #3
 800190c:	4014      	ands	r4, r2
 800190e:	4460      	add	r0, ip
 8001910:	4a50      	ldr	r2, [pc, #320]	; (8001a54 <__aeabi_dmul+0x4f8>)
 8001912:	4290      	cmp	r0, r2
 8001914:	dd00      	ble.n	8001918 <__aeabi_dmul+0x3bc>
 8001916:	e6e3      	b.n	80016e0 <__aeabi_dmul+0x184>
 8001918:	2501      	movs	r5, #1
 800191a:	08db      	lsrs	r3, r3, #3
 800191c:	0762      	lsls	r2, r4, #29
 800191e:	431a      	orrs	r2, r3
 8001920:	0264      	lsls	r4, r4, #9
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	4691      	mov	r9, r2
 8001926:	0b22      	lsrs	r2, r4, #12
 8001928:	0544      	lsls	r4, r0, #21
 800192a:	0d64      	lsrs	r4, r4, #21
 800192c:	401d      	ands	r5, r3
 800192e:	e67c      	b.n	800162a <__aeabi_dmul+0xce>
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	4659      	mov	r1, fp
 8001934:	0312      	lsls	r2, r2, #12
 8001936:	4211      	tst	r1, r2
 8001938:	d008      	beq.n	800194c <__aeabi_dmul+0x3f0>
 800193a:	4214      	tst	r4, r2
 800193c:	d106      	bne.n	800194c <__aeabi_dmul+0x3f0>
 800193e:	4322      	orrs	r2, r4
 8001940:	0312      	lsls	r2, r2, #12
 8001942:	0b12      	lsrs	r2, r2, #12
 8001944:	4645      	mov	r5, r8
 8001946:	4699      	mov	r9, r3
 8001948:	4c43      	ldr	r4, [pc, #268]	; (8001a58 <__aeabi_dmul+0x4fc>)
 800194a:	e66e      	b.n	800162a <__aeabi_dmul+0xce>
 800194c:	465b      	mov	r3, fp
 800194e:	431a      	orrs	r2, r3
 8001950:	0312      	lsls	r2, r2, #12
 8001952:	0b12      	lsrs	r2, r2, #12
 8001954:	4c40      	ldr	r4, [pc, #256]	; (8001a58 <__aeabi_dmul+0x4fc>)
 8001956:	e668      	b.n	800162a <__aeabi_dmul+0xce>
 8001958:	0003      	movs	r3, r0
 800195a:	4654      	mov	r4, sl
 800195c:	3b28      	subs	r3, #40	; 0x28
 800195e:	409c      	lsls	r4, r3
 8001960:	2300      	movs	r3, #0
 8001962:	e6b9      	b.n	80016d8 <__aeabi_dmul+0x17c>
 8001964:	f000 f998 	bl	8001c98 <__clzsi2>
 8001968:	3020      	adds	r0, #32
 800196a:	e6a6      	b.n	80016ba <__aeabi_dmul+0x15e>
 800196c:	0003      	movs	r3, r0
 800196e:	3b28      	subs	r3, #40	; 0x28
 8001970:	409f      	lsls	r7, r3
 8001972:	2300      	movs	r3, #0
 8001974:	46bb      	mov	fp, r7
 8001976:	4699      	mov	r9, r3
 8001978:	e68a      	b.n	8001690 <__aeabi_dmul+0x134>
 800197a:	f000 f98d 	bl	8001c98 <__clzsi2>
 800197e:	3020      	adds	r0, #32
 8001980:	e674      	b.n	800166c <__aeabi_dmul+0x110>
 8001982:	46b4      	mov	ip, r6
 8001984:	e7ad      	b.n	80018e2 <__aeabi_dmul+0x386>
 8001986:	2501      	movs	r5, #1
 8001988:	1a2a      	subs	r2, r5, r0
 800198a:	2a38      	cmp	r2, #56	; 0x38
 800198c:	dd06      	ble.n	800199c <__aeabi_dmul+0x440>
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	2400      	movs	r4, #0
 8001992:	401d      	ands	r5, r3
 8001994:	2300      	movs	r3, #0
 8001996:	2200      	movs	r2, #0
 8001998:	4699      	mov	r9, r3
 800199a:	e646      	b.n	800162a <__aeabi_dmul+0xce>
 800199c:	2a1f      	cmp	r2, #31
 800199e:	dc21      	bgt.n	80019e4 <__aeabi_dmul+0x488>
 80019a0:	2520      	movs	r5, #32
 80019a2:	0020      	movs	r0, r4
 80019a4:	1aad      	subs	r5, r5, r2
 80019a6:	001e      	movs	r6, r3
 80019a8:	40ab      	lsls	r3, r5
 80019aa:	40a8      	lsls	r0, r5
 80019ac:	40d6      	lsrs	r6, r2
 80019ae:	1e5d      	subs	r5, r3, #1
 80019b0:	41ab      	sbcs	r3, r5
 80019b2:	4330      	orrs	r0, r6
 80019b4:	4318      	orrs	r0, r3
 80019b6:	40d4      	lsrs	r4, r2
 80019b8:	0743      	lsls	r3, r0, #29
 80019ba:	d009      	beq.n	80019d0 <__aeabi_dmul+0x474>
 80019bc:	230f      	movs	r3, #15
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d005      	beq.n	80019d0 <__aeabi_dmul+0x474>
 80019c4:	0003      	movs	r3, r0
 80019c6:	1d18      	adds	r0, r3, #4
 80019c8:	4298      	cmp	r0, r3
 80019ca:	419b      	sbcs	r3, r3
 80019cc:	425b      	negs	r3, r3
 80019ce:	18e4      	adds	r4, r4, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d521      	bpl.n	8001a18 <__aeabi_dmul+0x4bc>
 80019d4:	2501      	movs	r5, #1
 80019d6:	9b01      	ldr	r3, [sp, #4]
 80019d8:	2401      	movs	r4, #1
 80019da:	401d      	ands	r5, r3
 80019dc:	2300      	movs	r3, #0
 80019de:	2200      	movs	r2, #0
 80019e0:	4699      	mov	r9, r3
 80019e2:	e622      	b.n	800162a <__aeabi_dmul+0xce>
 80019e4:	251f      	movs	r5, #31
 80019e6:	0021      	movs	r1, r4
 80019e8:	426d      	negs	r5, r5
 80019ea:	1a28      	subs	r0, r5, r0
 80019ec:	40c1      	lsrs	r1, r0
 80019ee:	0008      	movs	r0, r1
 80019f0:	2a20      	cmp	r2, #32
 80019f2:	d01d      	beq.n	8001a30 <__aeabi_dmul+0x4d4>
 80019f4:	355f      	adds	r5, #95	; 0x5f
 80019f6:	1aaa      	subs	r2, r5, r2
 80019f8:	4094      	lsls	r4, r2
 80019fa:	4323      	orrs	r3, r4
 80019fc:	1e5c      	subs	r4, r3, #1
 80019fe:	41a3      	sbcs	r3, r4
 8001a00:	2507      	movs	r5, #7
 8001a02:	4303      	orrs	r3, r0
 8001a04:	401d      	ands	r5, r3
 8001a06:	2200      	movs	r2, #0
 8001a08:	2d00      	cmp	r5, #0
 8001a0a:	d009      	beq.n	8001a20 <__aeabi_dmul+0x4c4>
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	2400      	movs	r4, #0
 8001a10:	401a      	ands	r2, r3
 8001a12:	0018      	movs	r0, r3
 8001a14:	2a04      	cmp	r2, #4
 8001a16:	d1d6      	bne.n	80019c6 <__aeabi_dmul+0x46a>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	0765      	lsls	r5, r4, #29
 8001a1c:	0264      	lsls	r4, r4, #9
 8001a1e:	0b22      	lsrs	r2, r4, #12
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	432b      	orrs	r3, r5
 8001a24:	2501      	movs	r5, #1
 8001a26:	4699      	mov	r9, r3
 8001a28:	9b01      	ldr	r3, [sp, #4]
 8001a2a:	2400      	movs	r4, #0
 8001a2c:	401d      	ands	r5, r3
 8001a2e:	e5fc      	b.n	800162a <__aeabi_dmul+0xce>
 8001a30:	2400      	movs	r4, #0
 8001a32:	e7e2      	b.n	80019fa <__aeabi_dmul+0x49e>
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	2501      	movs	r5, #1
 8001a38:	0312      	lsls	r2, r2, #12
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	9901      	ldr	r1, [sp, #4]
 8001a3e:	0312      	lsls	r2, r2, #12
 8001a40:	0b12      	lsrs	r2, r2, #12
 8001a42:	400d      	ands	r5, r1
 8001a44:	4699      	mov	r9, r3
 8001a46:	4c04      	ldr	r4, [pc, #16]	; (8001a58 <__aeabi_dmul+0x4fc>)
 8001a48:	e5ef      	b.n	800162a <__aeabi_dmul+0xce>
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	000003ff 	.word	0x000003ff
 8001a50:	feffffff 	.word	0xfeffffff
 8001a54:	000007fe 	.word	0x000007fe
 8001a58:	000007ff 	.word	0x000007ff

08001a5c <__aeabi_i2d>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d030      	beq.n	8001ac4 <__aeabi_i2d+0x68>
 8001a62:	17c3      	asrs	r3, r0, #31
 8001a64:	18c4      	adds	r4, r0, r3
 8001a66:	405c      	eors	r4, r3
 8001a68:	0fc5      	lsrs	r5, r0, #31
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f000 f914 	bl	8001c98 <__clzsi2>
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <__aeabi_i2d+0x74>)
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <__aeabi_i2d+0x78>)
 8001a74:	1a1b      	subs	r3, r3, r0
 8001a76:	1ad2      	subs	r2, r2, r3
 8001a78:	2a1f      	cmp	r2, #31
 8001a7a:	dd18      	ble.n	8001aae <__aeabi_i2d+0x52>
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <__aeabi_i2d+0x7c>)
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	4094      	lsls	r4, r2
 8001a82:	2200      	movs	r2, #0
 8001a84:	0324      	lsls	r4, r4, #12
 8001a86:	055b      	lsls	r3, r3, #21
 8001a88:	0b24      	lsrs	r4, r4, #12
 8001a8a:	0d5b      	lsrs	r3, r3, #21
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	0010      	movs	r0, r2
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	0d0a      	lsrs	r2, r1, #20
 8001a94:	0b24      	lsrs	r4, r4, #12
 8001a96:	0512      	lsls	r2, r2, #20
 8001a98:	4322      	orrs	r2, r4
 8001a9a:	4c10      	ldr	r4, [pc, #64]	; (8001adc <__aeabi_i2d+0x80>)
 8001a9c:	051b      	lsls	r3, r3, #20
 8001a9e:	4022      	ands	r2, r4
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	07ed      	lsls	r5, r5, #31
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	432b      	orrs	r3, r5
 8001aaa:	0019      	movs	r1, r3
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
 8001aae:	0021      	movs	r1, r4
 8001ab0:	4091      	lsls	r1, r2
 8001ab2:	000a      	movs	r2, r1
 8001ab4:	210b      	movs	r1, #11
 8001ab6:	1a08      	subs	r0, r1, r0
 8001ab8:	40c4      	lsrs	r4, r0
 8001aba:	055b      	lsls	r3, r3, #21
 8001abc:	0324      	lsls	r4, r4, #12
 8001abe:	0b24      	lsrs	r4, r4, #12
 8001ac0:	0d5b      	lsrs	r3, r3, #21
 8001ac2:	e7e3      	b.n	8001a8c <__aeabi_i2d+0x30>
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2400      	movs	r4, #0
 8001aca:	2200      	movs	r2, #0
 8001acc:	e7de      	b.n	8001a8c <__aeabi_i2d+0x30>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	0000041e 	.word	0x0000041e
 8001ad4:	00000433 	.word	0x00000433
 8001ad8:	00000413 	.word	0x00000413
 8001adc:	800fffff 	.word	0x800fffff

08001ae0 <__aeabi_f2d>:
 8001ae0:	0041      	lsls	r1, r0, #1
 8001ae2:	0e09      	lsrs	r1, r1, #24
 8001ae4:	1c4b      	adds	r3, r1, #1
 8001ae6:	b570      	push	{r4, r5, r6, lr}
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	0246      	lsls	r6, r0, #9
 8001aec:	0a75      	lsrs	r5, r6, #9
 8001aee:	0fc4      	lsrs	r4, r0, #31
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	dd14      	ble.n	8001b1e <__aeabi_f2d+0x3e>
 8001af4:	23e0      	movs	r3, #224	; 0xe0
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	076d      	lsls	r5, r5, #29
 8001afa:	0b36      	lsrs	r6, r6, #12
 8001afc:	18cb      	adds	r3, r1, r3
 8001afe:	2100      	movs	r1, #0
 8001b00:	0d0a      	lsrs	r2, r1, #20
 8001b02:	0028      	movs	r0, r5
 8001b04:	0512      	lsls	r2, r2, #20
 8001b06:	4d1c      	ldr	r5, [pc, #112]	; (8001b78 <__aeabi_f2d+0x98>)
 8001b08:	4332      	orrs	r2, r6
 8001b0a:	055b      	lsls	r3, r3, #21
 8001b0c:	402a      	ands	r2, r5
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	4313      	orrs	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	07e4      	lsls	r4, r4, #31
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	4323      	orrs	r3, r4
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}
 8001b1e:	2900      	cmp	r1, #0
 8001b20:	d114      	bne.n	8001b4c <__aeabi_f2d+0x6c>
 8001b22:	2d00      	cmp	r5, #0
 8001b24:	d01e      	beq.n	8001b64 <__aeabi_f2d+0x84>
 8001b26:	0028      	movs	r0, r5
 8001b28:	f000 f8b6 	bl	8001c98 <__clzsi2>
 8001b2c:	280a      	cmp	r0, #10
 8001b2e:	dc1c      	bgt.n	8001b6a <__aeabi_f2d+0x8a>
 8001b30:	230b      	movs	r3, #11
 8001b32:	002a      	movs	r2, r5
 8001b34:	1a1b      	subs	r3, r3, r0
 8001b36:	40da      	lsrs	r2, r3
 8001b38:	0003      	movs	r3, r0
 8001b3a:	3315      	adds	r3, #21
 8001b3c:	409d      	lsls	r5, r3
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <__aeabi_f2d+0x9c>)
 8001b40:	0312      	lsls	r2, r2, #12
 8001b42:	1a1b      	subs	r3, r3, r0
 8001b44:	055b      	lsls	r3, r3, #21
 8001b46:	0b16      	lsrs	r6, r2, #12
 8001b48:	0d5b      	lsrs	r3, r3, #21
 8001b4a:	e7d8      	b.n	8001afe <__aeabi_f2d+0x1e>
 8001b4c:	2d00      	cmp	r5, #0
 8001b4e:	d006      	beq.n	8001b5e <__aeabi_f2d+0x7e>
 8001b50:	0b32      	lsrs	r2, r6, #12
 8001b52:	2680      	movs	r6, #128	; 0x80
 8001b54:	0336      	lsls	r6, r6, #12
 8001b56:	076d      	lsls	r5, r5, #29
 8001b58:	4316      	orrs	r6, r2
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <__aeabi_f2d+0xa0>)
 8001b5c:	e7cf      	b.n	8001afe <__aeabi_f2d+0x1e>
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <__aeabi_f2d+0xa0>)
 8001b60:	2600      	movs	r6, #0
 8001b62:	e7cc      	b.n	8001afe <__aeabi_f2d+0x1e>
 8001b64:	2300      	movs	r3, #0
 8001b66:	2600      	movs	r6, #0
 8001b68:	e7c9      	b.n	8001afe <__aeabi_f2d+0x1e>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	002a      	movs	r2, r5
 8001b6e:	3b0b      	subs	r3, #11
 8001b70:	409a      	lsls	r2, r3
 8001b72:	2500      	movs	r5, #0
 8001b74:	e7e3      	b.n	8001b3e <__aeabi_f2d+0x5e>
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	800fffff 	.word	0x800fffff
 8001b7c:	00000389 	.word	0x00000389
 8001b80:	000007ff 	.word	0x000007ff

08001b84 <__aeabi_d2f>:
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	004c      	lsls	r4, r1, #1
 8001b88:	0d64      	lsrs	r4, r4, #21
 8001b8a:	030b      	lsls	r3, r1, #12
 8001b8c:	1c62      	adds	r2, r4, #1
 8001b8e:	0f45      	lsrs	r5, r0, #29
 8001b90:	0a5b      	lsrs	r3, r3, #9
 8001b92:	0552      	lsls	r2, r2, #21
 8001b94:	432b      	orrs	r3, r5
 8001b96:	0fc9      	lsrs	r1, r1, #31
 8001b98:	00c5      	lsls	r5, r0, #3
 8001b9a:	0d52      	lsrs	r2, r2, #21
 8001b9c:	2a01      	cmp	r2, #1
 8001b9e:	dd28      	ble.n	8001bf2 <__aeabi_d2f+0x6e>
 8001ba0:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <__aeabi_d2f+0x108>)
 8001ba2:	18a6      	adds	r6, r4, r2
 8001ba4:	2efe      	cmp	r6, #254	; 0xfe
 8001ba6:	dc1b      	bgt.n	8001be0 <__aeabi_d2f+0x5c>
 8001ba8:	2e00      	cmp	r6, #0
 8001baa:	dd3e      	ble.n	8001c2a <__aeabi_d2f+0xa6>
 8001bac:	0180      	lsls	r0, r0, #6
 8001bae:	0002      	movs	r2, r0
 8001bb0:	1e50      	subs	r0, r2, #1
 8001bb2:	4182      	sbcs	r2, r0
 8001bb4:	0f6d      	lsrs	r5, r5, #29
 8001bb6:	432a      	orrs	r2, r5
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	075a      	lsls	r2, r3, #29
 8001bbe:	d004      	beq.n	8001bca <__aeabi_d2f+0x46>
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	2a04      	cmp	r2, #4
 8001bc6:	d000      	beq.n	8001bca <__aeabi_d2f+0x46>
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	04d2      	lsls	r2, r2, #19
 8001bce:	401a      	ands	r2, r3
 8001bd0:	d05a      	beq.n	8001c88 <__aeabi_d2f+0x104>
 8001bd2:	3601      	adds	r6, #1
 8001bd4:	2eff      	cmp	r6, #255	; 0xff
 8001bd6:	d003      	beq.n	8001be0 <__aeabi_d2f+0x5c>
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	0a5b      	lsrs	r3, r3, #9
 8001bdc:	b2f4      	uxtb	r4, r6
 8001bde:	e001      	b.n	8001be4 <__aeabi_d2f+0x60>
 8001be0:	24ff      	movs	r4, #255	; 0xff
 8001be2:	2300      	movs	r3, #0
 8001be4:	0258      	lsls	r0, r3, #9
 8001be6:	05e4      	lsls	r4, r4, #23
 8001be8:	0a40      	lsrs	r0, r0, #9
 8001bea:	07c9      	lsls	r1, r1, #31
 8001bec:	4320      	orrs	r0, r4
 8001bee:	4308      	orrs	r0, r1
 8001bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf2:	2c00      	cmp	r4, #0
 8001bf4:	d007      	beq.n	8001c06 <__aeabi_d2f+0x82>
 8001bf6:	431d      	orrs	r5, r3
 8001bf8:	d0f2      	beq.n	8001be0 <__aeabi_d2f+0x5c>
 8001bfa:	2080      	movs	r0, #128	; 0x80
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	0480      	lsls	r0, r0, #18
 8001c00:	4303      	orrs	r3, r0
 8001c02:	26ff      	movs	r6, #255	; 0xff
 8001c04:	e7da      	b.n	8001bbc <__aeabi_d2f+0x38>
 8001c06:	432b      	orrs	r3, r5
 8001c08:	d003      	beq.n	8001c12 <__aeabi_d2f+0x8e>
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	2cff      	cmp	r4, #255	; 0xff
 8001c10:	d003      	beq.n	8001c1a <__aeabi_d2f+0x96>
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	0a5b      	lsrs	r3, r3, #9
 8001c16:	b2e4      	uxtb	r4, r4
 8001c18:	e7e4      	b.n	8001be4 <__aeabi_d2f+0x60>
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d032      	beq.n	8001c84 <__aeabi_d2f+0x100>
 8001c1e:	2080      	movs	r0, #128	; 0x80
 8001c20:	03c0      	lsls	r0, r0, #15
 8001c22:	4303      	orrs	r3, r0
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	0a5b      	lsrs	r3, r3, #9
 8001c28:	e7dc      	b.n	8001be4 <__aeabi_d2f+0x60>
 8001c2a:	0032      	movs	r2, r6
 8001c2c:	3217      	adds	r2, #23
 8001c2e:	db14      	blt.n	8001c5a <__aeabi_d2f+0xd6>
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	271e      	movs	r7, #30
 8001c34:	0412      	lsls	r2, r2, #16
 8001c36:	4313      	orrs	r3, r2
 8001c38:	1bbf      	subs	r7, r7, r6
 8001c3a:	2f1f      	cmp	r7, #31
 8001c3c:	dc0f      	bgt.n	8001c5e <__aeabi_d2f+0xda>
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <__aeabi_d2f+0x10c>)
 8001c40:	4694      	mov	ip, r2
 8001c42:	4464      	add	r4, ip
 8001c44:	002a      	movs	r2, r5
 8001c46:	40a5      	lsls	r5, r4
 8001c48:	002e      	movs	r6, r5
 8001c4a:	40a3      	lsls	r3, r4
 8001c4c:	1e75      	subs	r5, r6, #1
 8001c4e:	41ae      	sbcs	r6, r5
 8001c50:	40fa      	lsrs	r2, r7
 8001c52:	4333      	orrs	r3, r6
 8001c54:	4313      	orrs	r3, r2
 8001c56:	2600      	movs	r6, #0
 8001c58:	e7b0      	b.n	8001bbc <__aeabi_d2f+0x38>
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	e7d5      	b.n	8001c0a <__aeabi_d2f+0x86>
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4252      	negs	r2, r2
 8001c62:	1b96      	subs	r6, r2, r6
 8001c64:	001a      	movs	r2, r3
 8001c66:	40f2      	lsrs	r2, r6
 8001c68:	2f20      	cmp	r7, #32
 8001c6a:	d009      	beq.n	8001c80 <__aeabi_d2f+0xfc>
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <__aeabi_d2f+0x110>)
 8001c6e:	4684      	mov	ip, r0
 8001c70:	4464      	add	r4, ip
 8001c72:	40a3      	lsls	r3, r4
 8001c74:	432b      	orrs	r3, r5
 8001c76:	1e5d      	subs	r5, r3, #1
 8001c78:	41ab      	sbcs	r3, r5
 8001c7a:	2600      	movs	r6, #0
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	e79d      	b.n	8001bbc <__aeabi_d2f+0x38>
 8001c80:	2300      	movs	r3, #0
 8001c82:	e7f7      	b.n	8001c74 <__aeabi_d2f+0xf0>
 8001c84:	2300      	movs	r3, #0
 8001c86:	e7ad      	b.n	8001be4 <__aeabi_d2f+0x60>
 8001c88:	0034      	movs	r4, r6
 8001c8a:	e7bf      	b.n	8001c0c <__aeabi_d2f+0x88>
 8001c8c:	fffffc80 	.word	0xfffffc80
 8001c90:	fffffc82 	.word	0xfffffc82
 8001c94:	fffffca2 	.word	0xfffffca2

08001c98 <__clzsi2>:
 8001c98:	211c      	movs	r1, #28
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	4298      	cmp	r0, r3
 8001ca0:	d301      	bcc.n	8001ca6 <__clzsi2+0xe>
 8001ca2:	0c00      	lsrs	r0, r0, #16
 8001ca4:	3910      	subs	r1, #16
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	4298      	cmp	r0, r3
 8001caa:	d301      	bcc.n	8001cb0 <__clzsi2+0x18>
 8001cac:	0a00      	lsrs	r0, r0, #8
 8001cae:	3908      	subs	r1, #8
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	4298      	cmp	r0, r3
 8001cb4:	d301      	bcc.n	8001cba <__clzsi2+0x22>
 8001cb6:	0900      	lsrs	r0, r0, #4
 8001cb8:	3904      	subs	r1, #4
 8001cba:	a202      	add	r2, pc, #8	; (adr r2, 8001cc4 <__clzsi2+0x2c>)
 8001cbc:	5c10      	ldrb	r0, [r2, r0]
 8001cbe:	1840      	adds	r0, r0, r1
 8001cc0:	4770      	bx	lr
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	02020304 	.word	0x02020304
 8001cc8:	01010101 	.word	0x01010101
	...

08001cd4 <Display_event>:
const bool E[]={1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,1};
const bool F[]={1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0};
const bool G[]={0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,0,1};

void Display_event(uint8_t LED1 , uint8_t LED2 , uint8_t LED3 , uint8_t LED4 , uint8_t Blink)
{
 8001cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd6:	0004      	movs	r4, r0
 8001cd8:	000f      	movs	r7, r1
 8001cda:	0016      	movs	r6, r2
 8001cdc:	001d      	movs	r5, r3
 8001cde:	ab06      	add	r3, sp, #24
 8001ce0:	781a      	ldrb	r2, [r3, #0]

	  switch(Segment)
 8001ce2:	4bc9      	ldr	r3, [pc, #804]	; (8002008 <Display_event+0x334>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d100      	bne.n	8001cee <Display_event+0x1a>
 8001cec:	e0bb      	b.n	8001e66 <Display_event+0x192>
 8001cee:	d93e      	bls.n	8001d6e <Display_event+0x9a>
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d100      	bne.n	8001cf6 <Display_event+0x22>
 8001cf4:	e139      	b.n	8001f6a <Display_event+0x296>
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d000      	beq.n	8001cfc <Display_event+0x28>
 8001cfa:	e09a      	b.n	8001e32 <Display_event+0x15e>
			 	  	 GPIOA->BRR = (uint32_t)LED3_Pin;
			 	  	 break;
			 	   }
			 	   case 4:
			 	   {
			 	  	 GPIOA->BSRR =(uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8001cfc:	2390      	movs	r3, #144	; 0x90
 8001cfe:	05db      	lsls	r3, r3, #23
 8001d00:	21f0      	movs	r1, #240	; 0xf0
 8001d02:	0109      	lsls	r1, r1, #4
 8001d04:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 8001d06:	2190      	movs	r1, #144	; 0x90
 8001d08:	0209      	lsls	r1, r1, #8
 8001d0a:	6199      	str	r1, [r3, #24]
			 	  	 GPIOF->BSRR = B_Pin|C_Pin;
 8001d0c:	21c0      	movs	r1, #192	; 0xc0
 8001d0e:	4bbf      	ldr	r3, [pc, #764]	; (800200c <Display_event+0x338>)
 8001d10:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 8001d12:	21f0      	movs	r1, #240	; 0xf0
 8001d14:	0209      	lsls	r1, r1, #8
 8001d16:	4bbe      	ldr	r3, [pc, #760]	; (8002010 <Display_event+0x33c>)
 8001d18:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==4||Blink==5||Blink==7||Blink==9)
 8001d1a:	1f13      	subs	r3, r2, #4
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d800      	bhi.n	8001d22 <Display_event+0x4e>
 8001d20:	e1bf      	b.n	80020a2 <Display_event+0x3ce>
 8001d22:	3a07      	subs	r2, #7
 8001d24:	23fd      	movs	r3, #253	; 0xfd
 8001d26:	421a      	tst	r2, r3
 8001d28:	d100      	bne.n	8001d2c <Display_event+0x58>
 8001d2a:	e1ba      	b.n	80020a2 <Display_event+0x3ce>
			 	  		}

			 	  	 }
			 	  	 else
			 	  	 {
			 	   	 GPIOA->BRR  = (A[LED4]<<15)|(D[LED4]<<12);
 8001d2c:	4bb9      	ldr	r3, [pc, #740]	; (8002014 <Display_event+0x340>)
 8001d2e:	5d5b      	ldrb	r3, [r3, r5]
 8001d30:	03db      	lsls	r3, r3, #15
 8001d32:	4ab9      	ldr	r2, [pc, #740]	; (8002018 <Display_event+0x344>)
 8001d34:	5d52      	ldrb	r2, [r2, r5]
 8001d36:	0312      	lsls	r2, r2, #12
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	2290      	movs	r2, #144	; 0x90
 8001d3c:	05d2      	lsls	r2, r2, #23
 8001d3e:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOF->BRR  = (B[LED4]<<7) |(C[LED4]<<6);
 8001d40:	4bb6      	ldr	r3, [pc, #728]	; (800201c <Display_event+0x348>)
 8001d42:	5d5b      	ldrb	r3, [r3, r5]
 8001d44:	01db      	lsls	r3, r3, #7
 8001d46:	4ab6      	ldr	r2, [pc, #728]	; (8002020 <Display_event+0x34c>)
 8001d48:	5d52      	ldrb	r2, [r2, r5]
 8001d4a:	0192      	lsls	r2, r2, #6
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	4aaf      	ldr	r2, [pc, #700]	; (800200c <Display_event+0x338>)
 8001d50:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOB->BRR  = (E[LED4]<<15)|(F[LED4]<<14)|(G[LED4]<<13);
 8001d52:	4bb4      	ldr	r3, [pc, #720]	; (8002024 <Display_event+0x350>)
 8001d54:	5d5b      	ldrb	r3, [r3, r5]
 8001d56:	03db      	lsls	r3, r3, #15
 8001d58:	4ab3      	ldr	r2, [pc, #716]	; (8002028 <Display_event+0x354>)
 8001d5a:	5d52      	ldrb	r2, [r2, r5]
 8001d5c:	0392      	lsls	r2, r2, #14
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	4ab2      	ldr	r2, [pc, #712]	; (800202c <Display_event+0x358>)
 8001d62:	5d52      	ldrb	r2, [r2, r5]
 8001d64:	0352      	lsls	r2, r2, #13
 8001d66:	4313      	orrs	r3, r2
 8001d68:	4aa9      	ldr	r2, [pc, #676]	; (8002010 <Display_event+0x33c>)
 8001d6a:	6293      	str	r3, [r2, #40]	; 0x28
 8001d6c:	e1bd      	b.n	80020ea <Display_event+0x416>
	  switch(Segment)
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d15f      	bne.n	8001e32 <Display_event+0x15e>
			 	  	 GPIOA->BSRR  = (uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8001d72:	2390      	movs	r3, #144	; 0x90
 8001d74:	05db      	lsls	r3, r3, #23
 8001d76:	21f0      	movs	r1, #240	; 0xf0
 8001d78:	0109      	lsls	r1, r1, #4
 8001d7a:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 8001d7c:	2190      	movs	r1, #144	; 0x90
 8001d7e:	0209      	lsls	r1, r1, #8
 8001d80:	6199      	str	r1, [r3, #24]
			 	     GPIOF->BSRR = B_Pin|C_Pin;
 8001d82:	21c0      	movs	r1, #192	; 0xc0
 8001d84:	4ba1      	ldr	r3, [pc, #644]	; (800200c <Display_event+0x338>)
 8001d86:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 8001d88:	21f0      	movs	r1, #240	; 0xf0
 8001d8a:	0209      	lsls	r1, r1, #8
 8001d8c:	4ba0      	ldr	r3, [pc, #640]	; (8002010 <Display_event+0x33c>)
 8001d8e:	6199      	str	r1, [r3, #24]
                     if(Blink==1||Blink==5||Blink==6||Blink==8)
 8001d90:	2a08      	cmp	r2, #8
 8001d92:	d829      	bhi.n	8001de8 <Display_event+0x114>
 8001d94:	23b1      	movs	r3, #177	; 0xb1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	40d3      	lsrs	r3, r2
 8001d9a:	07db      	lsls	r3, r3, #31
 8001d9c:	d524      	bpl.n	8001de8 <Display_event+0x114>
                    	 if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8001d9e:	4ba4      	ldr	r3, [pc, #656]	; (8002030 <Display_event+0x35c>)
 8001da0:	789b      	ldrb	r3, [r3, #2]
 8001da2:	07db      	lsls	r3, r3, #31
 8001da4:	d452      	bmi.n	8001e4c <Display_event+0x178>
                    	GPIOA->BRR  = (A[LED1]<<15)|(D[LED1]<<12);
 8001da6:	4b9b      	ldr	r3, [pc, #620]	; (8002014 <Display_event+0x340>)
 8001da8:	5d1b      	ldrb	r3, [r3, r4]
 8001daa:	03db      	lsls	r3, r3, #15
 8001dac:	4a9a      	ldr	r2, [pc, #616]	; (8002018 <Display_event+0x344>)
 8001dae:	5d12      	ldrb	r2, [r2, r4]
 8001db0:	0312      	lsls	r2, r2, #12
 8001db2:	4313      	orrs	r3, r2
 8001db4:	2290      	movs	r2, #144	; 0x90
 8001db6:	05d2      	lsls	r2, r2, #23
 8001db8:	6293      	str	r3, [r2, #40]	; 0x28
                    	GPIOF->BRR  = (B[LED1]<<7) |(C[LED1]<<6);
 8001dba:	4b98      	ldr	r3, [pc, #608]	; (800201c <Display_event+0x348>)
 8001dbc:	5d1b      	ldrb	r3, [r3, r4]
 8001dbe:	01db      	lsls	r3, r3, #7
 8001dc0:	4a97      	ldr	r2, [pc, #604]	; (8002020 <Display_event+0x34c>)
 8001dc2:	5d12      	ldrb	r2, [r2, r4]
 8001dc4:	0192      	lsls	r2, r2, #6
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	4a90      	ldr	r2, [pc, #576]	; (800200c <Display_event+0x338>)
 8001dca:	6293      	str	r3, [r2, #40]	; 0x28
                    	GPIOB->BRR  = (E[LED1]<<15)|(F[LED1]<<14)|(G[LED1]<<13);
 8001dcc:	4b95      	ldr	r3, [pc, #596]	; (8002024 <Display_event+0x350>)
 8001dce:	5d1b      	ldrb	r3, [r3, r4]
 8001dd0:	03db      	lsls	r3, r3, #15
 8001dd2:	4a95      	ldr	r2, [pc, #596]	; (8002028 <Display_event+0x354>)
 8001dd4:	5d12      	ldrb	r2, [r2, r4]
 8001dd6:	0392      	lsls	r2, r2, #14
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	4a94      	ldr	r2, [pc, #592]	; (800202c <Display_event+0x358>)
 8001ddc:	5d12      	ldrb	r2, [r2, r4]
 8001dde:	0352      	lsls	r2, r2, #13
 8001de0:	4313      	orrs	r3, r2
 8001de2:	4a8b      	ldr	r2, [pc, #556]	; (8002010 <Display_event+0x33c>)
 8001de4:	6293      	str	r3, [r2, #40]	; 0x28
 8001de6:	e01f      	b.n	8001e28 <Display_event+0x154>
                      GPIOA->BRR  = (A[LED1]<<15)|(D[LED1]<<12);
 8001de8:	4b8a      	ldr	r3, [pc, #552]	; (8002014 <Display_event+0x340>)
 8001dea:	5d1b      	ldrb	r3, [r3, r4]
 8001dec:	03db      	lsls	r3, r3, #15
 8001dee:	4a8a      	ldr	r2, [pc, #552]	; (8002018 <Display_event+0x344>)
 8001df0:	5d12      	ldrb	r2, [r2, r4]
 8001df2:	0312      	lsls	r2, r2, #12
 8001df4:	4313      	orrs	r3, r2
 8001df6:	2290      	movs	r2, #144	; 0x90
 8001df8:	05d2      	lsls	r2, r2, #23
 8001dfa:	6293      	str	r3, [r2, #40]	; 0x28
                      GPIOF->BRR  = (B[LED1]<<7) |(C[LED1]<<6);
 8001dfc:	4b87      	ldr	r3, [pc, #540]	; (800201c <Display_event+0x348>)
 8001dfe:	5d1b      	ldrb	r3, [r3, r4]
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	4a87      	ldr	r2, [pc, #540]	; (8002020 <Display_event+0x34c>)
 8001e04:	5d12      	ldrb	r2, [r2, r4]
 8001e06:	0192      	lsls	r2, r2, #6
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	4a80      	ldr	r2, [pc, #512]	; (800200c <Display_event+0x338>)
 8001e0c:	6293      	str	r3, [r2, #40]	; 0x28
                      GPIOB->BRR  = (E[LED1]<<15)|(F[LED1]<<14)|(G[LED1]<<13);
 8001e0e:	4b85      	ldr	r3, [pc, #532]	; (8002024 <Display_event+0x350>)
 8001e10:	5d1b      	ldrb	r3, [r3, r4]
 8001e12:	03db      	lsls	r3, r3, #15
 8001e14:	4a84      	ldr	r2, [pc, #528]	; (8002028 <Display_event+0x354>)
 8001e16:	5d12      	ldrb	r2, [r2, r4]
 8001e18:	0392      	lsls	r2, r2, #14
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	4a83      	ldr	r2, [pc, #524]	; (800202c <Display_event+0x358>)
 8001e1e:	5d12      	ldrb	r2, [r2, r4]
 8001e20:	0352      	lsls	r2, r2, #13
 8001e22:	4313      	orrs	r3, r2
 8001e24:	4a7a      	ldr	r2, [pc, #488]	; (8002010 <Display_event+0x33c>)
 8001e26:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR = (uint32_t)LED1_Pin ;
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	2390      	movs	r3, #144	; 0x90
 8001e2e:	05db      	lsls	r3, r3, #23
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
			 	   }



			 	   }
			  Segment++;
 8001e32:	4a75      	ldr	r2, [pc, #468]	; (8002008 <Display_event+0x334>)
 8001e34:	7813      	ldrb	r3, [r2, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	7013      	strb	r3, [r2, #0]
			 	 	    if(Segment>4)
 8001e3c:	7813      	ldrb	r3, [r2, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d902      	bls.n	8001e4a <Display_event+0x176>
			 	 	   {

			 	 	    Segment = 1;
 8001e44:	2201      	movs	r2, #1
 8001e46:	4b70      	ldr	r3, [pc, #448]	; (8002008 <Display_event+0x334>)
 8001e48:	701a      	strb	r2, [r3, #0]





}
 8001e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    	 if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	4870      	ldr	r0, [pc, #448]	; (8002010 <Display_event+0x33c>)
 8001e50:	f000 ff44 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d0a6      	beq.n	8001da6 <Display_event+0xd2>
 8001e58:	2108      	movs	r1, #8
 8001e5a:	486d      	ldr	r0, [pc, #436]	; (8002010 <Display_event+0x33c>)
 8001e5c:	f000 ff3e 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d1e1      	bne.n	8001e28 <Display_event+0x154>
 8001e64:	e79f      	b.n	8001da6 <Display_event+0xd2>
			 	  	 GPIOA->BSRR   =(uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8001e66:	2390      	movs	r3, #144	; 0x90
 8001e68:	05db      	lsls	r3, r3, #23
 8001e6a:	21f0      	movs	r1, #240	; 0xf0
 8001e6c:	0109      	lsls	r1, r1, #4
 8001e6e:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 8001e70:	2190      	movs	r1, #144	; 0x90
 8001e72:	0209      	lsls	r1, r1, #8
 8001e74:	6199      	str	r1, [r3, #24]
			 	  	 GPIOF->BSRR = B_Pin|C_Pin;
 8001e76:	21c0      	movs	r1, #192	; 0xc0
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <Display_event+0x338>)
 8001e7a:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 8001e7c:	21f0      	movs	r1, #240	; 0xf0
 8001e7e:	0209      	lsls	r1, r1, #8
 8001e80:	4b63      	ldr	r3, [pc, #396]	; (8002010 <Display_event+0x33c>)
 8001e82:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==8||Blink==9||Blink==0)
 8001e84:	0013      	movs	r3, r2
 8001e86:	3b08      	subs	r3, #8
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d92a      	bls.n	8001ee2 <Display_event+0x20e>
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	d12e      	bne.n	8001eee <Display_event+0x21a>
			 	  		 if((Blink==0)&&(gTime.Seconds%2)==0)
 8001e90:	4b67      	ldr	r3, [pc, #412]	; (8002030 <Display_event+0x35c>)
 8001e92:	789b      	ldrb	r3, [r3, #2]
 8001e94:	07db      	lsls	r3, r3, #31
 8001e96:	d426      	bmi.n	8001ee6 <Display_event+0x212>
			 	  		   GPIOB->BSRR  = DB_Pin;
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	0152      	lsls	r2, r2, #5
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <Display_event+0x33c>)
 8001e9e:	619a      	str	r2, [r3, #24]
			 	  	 GPIOA->BRR  = (A[LED2]<<15)|(D[LED2]<<12);
 8001ea0:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <Display_event+0x340>)
 8001ea2:	5ddb      	ldrb	r3, [r3, r7]
 8001ea4:	03db      	lsls	r3, r3, #15
 8001ea6:	4a5c      	ldr	r2, [pc, #368]	; (8002018 <Display_event+0x344>)
 8001ea8:	5dd2      	ldrb	r2, [r2, r7]
 8001eaa:	0312      	lsls	r2, r2, #12
 8001eac:	4313      	orrs	r3, r2
 8001eae:	2290      	movs	r2, #144	; 0x90
 8001eb0:	05d2      	lsls	r2, r2, #23
 8001eb2:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOF->BRR  = (B[LED2]<<7) |(C[LED2]<<6);
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <Display_event+0x348>)
 8001eb6:	5ddb      	ldrb	r3, [r3, r7]
 8001eb8:	01db      	lsls	r3, r3, #7
 8001eba:	4a59      	ldr	r2, [pc, #356]	; (8002020 <Display_event+0x34c>)
 8001ebc:	5dd2      	ldrb	r2, [r2, r7]
 8001ebe:	0192      	lsls	r2, r2, #6
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	4a52      	ldr	r2, [pc, #328]	; (800200c <Display_event+0x338>)
 8001ec4:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOB->BRR  = (E[LED2]<<15)|(F[LED2]<<14)|(G[LED2]<<13);
 8001ec6:	4b57      	ldr	r3, [pc, #348]	; (8002024 <Display_event+0x350>)
 8001ec8:	5ddb      	ldrb	r3, [r3, r7]
 8001eca:	03db      	lsls	r3, r3, #15
 8001ecc:	4a56      	ldr	r2, [pc, #344]	; (8002028 <Display_event+0x354>)
 8001ece:	5dd2      	ldrb	r2, [r2, r7]
 8001ed0:	0392      	lsls	r2, r2, #14
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <Display_event+0x358>)
 8001ed6:	5dd2      	ldrb	r2, [r2, r7]
 8001ed8:	0352      	lsls	r2, r2, #13
 8001eda:	4313      	orrs	r3, r2
 8001edc:	4a4c      	ldr	r2, [pc, #304]	; (8002010 <Display_event+0x33c>)
 8001ede:	6293      	str	r3, [r2, #40]	; 0x28
 8001ee0:	e030      	b.n	8001f44 <Display_event+0x270>
			 	  		 if((Blink==0)&&(gTime.Seconds%2)==0)
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	d0d4      	beq.n	8001e90 <Display_event+0x1bc>
			 	  	     GPIOB->BRR  = DB_Pin;
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	0149      	lsls	r1, r1, #5
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <Display_event+0x33c>)
 8001eec:	6299      	str	r1, [r3, #40]	; 0x28
			 	  	 if(Blink==2||Blink==5||Blink==6||Blink==8)
 8001eee:	2a08      	cmp	r2, #8
 8001ef0:	d8d6      	bhi.n	8001ea0 <Display_event+0x1cc>
 8001ef2:	23b2      	movs	r3, #178	; 0xb2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	40d3      	lsrs	r3, r2
 8001ef8:	07db      	lsls	r3, r3, #31
 8001efa:	d5d1      	bpl.n	8001ea0 <Display_event+0x1cc>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8001efc:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <Display_event+0x35c>)
 8001efe:	789b      	ldrb	r3, [r3, #2]
 8001f00:	07db      	lsls	r3, r3, #31
 8001f02:	d425      	bmi.n	8001f50 <Display_event+0x27c>
			 	  			GPIOA->BRR  = (A[LED2]<<15)|(D[LED2]<<12);
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <Display_event+0x340>)
 8001f06:	5ddb      	ldrb	r3, [r3, r7]
 8001f08:	03db      	lsls	r3, r3, #15
 8001f0a:	4a43      	ldr	r2, [pc, #268]	; (8002018 <Display_event+0x344>)
 8001f0c:	5dd2      	ldrb	r2, [r2, r7]
 8001f0e:	0312      	lsls	r2, r2, #12
 8001f10:	4313      	orrs	r3, r2
 8001f12:	2290      	movs	r2, #144	; 0x90
 8001f14:	05d2      	lsls	r2, r2, #23
 8001f16:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOF->BRR  = (B[LED2]<<7) |(C[LED2]<<6);
 8001f18:	4b40      	ldr	r3, [pc, #256]	; (800201c <Display_event+0x348>)
 8001f1a:	5ddb      	ldrb	r3, [r3, r7]
 8001f1c:	01db      	lsls	r3, r3, #7
 8001f1e:	4a40      	ldr	r2, [pc, #256]	; (8002020 <Display_event+0x34c>)
 8001f20:	5dd2      	ldrb	r2, [r2, r7]
 8001f22:	0192      	lsls	r2, r2, #6
 8001f24:	4313      	orrs	r3, r2
 8001f26:	4a39      	ldr	r2, [pc, #228]	; (800200c <Display_event+0x338>)
 8001f28:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	        GPIOB->BRR  = (E[LED2]<<15)|(F[LED2]<<14)|(G[LED2]<<13);
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <Display_event+0x350>)
 8001f2c:	5ddb      	ldrb	r3, [r3, r7]
 8001f2e:	03db      	lsls	r3, r3, #15
 8001f30:	4a3d      	ldr	r2, [pc, #244]	; (8002028 <Display_event+0x354>)
 8001f32:	5dd2      	ldrb	r2, [r2, r7]
 8001f34:	0392      	lsls	r2, r2, #14
 8001f36:	4313      	orrs	r3, r2
 8001f38:	4a3c      	ldr	r2, [pc, #240]	; (800202c <Display_event+0x358>)
 8001f3a:	5dd2      	ldrb	r2, [r2, r7]
 8001f3c:	0352      	lsls	r2, r2, #13
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	4a33      	ldr	r2, [pc, #204]	; (8002010 <Display_event+0x33c>)
 8001f42:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOA->BRR  =(uint32_t)LED2_Pin ;
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	00d2      	lsls	r2, r2, #3
 8001f48:	2390      	movs	r3, #144	; 0x90
 8001f4a:	05db      	lsls	r3, r3, #23
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 8001f4e:	e770      	b.n	8001e32 <Display_event+0x15e>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8001f50:	2110      	movs	r1, #16
 8001f52:	482f      	ldr	r0, [pc, #188]	; (8002010 <Display_event+0x33c>)
 8001f54:	f000 fec2 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	d0d3      	beq.n	8001f04 <Display_event+0x230>
 8001f5c:	2108      	movs	r1, #8
 8001f5e:	482c      	ldr	r0, [pc, #176]	; (8002010 <Display_event+0x33c>)
 8001f60:	f000 febc 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d1ed      	bne.n	8001f44 <Display_event+0x270>
 8001f68:	e7cc      	b.n	8001f04 <Display_event+0x230>
			 	  	 GPIOA->BSRR =  (uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8001f6a:	2390      	movs	r3, #144	; 0x90
 8001f6c:	05db      	lsls	r3, r3, #23
 8001f6e:	21f0      	movs	r1, #240	; 0xf0
 8001f70:	0109      	lsls	r1, r1, #4
 8001f72:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 8001f74:	2190      	movs	r1, #144	; 0x90
 8001f76:	0209      	lsls	r1, r1, #8
 8001f78:	6199      	str	r1, [r3, #24]
			 	     GPIOF->BSRR = B_Pin|C_Pin;
 8001f7a:	21c0      	movs	r1, #192	; 0xc0
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <Display_event+0x338>)
 8001f7e:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 8001f80:	21f0      	movs	r1, #240	; 0xf0
 8001f82:	0209      	lsls	r1, r1, #8
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <Display_event+0x33c>)
 8001f86:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==8||Blink==9||Blink==0)
 8001f88:	0013      	movs	r3, r2
 8001f8a:	3b08      	subs	r3, #8
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d90a      	bls.n	8001fa6 <Display_event+0x2d2>
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d10e      	bne.n	8001fb2 <Display_event+0x2de>
			 	  		 if((Blink==0)&&(gTime.Seconds%2)==0)
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <Display_event+0x35c>)
 8001f96:	789b      	ldrb	r3, [r3, #2]
 8001f98:	07db      	lsls	r3, r3, #31
 8001f9a:	d406      	bmi.n	8001faa <Display_event+0x2d6>
			 	  		   GPIOB->BSRR  = G_Pin;
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	0192      	lsls	r2, r2, #6
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <Display_event+0x33c>)
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	e00e      	b.n	8001fc4 <Display_event+0x2f0>
			 	  		 if((Blink==0)&&(gTime.Seconds%2)==0)
 8001fa6:	2a00      	cmp	r2, #0
 8001fa8:	d0f4      	beq.n	8001f94 <Display_event+0x2c0>
			 	  	     GPIOB->BRR  = G_Pin;
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	0189      	lsls	r1, r1, #6
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <Display_event+0x33c>)
 8001fb0:	6299      	str	r1, [r3, #40]	; 0x28
			 	  	 if(Blink==3||Blink==5||Blink==7||Blink==9)
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	0011      	movs	r1, r2
 8001fb6:	4399      	bics	r1, r3
 8001fb8:	2903      	cmp	r1, #3
 8001fba:	d03b      	beq.n	8002034 <Display_event+0x360>
 8001fbc:	3a05      	subs	r2, #5
 8001fbe:	23fb      	movs	r3, #251	; 0xfb
 8001fc0:	421a      	tst	r2, r3
 8001fc2:	d037      	beq.n	8002034 <Display_event+0x360>
			 	  	 GPIOA->BRR  = (A[LED3]<<15)|(D[LED3]<<12);
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <Display_event+0x340>)
 8001fc6:	5d9b      	ldrb	r3, [r3, r6]
 8001fc8:	03db      	lsls	r3, r3, #15
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <Display_event+0x344>)
 8001fcc:	5d92      	ldrb	r2, [r2, r6]
 8001fce:	0312      	lsls	r2, r2, #12
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	2290      	movs	r2, #144	; 0x90
 8001fd4:	05d2      	lsls	r2, r2, #23
 8001fd6:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOF->BRR  = (B[LED3]<<7) |(C[LED3]<<6);
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <Display_event+0x348>)
 8001fda:	5d9b      	ldrb	r3, [r3, r6]
 8001fdc:	01db      	lsls	r3, r3, #7
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <Display_event+0x34c>)
 8001fe0:	5d92      	ldrb	r2, [r2, r6]
 8001fe2:	0192      	lsls	r2, r2, #6
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	4a09      	ldr	r2, [pc, #36]	; (800200c <Display_event+0x338>)
 8001fe8:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOB->BRR  = (E[LED3]<<15)|(F[LED3]<<14)|(G[LED3]<<12);
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <Display_event+0x350>)
 8001fec:	5d9b      	ldrb	r3, [r3, r6]
 8001fee:	03db      	lsls	r3, r3, #15
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <Display_event+0x354>)
 8001ff2:	5d92      	ldrb	r2, [r2, r6]
 8001ff4:	0392      	lsls	r2, r2, #14
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <Display_event+0x358>)
 8001ffa:	5d92      	ldrb	r2, [r2, r6]
 8001ffc:	0312      	lsls	r2, r2, #12
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <Display_event+0x33c>)
 8002002:	6293      	str	r3, [r2, #40]	; 0x28
 8002004:	e03a      	b.n	800207c <Display_event+0x3a8>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	20000000 	.word	0x20000000
 800200c:	48001400 	.word	0x48001400
 8002010:	48000400 	.word	0x48000400
 8002014:	080049f0 	.word	0x080049f0
 8002018:	08004a74 	.word	0x08004a74
 800201c:	08004a1c 	.word	0x08004a1c
 8002020:	08004a48 	.word	0x08004a48
 8002024:	08004aa0 	.word	0x08004aa0
 8002028:	08004acc 	.word	0x08004acc
 800202c:	08004af8 	.word	0x08004af8
 8002030:	2000010c 	.word	0x2000010c
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <Display_event+0x43c>)
 8002036:	789b      	ldrb	r3, [r3, #2]
 8002038:	07db      	lsls	r3, r3, #31
 800203a:	d425      	bmi.n	8002088 <Display_event+0x3b4>
			 	  			GPIOA->BRR  = (A[LED3]<<15)|(D[LED3]<<12);
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <Display_event+0x440>)
 800203e:	5d9b      	ldrb	r3, [r3, r6]
 8002040:	03db      	lsls	r3, r3, #15
 8002042:	4a35      	ldr	r2, [pc, #212]	; (8002118 <Display_event+0x444>)
 8002044:	5d92      	ldrb	r2, [r2, r6]
 8002046:	0312      	lsls	r2, r2, #12
 8002048:	4313      	orrs	r3, r2
 800204a:	2290      	movs	r2, #144	; 0x90
 800204c:	05d2      	lsls	r2, r2, #23
 800204e:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOF->BRR  = (B[LED3]<<7) |(C[LED3]<<6);
 8002050:	4b32      	ldr	r3, [pc, #200]	; (800211c <Display_event+0x448>)
 8002052:	5d9b      	ldrb	r3, [r3, r6]
 8002054:	01db      	lsls	r3, r3, #7
 8002056:	4a32      	ldr	r2, [pc, #200]	; (8002120 <Display_event+0x44c>)
 8002058:	5d92      	ldrb	r2, [r2, r6]
 800205a:	0192      	lsls	r2, r2, #6
 800205c:	4313      	orrs	r3, r2
 800205e:	4a31      	ldr	r2, [pc, #196]	; (8002124 <Display_event+0x450>)
 8002060:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOB->BRR  = (E[LED3]<<15)|(F[LED3]<<14)|(G[LED3]<<12);
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <Display_event+0x454>)
 8002064:	5d9b      	ldrb	r3, [r3, r6]
 8002066:	03db      	lsls	r3, r3, #15
 8002068:	4a30      	ldr	r2, [pc, #192]	; (800212c <Display_event+0x458>)
 800206a:	5d92      	ldrb	r2, [r2, r6]
 800206c:	0392      	lsls	r2, r2, #14
 800206e:	4313      	orrs	r3, r2
 8002070:	4a2f      	ldr	r2, [pc, #188]	; (8002130 <Display_event+0x45c>)
 8002072:	5d92      	ldrb	r2, [r2, r6]
 8002074:	0312      	lsls	r2, r2, #12
 8002076:	4313      	orrs	r3, r2
 8002078:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <Display_event+0x460>)
 800207a:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR = (uint32_t)LED3_Pin;
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	2390      	movs	r3, #144	; 0x90
 8002082:	05db      	lsls	r3, r3, #23
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 8002086:	e6d4      	b.n	8001e32 <Display_event+0x15e>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8002088:	2110      	movs	r1, #16
 800208a:	482a      	ldr	r0, [pc, #168]	; (8002134 <Display_event+0x460>)
 800208c:	f000 fe26 	bl	8002cdc <HAL_GPIO_ReadPin>
 8002090:	2800      	cmp	r0, #0
 8002092:	d0d3      	beq.n	800203c <Display_event+0x368>
 8002094:	2108      	movs	r1, #8
 8002096:	4827      	ldr	r0, [pc, #156]	; (8002134 <Display_event+0x460>)
 8002098:	f000 fe20 	bl	8002cdc <HAL_GPIO_ReadPin>
 800209c:	2800      	cmp	r0, #0
 800209e:	d1ed      	bne.n	800207c <Display_event+0x3a8>
 80020a0:	e7cc      	b.n	800203c <Display_event+0x368>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <Display_event+0x43c>)
 80020a4:	789b      	ldrb	r3, [r3, #2]
 80020a6:	07db      	lsls	r3, r3, #31
 80020a8:	d425      	bmi.n	80020f6 <Display_event+0x422>
			 	  		 GPIOA->BRR  = (A[LED4]<<15)|(D[LED4]<<12);
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <Display_event+0x440>)
 80020ac:	5d5b      	ldrb	r3, [r3, r5]
 80020ae:	03db      	lsls	r3, r3, #15
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <Display_event+0x444>)
 80020b2:	5d52      	ldrb	r2, [r2, r5]
 80020b4:	0312      	lsls	r2, r2, #12
 80020b6:	4313      	orrs	r3, r2
 80020b8:	2290      	movs	r2, #144	; 0x90
 80020ba:	05d2      	lsls	r2, r2, #23
 80020bc:	6293      	str	r3, [r2, #40]	; 0x28
			 	  		 GPIOF->BRR  = (B[LED4]<<7) |(C[LED4]<<6);
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <Display_event+0x448>)
 80020c0:	5d5b      	ldrb	r3, [r3, r5]
 80020c2:	01db      	lsls	r3, r3, #7
 80020c4:	4a16      	ldr	r2, [pc, #88]	; (8002120 <Display_event+0x44c>)
 80020c6:	5d52      	ldrb	r2, [r2, r5]
 80020c8:	0192      	lsls	r2, r2, #6
 80020ca:	4313      	orrs	r3, r2
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <Display_event+0x450>)
 80020ce:	6293      	str	r3, [r2, #40]	; 0x28
			 	  		 GPIOB->BRR  = (E[LED4]<<15)|(F[LED4]<<14)|(G[LED4]<<13);
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <Display_event+0x454>)
 80020d2:	5d5b      	ldrb	r3, [r3, r5]
 80020d4:	03db      	lsls	r3, r3, #15
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <Display_event+0x458>)
 80020d8:	5d52      	ldrb	r2, [r2, r5]
 80020da:	0392      	lsls	r2, r2, #14
 80020dc:	4313      	orrs	r3, r2
 80020de:	4a14      	ldr	r2, [pc, #80]	; (8002130 <Display_event+0x45c>)
 80020e0:	5d52      	ldrb	r2, [r2, r5]
 80020e2:	0352      	lsls	r2, r2, #13
 80020e4:	4313      	orrs	r3, r2
 80020e6:	4a13      	ldr	r2, [pc, #76]	; (8002134 <Display_event+0x460>)
 80020e8:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR  =(uint32_t)LED4_Pin ;
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	0052      	lsls	r2, r2, #1
 80020ee:	2390      	movs	r3, #144	; 0x90
 80020f0:	05db      	lsls	r3, r3, #23
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 80020f4:	e69d      	b.n	8001e32 <Display_event+0x15e>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 80020f6:	2110      	movs	r1, #16
 80020f8:	480e      	ldr	r0, [pc, #56]	; (8002134 <Display_event+0x460>)
 80020fa:	f000 fdef 	bl	8002cdc <HAL_GPIO_ReadPin>
 80020fe:	2800      	cmp	r0, #0
 8002100:	d0d3      	beq.n	80020aa <Display_event+0x3d6>
 8002102:	2108      	movs	r1, #8
 8002104:	480b      	ldr	r0, [pc, #44]	; (8002134 <Display_event+0x460>)
 8002106:	f000 fde9 	bl	8002cdc <HAL_GPIO_ReadPin>
 800210a:	2800      	cmp	r0, #0
 800210c:	d1ed      	bne.n	80020ea <Display_event+0x416>
 800210e:	e7cc      	b.n	80020aa <Display_event+0x3d6>
 8002110:	2000010c 	.word	0x2000010c
 8002114:	080049f0 	.word	0x080049f0
 8002118:	08004a74 	.word	0x08004a74
 800211c:	08004a1c 	.word	0x08004a1c
 8002120:	08004a48 	.word	0x08004a48
 8002124:	48001400 	.word	0x48001400
 8002128:	08004aa0 	.word	0x08004aa0
 800212c:	08004acc 	.word	0x08004acc
 8002130:	08004af8 	.word	0x08004af8
 8002134:	48000400 	.word	0x48000400

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b510      	push	{r4, lr}
 800213a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800213c:	f001 f90e 	bl	800335c <HAL_RCC_GetHCLKFreq>
 8002140:	21fa      	movs	r1, #250	; 0xfa
 8002142:	0089      	lsls	r1, r1, #2
 8002144:	f7fd ffe0 	bl	8000108 <__udivsi3>
 8002148:	f000 faa6 	bl	8002698 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800214c:	2200      	movs	r2, #0
 800214e:	0021      	movs	r1, r4
 8002150:	2001      	movs	r0, #1
 8002152:	4240      	negs	r0, r0
 8002154:	f000 fa62 	bl	800261c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002158:	2000      	movs	r0, #0
 800215a:	bd10      	pop	{r4, pc}

0800215c <HAL_Init>:
{
 800215c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <HAL_Init+0x1c>)
 8002160:	6813      	ldr	r3, [r2, #0]
 8002162:	2110      	movs	r1, #16
 8002164:	430b      	orrs	r3, r1
 8002166:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff ffe5 	bl	8002138 <HAL_InitTick>
  HAL_MspInit();
 800216e:	f002 faad 	bl	80046cc <HAL_MspInit>
}
 8002172:	2000      	movs	r0, #0
 8002174:	bd10      	pop	{r4, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	40022000 	.word	0x40022000

0800217c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800217c:	4a02      	ldr	r2, [pc, #8]	; (8002188 <HAL_IncTick+0xc>)
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	4770      	bx	lr
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	2000007c 	.word	0x2000007c

0800218c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800218c:	4b01      	ldr	r3, [pc, #4]	; (8002194 <HAL_GetTick+0x8>)
 800218e:	6818      	ldr	r0, [r3, #0]
}
 8002190:	4770      	bx	lr
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	2000007c 	.word	0x2000007c

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002198:	b530      	push	{r4, r5, lr}
 800219a:	b083      	sub	sp, #12
 800219c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800219e:	f7ff fff5 	bl	800218c <HAL_GetTick>
 80021a2:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 80021a4:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80021a6:	1c63      	adds	r3, r4, #1
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	4193      	sbcs	r3, r2
 80021ac:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021ae:	f7ff ffed 	bl	800218c <HAL_GetTick>
 80021b2:	1b40      	subs	r0, r0, r5
 80021b4:	42a0      	cmp	r0, r4
 80021b6:	d3fa      	bcc.n	80021ae <HAL_Delay+0x16>
  {
  }
}
 80021b8:	b003      	add	sp, #12
 80021ba:	bd30      	pop	{r4, r5, pc}

080021bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021c6:	6802      	ldr	r2, [r0, #0]
 80021c8:	6891      	ldr	r1, [r2, #8]
 80021ca:	3303      	adds	r3, #3
 80021cc:	400b      	ands	r3, r1
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d02d      	beq.n	800222e <ADC_Enable+0x72>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021d2:	6891      	ldr	r1, [r2, #8]
 80021d4:	4b20      	ldr	r3, [pc, #128]	; (8002258 <ADC_Enable+0x9c>)
 80021d6:	4219      	tst	r1, r3
 80021d8:	d131      	bne.n	800223e <ADC_Enable+0x82>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021da:	6893      	ldr	r3, [r2, #8]
 80021dc:	2101      	movs	r1, #1
 80021de:	430b      	orrs	r3, r1
 80021e0:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <ADC_Enable+0xa0>)
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	491e      	ldr	r1, [pc, #120]	; (8002260 <ADC_Enable+0xa4>)
 80021e8:	f7fd ff8e 	bl	8000108 <__udivsi3>
 80021ec:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021f4:	9b01      	ldr	r3, [sp, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80021fa:	9b01      	ldr	r3, [sp, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002200:	f7ff ffc4 	bl	800218c <HAL_GetTick>
 8002204:	0006      	movs	r6, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002206:	2501      	movs	r5, #1
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	421d      	tst	r5, r3
 800220e:	d121      	bne.n	8002254 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002210:	f7ff ffbc 	bl	800218c <HAL_GetTick>
 8002214:	1b80      	subs	r0, r0, r6
 8002216:	2802      	cmp	r0, #2
 8002218:	d9f6      	bls.n	8002208 <ADC_Enable+0x4c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800221c:	2210      	movs	r2, #16
 800221e:	4313      	orrs	r3, r2
 8002220:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002224:	3a0f      	subs	r2, #15
 8002226:	4313      	orrs	r3, r2
 8002228:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 800222a:	2001      	movs	r0, #1
 800222c:	e010      	b.n	8002250 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800222e:	6813      	ldr	r3, [r2, #0]
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002230:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002232:	07db      	lsls	r3, r3, #31
 8002234:	d40c      	bmi.n	8002250 <ADC_Enable+0x94>
 8002236:	68d3      	ldr	r3, [r2, #12]
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	d409      	bmi.n	8002250 <ADC_Enable+0x94>
 800223c:	e7c9      	b.n	80021d2 <ADC_Enable+0x16>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002240:	2210      	movs	r2, #16
 8002242:	4313      	orrs	r3, r2
 8002244:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002246:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002248:	3a0f      	subs	r2, #15
 800224a:	4313      	orrs	r3, r2
 800224c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
}
 8002250:	b002      	add	sp, #8
 8002252:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002254:	2000      	movs	r0, #0
 8002256:	e7fb      	b.n	8002250 <ADC_Enable+0x94>
 8002258:	80000017 	.word	0x80000017
 800225c:	20000048 	.word	0x20000048
 8002260:	000f4240 	.word	0x000f4240

08002264 <HAL_ADC_Init>:
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8002268:	d100      	bne.n	800226c <HAL_ADC_Init+0x8>
 800226a:	e0a4      	b.n	80023b6 <HAL_ADC_Init+0x152>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800226c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800226e:	2b00      	cmp	r3, #0
 8002270:	d073      	beq.n	800235a <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002272:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002274:	06db      	lsls	r3, r3, #27
 8002276:	d500      	bpl.n	800227a <HAL_ADC_Init+0x16>
 8002278:	e097      	b.n	80023aa <HAL_ADC_Init+0x146>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800227a:	6822      	ldr	r2, [r4, #0]
 800227c:	6893      	ldr	r3, [r2, #8]
 800227e:	2104      	movs	r1, #4
 8002280:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8002282:	d000      	beq.n	8002286 <HAL_ADC_Init+0x22>
 8002284:	e091      	b.n	80023aa <HAL_ADC_Init+0x146>
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002288:	484c      	ldr	r0, [pc, #304]	; (80023bc <HAL_ADC_Init+0x158>)
 800228a:	4003      	ands	r3, r0
 800228c:	3006      	adds	r0, #6
 800228e:	30ff      	adds	r0, #255	; 0xff
 8002290:	4303      	orrs	r3, r0
 8002292:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002294:	6890      	ldr	r0, [r2, #8]
 8002296:	2303      	movs	r3, #3
 8002298:	4003      	ands	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d063      	beq.n	8002366 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 800229e:	68d3      	ldr	r3, [r2, #12]
 80022a0:	2018      	movs	r0, #24
 80022a2:	4383      	bics	r3, r0
 80022a4:	68a0      	ldr	r0, [r4, #8]
 80022a6:	4303      	orrs	r3, r0
 80022a8:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	6913      	ldr	r3, [r2, #16]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	6860      	ldr	r0, [r4, #4]
 80022b4:	4303      	orrs	r3, r0
 80022b6:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	68d3      	ldr	r3, [r2, #12]
 80022bc:	4840      	ldr	r0, [pc, #256]	; (80023c0 <HAL_ADC_Init+0x15c>)
 80022be:	4003      	ands	r3, r0
 80022c0:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80022c2:	69a3      	ldr	r3, [r4, #24]
 80022c4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80022c6:	69e3      	ldr	r3, [r4, #28]
 80022c8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80022ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80022cc:	6a20      	ldr	r0, [r4, #32]
 80022ce:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80022d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022d2:	000e      	movs	r6, r1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d001      	beq.n	80022dc <HAL_ADC_Init+0x78>
 80022d8:	2680      	movs	r6, #128	; 0x80
 80022da:	0176      	lsls	r6, r6, #5
 80022dc:	68e3      	ldr	r3, [r4, #12]
 80022de:	431a      	orrs	r2, r3
 80022e0:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80022e2:	6923      	ldr	r3, [r4, #16]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d045      	beq.n	8002374 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80022e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80022ec:	4313      	orrs	r3, r2
 80022ee:	4333      	orrs	r3, r6
 80022f0:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022f4:	2a01      	cmp	r2, #1
 80022f6:	d03f      	beq.n	8002378 <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022fa:	21c2      	movs	r1, #194	; 0xc2
 80022fc:	31ff      	adds	r1, #255	; 0xff
 80022fe:	428a      	cmp	r2, r1
 8002300:	d002      	beq.n	8002308 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002302:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002304:	430a      	orrs	r2, r1
 8002306:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002308:	6821      	ldr	r1, [r4, #0]
 800230a:	68ca      	ldr	r2, [r1, #12]
 800230c:	431a      	orrs	r2, r3
 800230e:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002310:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	0549      	lsls	r1, r1, #21
 8002316:	428a      	cmp	r2, r1
 8002318:	d002      	beq.n	8002320 <HAL_ADC_Init+0xbc>
 800231a:	3a01      	subs	r2, #1
 800231c:	2a06      	cmp	r2, #6
 800231e:	d80a      	bhi.n	8002336 <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002320:	6820      	ldr	r0, [r4, #0]
 8002322:	6941      	ldr	r1, [r0, #20]
 8002324:	2207      	movs	r2, #7
 8002326:	4391      	bics	r1, r2
 8002328:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800232a:	6821      	ldr	r1, [r4, #0]
 800232c:	6948      	ldr	r0, [r1, #20]
 800232e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002330:	402a      	ands	r2, r5
 8002332:	4302      	orrs	r2, r0
 8002334:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	68d2      	ldr	r2, [r2, #12]
 800233a:	4922      	ldr	r1, [pc, #136]	; (80023c4 <HAL_ADC_Init+0x160>)
 800233c:	400a      	ands	r2, r1
 800233e:	4293      	cmp	r3, r2
 8002340:	d029      	beq.n	8002396 <HAL_ADC_Init+0x132>
      ADC_STATE_CLR_SET(hadc->State,
 8002342:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002344:	2212      	movs	r2, #18
 8002346:	4393      	bics	r3, r2
 8002348:	3a02      	subs	r2, #2
 800234a:	4313      	orrs	r3, r2
 800234c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002350:	3a0f      	subs	r2, #15
 8002352:	4313      	orrs	r3, r2
 8002354:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8002356:	2001      	movs	r0, #1
 8002358:	e02c      	b.n	80023b4 <HAL_ADC_Init+0x150>
    ADC_CLEAR_ERRORCODE(hadc);
 800235a:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800235c:	2240      	movs	r2, #64	; 0x40
 800235e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002360:	f002 f9de 	bl	8004720 <HAL_ADC_MspInit>
 8002364:	e785      	b.n	8002272 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002366:	6813      	ldr	r3, [r2, #0]
 8002368:	07db      	lsls	r3, r3, #31
 800236a:	d4a5      	bmi.n	80022b8 <HAL_ADC_Init+0x54>
 800236c:	68d3      	ldr	r3, [r2, #12]
 800236e:	041b      	lsls	r3, r3, #16
 8002370:	d595      	bpl.n	800229e <HAL_ADC_Init+0x3a>
 8002372:	e7a1      	b.n	80022b8 <HAL_ADC_Init+0x54>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002374:	2104      	movs	r1, #4
 8002376:	e7b7      	b.n	80022e8 <HAL_ADC_Init+0x84>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002378:	2800      	cmp	r0, #0
 800237a:	d103      	bne.n	8002384 <HAL_ADC_Init+0x120>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	0252      	lsls	r2, r2, #9
 8002380:	4313      	orrs	r3, r2
 8002382:	e7b9      	b.n	80022f8 <HAL_ADC_Init+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002384:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002386:	2120      	movs	r1, #32
 8002388:	430a      	orrs	r2, r1
 800238a:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800238e:	391f      	subs	r1, #31
 8002390:	430a      	orrs	r2, r1
 8002392:	64a2      	str	r2, [r4, #72]	; 0x48
 8002394:	e7b0      	b.n	80022f8 <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 8002396:	2300      	movs	r3, #0
 8002398:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800239a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800239c:	2203      	movs	r2, #3
 800239e:	4393      	bics	r3, r2
 80023a0:	3a02      	subs	r2, #2
 80023a2:	4313      	orrs	r3, r2
 80023a4:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a6:	2000      	movs	r0, #0
 80023a8:	e004      	b.n	80023b4 <HAL_ADC_Init+0x150>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023ac:	2210      	movs	r2, #16
 80023ae:	4313      	orrs	r3, r2
 80023b0:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80023b2:	2001      	movs	r0, #1
}
 80023b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80023b6:	2001      	movs	r0, #1
 80023b8:	e7fc      	b.n	80023b4 <HAL_ADC_Init+0x150>
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	fffffefd 	.word	0xfffffefd
 80023c0:	fffe0219 	.word	0xfffe0219
 80023c4:	833fffe7 	.word	0x833fffe7

080023c8 <HAL_ADC_Start_DMA>:
{
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	0004      	movs	r4, r0
 80023cc:	000d      	movs	r5, r1
 80023ce:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023d0:	6803      	ldr	r3, [r0, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
    tmp_hal_status = HAL_BUSY;
 80023d4:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023d6:	075b      	lsls	r3, r3, #29
 80023d8:	d500      	bpl.n	80023dc <HAL_ADC_Start_DMA+0x14>
}
 80023da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 80023dc:	2340      	movs	r3, #64	; 0x40
 80023de:	5ce3      	ldrb	r3, [r4, r3]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d0fa      	beq.n	80023da <HAL_ADC_Start_DMA+0x12>
 80023e4:	2201      	movs	r2, #1
 80023e6:	2340      	movs	r3, #64	; 0x40
 80023e8:	54e2      	strb	r2, [r4, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80023ea:	69e3      	ldr	r3, [r4, #28]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d004      	beq.n	80023fa <HAL_ADC_Start_DMA+0x32>
      tmp_hal_status = ADC_Enable(hadc);
 80023f0:	0020      	movs	r0, r4
 80023f2:	f7ff fee3 	bl	80021bc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d1ef      	bne.n	80023da <HAL_ADC_Start_DMA+0x12>
      ADC_STATE_CLR_SET(hadc->State,
 80023fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023fc:	4a16      	ldr	r2, [pc, #88]	; (8002458 <HAL_ADC_Start_DMA+0x90>)
 80023fe:	401a      	ands	r2, r3
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4313      	orrs	r3, r2
 8002406:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8002408:	2300      	movs	r3, #0
 800240a:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002410:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_ADC_Start_DMA+0x94>)
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002416:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002418:	4a11      	ldr	r2, [pc, #68]	; (8002460 <HAL_ADC_Start_DMA+0x98>)
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800241c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800241e:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_ADC_Start_DMA+0x9c>)
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	221c      	movs	r2, #28
 8002426:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002428:	6822      	ldr	r2, [r4, #0]
 800242a:	6853      	ldr	r3, [r2, #4]
 800242c:	2110      	movs	r1, #16
 800242e:	430b      	orrs	r3, r1
 8002430:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002432:	6822      	ldr	r2, [r4, #0]
 8002434:	68d3      	ldr	r3, [r2, #12]
 8002436:	390f      	subs	r1, #15
 8002438:	430b      	orrs	r3, r1
 800243a:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800243c:	6821      	ldr	r1, [r4, #0]
 800243e:	3140      	adds	r1, #64	; 0x40
 8002440:	0033      	movs	r3, r6
 8002442:	002a      	movs	r2, r5
 8002444:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002446:	f000 f993 	bl	8002770 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6893      	ldr	r3, [r2, #8]
 800244e:	2104      	movs	r1, #4
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]
 8002454:	2000      	movs	r0, #0
 8002456:	e7c0      	b.n	80023da <HAL_ADC_Start_DMA+0x12>
 8002458:	fffff0fe 	.word	0xfffff0fe
 800245c:	08002469 	.word	0x08002469
 8002460:	080024db 	.word	0x080024db
 8002464:	080024e7 	.word	0x080024e7

08002468 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002468:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800246c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800246e:	2150      	movs	r1, #80	; 0x50
 8002470:	4211      	tst	r1, r2
 8002472:	d12b      	bne.n	80024cc <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002474:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	430a      	orrs	r2, r1
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68d0      	ldr	r0, [r2, #12]
 8002482:	21c0      	movs	r1, #192	; 0xc0
 8002484:	0109      	lsls	r1, r1, #4
 8002486:	4208      	tst	r0, r1
 8002488:	d113      	bne.n	80024b2 <ADC_DMAConvCplt+0x4a>
 800248a:	6a19      	ldr	r1, [r3, #32]
 800248c:	2900      	cmp	r1, #0
 800248e:	d110      	bne.n	80024b2 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002490:	6811      	ldr	r1, [r2, #0]
 8002492:	0709      	lsls	r1, r1, #28
 8002494:	d50d      	bpl.n	80024b2 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002496:	6891      	ldr	r1, [r2, #8]
 8002498:	0749      	lsls	r1, r1, #29
 800249a:	d40e      	bmi.n	80024ba <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800249c:	6851      	ldr	r1, [r2, #4]
 800249e:	200c      	movs	r0, #12
 80024a0:	4381      	bics	r1, r0
 80024a2:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024a6:	490b      	ldr	r1, [pc, #44]	; (80024d4 <ADC_DMAConvCplt+0x6c>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	3104      	adds	r1, #4
 80024ac:	31ff      	adds	r1, #255	; 0xff
 80024ae:	430a      	orrs	r2, r1
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80024b2:	0018      	movs	r0, r3
 80024b4:	f001 fe9e 	bl	80041f4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80024b8:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024bc:	2120      	movs	r1, #32
 80024be:	430a      	orrs	r2, r1
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024c4:	391f      	subs	r1, #31
 80024c6:	430a      	orrs	r2, r1
 80024c8:	649a      	str	r2, [r3, #72]	; 0x48
 80024ca:	e7f2      	b.n	80024b2 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4798      	blx	r3
}
 80024d2:	e7f1      	b.n	80024b8 <ADC_DMAConvCplt+0x50>
 80024d4:	fffffefe 	.word	0xfffffefe

080024d8 <HAL_ADC_ConvHalfCpltCallback>:
}
 80024d8:	4770      	bx	lr

080024da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024da:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80024dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80024de:	f7ff fffb 	bl	80024d8 <HAL_ADC_ConvHalfCpltCallback>
}
 80024e2:	bd10      	pop	{r4, pc}

080024e4 <HAL_ADC_ErrorCallback>:
}
 80024e4:	4770      	bx	lr

080024e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024e6:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80024ec:	2240      	movs	r2, #64	; 0x40
 80024ee:	4313      	orrs	r3, r2
 80024f0:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024f2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80024f4:	3a3c      	subs	r2, #60	; 0x3c
 80024f6:	4313      	orrs	r3, r2
 80024f8:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80024fa:	f7ff fff3 	bl	80024e4 <HAL_ADC_ErrorCallback>
}
 80024fe:	bd10      	pop	{r4, pc}

08002500 <HAL_ADC_ConfigChannel>:
{
 8002500:	b530      	push	{r4, r5, lr}
 8002502:	b083      	sub	sp, #12
 8002504:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800250a:	3340      	adds	r3, #64	; 0x40
 800250c:	5cc3      	ldrb	r3, [r0, r3]
 800250e:	2002      	movs	r0, #2
 8002510:	2b01      	cmp	r3, #1
 8002512:	d073      	beq.n	80025fc <HAL_ADC_ConfigChannel+0xfc>
 8002514:	2201      	movs	r2, #1
 8002516:	2340      	movs	r3, #64	; 0x40
 8002518:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	0752      	lsls	r2, r2, #29
 8002520:	d464      	bmi.n	80025ec <HAL_ADC_ConfigChannel+0xec>
    if (sConfig->Rank != ADC_RANK_NONE)
 8002522:	4a38      	ldr	r2, [pc, #224]	; (8002604 <HAL_ADC_ConfigChannel+0x104>)
 8002524:	6848      	ldr	r0, [r1, #4]
 8002526:	4290      	cmp	r0, r2
 8002528:	d048      	beq.n	80025bc <HAL_ADC_ConfigChannel+0xbc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800252a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800252c:	2201      	movs	r2, #1
 800252e:	680d      	ldr	r5, [r1, #0]
 8002530:	40aa      	lsls	r2, r5
 8002532:	4302      	orrs	r2, r0
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	0552      	lsls	r2, r2, #21
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x68>
 8002540:	3b01      	subs	r3, #1
 8002542:	2b06      	cmp	r3, #6
 8002544:	d910      	bls.n	8002568 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002546:	6822      	ldr	r2, [r4, #0]
 8002548:	6950      	ldr	r0, [r2, #20]
 800254a:	2307      	movs	r3, #7
 800254c:	4003      	ands	r3, r0
 800254e:	6888      	ldr	r0, [r1, #8]
 8002550:	4298      	cmp	r0, r3
 8002552:	d009      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002554:	6950      	ldr	r0, [r2, #20]
 8002556:	2307      	movs	r3, #7
 8002558:	4398      	bics	r0, r3
 800255a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800255c:	6822      	ldr	r2, [r4, #0]
 800255e:	6950      	ldr	r0, [r2, #20]
 8002560:	688d      	ldr	r5, [r1, #8]
 8002562:	402b      	ands	r3, r5
 8002564:	4303      	orrs	r3, r0
 8002566:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002568:	680b      	ldr	r3, [r1, #0]
 800256a:	001a      	movs	r2, r3
 800256c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002570:	2a01      	cmp	r2, #1
 8002572:	d840      	bhi.n	80025f6 <HAL_ADC_ConfigChannel+0xf6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_ADC_ConfigChannel+0x108>)
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	2b10      	cmp	r3, #16
 800257a:	d01c      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0xb6>
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	03db      	lsls	r3, r3, #15
 8002580:	4313      	orrs	r3, r2
 8002582:	4a21      	ldr	r2, [pc, #132]	; (8002608 <HAL_ADC_ConfigChannel+0x108>)
 8002584:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002586:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258a:	2b10      	cmp	r3, #16
 800258c:	d133      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0xf6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_ADC_ConfigChannel+0x10c>)
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	491f      	ldr	r1, [pc, #124]	; (8002610 <HAL_ADC_ConfigChannel+0x110>)
 8002594:	f7fd fdb8 	bl	8000108 <__udivsi3>
 8002598:	0083      	lsls	r3, r0, #2
 800259a:	1818      	adds	r0, r3, r0
 800259c:	0040      	lsls	r0, r0, #1
 800259e:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80025a0:	9b01      	ldr	r3, [sp, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d02c      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x100>
            wait_loop_index--;
 80025a6:	9b01      	ldr	r3, [sp, #4]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80025ac:	9b01      	ldr	r3, [sp, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0xa6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b2:	2000      	movs	r0, #0
 80025b4:	e01f      	b.n	80025f6 <HAL_ADC_ConfigChannel+0xf6>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	e7e1      	b.n	8002580 <HAL_ADC_ConfigChannel+0x80>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025be:	2001      	movs	r0, #1
 80025c0:	680d      	ldr	r5, [r1, #0]
 80025c2:	40a8      	lsls	r0, r5
 80025c4:	4382      	bics	r2, r0
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025c8:	680b      	ldr	r3, [r1, #0]
 80025ca:	001a      	movs	r2, r3
 80025cc:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ce:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025d0:	2a01      	cmp	r2, #1
 80025d2:	d810      	bhi.n	80025f6 <HAL_ADC_ConfigChannel+0xf6>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025d4:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <HAL_ADC_ConfigChannel+0x108>)
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d005      	beq.n	80025e8 <HAL_ADC_ConfigChannel+0xe8>
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_ADC_ConfigChannel+0x114>)
 80025de:	4013      	ands	r3, r2
 80025e0:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_ADC_ConfigChannel+0x108>)
 80025e2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e4:	2000      	movs	r0, #0
 80025e6:	e006      	b.n	80025f6 <HAL_ADC_ConfigChannel+0xf6>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_ADC_ConfigChannel+0x118>)
 80025ea:	e7f8      	b.n	80025de <HAL_ADC_ConfigChannel+0xde>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025ee:	2220      	movs	r2, #32
 80025f0:	4313      	orrs	r3, r2
 80025f2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80025f4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2340      	movs	r3, #64	; 0x40
 80025fa:	54e2      	strb	r2, [r4, r3]
}
 80025fc:	b003      	add	sp, #12
 80025fe:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002600:	2000      	movs	r0, #0
 8002602:	e7f8      	b.n	80025f6 <HAL_ADC_ConfigChannel+0xf6>
 8002604:	00001001 	.word	0x00001001
 8002608:	40012708 	.word	0x40012708
 800260c:	20000048 	.word	0x20000048
 8002610:	000f4240 	.word	0x000f4240
 8002614:	ffbfffff 	.word	0xffbfffff
 8002618:	ff7fffff 	.word	0xff7fffff

0800261c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261c:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800261e:	2800      	cmp	r0, #0
 8002620:	db14      	blt.n	800264c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002622:	0883      	lsrs	r3, r0, #2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_NVIC_SetPriority+0x60>)
 8002628:	4694      	mov	ip, r2
 800262a:	4463      	add	r3, ip
 800262c:	26c0      	movs	r6, #192	; 0xc0
 800262e:	00b6      	lsls	r6, r6, #2
 8002630:	599d      	ldr	r5, [r3, r6]
 8002632:	2403      	movs	r4, #3
 8002634:	4020      	ands	r0, r4
 8002636:	00c0      	lsls	r0, r0, #3
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	0014      	movs	r4, r2
 800263c:	4084      	lsls	r4, r0
 800263e:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002640:	0189      	lsls	r1, r1, #6
 8002642:	400a      	ands	r2, r1
 8002644:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002646:	432a      	orrs	r2, r5
 8002648:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800264a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800264c:	b2c0      	uxtb	r0, r0
 800264e:	230f      	movs	r3, #15
 8002650:	4003      	ands	r3, r0
 8002652:	3b08      	subs	r3, #8
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_NVIC_SetPriority+0x64>)
 800265a:	4694      	mov	ip, r2
 800265c:	4463      	add	r3, ip
 800265e:	69dd      	ldr	r5, [r3, #28]
 8002660:	2203      	movs	r2, #3
 8002662:	4010      	ands	r0, r2
 8002664:	00c0      	lsls	r0, r0, #3
 8002666:	24ff      	movs	r4, #255	; 0xff
 8002668:	0022      	movs	r2, r4
 800266a:	4082      	lsls	r2, r0
 800266c:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800266e:	0189      	lsls	r1, r1, #6
 8002670:	400c      	ands	r4, r1
 8002672:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002674:	432c      	orrs	r4, r5
 8002676:	61dc      	str	r4, [r3, #28]
 8002678:	e7e7      	b.n	800264a <HAL_NVIC_SetPriority+0x2e>
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002684:	231f      	movs	r3, #31
 8002686:	4018      	ands	r0, r3
 8002688:	3b1e      	subs	r3, #30
 800268a:	4083      	lsls	r3, r0
 800268c:	4a01      	ldr	r2, [pc, #4]	; (8002694 <HAL_NVIC_EnableIRQ+0x10>)
 800268e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002690:	4770      	bx	lr
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	e000e100 	.word	0xe000e100

08002698 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	1e43      	subs	r3, r0, #1
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 800269c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d80e      	bhi.n	80026c0 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_SYSTICK_Config+0x30>)
 80026a4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026a6:	4809      	ldr	r0, [pc, #36]	; (80026cc <HAL_SYSTICK_Config+0x34>)
 80026a8:	6a03      	ldr	r3, [r0, #32]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	21c0      	movs	r1, #192	; 0xc0
 80026b0:	0609      	lsls	r1, r1, #24
 80026b2:	430b      	orrs	r3, r1
 80026b4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b6:	2300      	movs	r3, #0
 80026b8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	3307      	adds	r3, #7
 80026bc:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026be:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80026c0:	4770      	bx	lr
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	00ffffff 	.word	0x00ffffff
 80026c8:	e000e010 	.word	0xe000e010
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80026d0:	2804      	cmp	r0, #4
 80026d2:	d005      	beq.n	80026e0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	2104      	movs	r1, #4
 80026da:	438b      	bics	r3, r1
 80026dc:	6013      	str	r3, [r2, #0]
  }
}
 80026de:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80026e0:	4a02      	ldr	r2, [pc, #8]	; (80026ec <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	2104      	movs	r1, #4
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e7f8      	b.n	80026de <HAL_SYSTICK_CLKSourceConfig+0xe>
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80026f0:	4770      	bx	lr

080026f2 <HAL_SYSTICK_IRQHandler>:
{
 80026f2:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80026f4:	f7ff fffc 	bl	80026f0 <HAL_SYSTICK_Callback>
}
 80026f8:	bd10      	pop	{r4, pc}
	...

080026fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002700:	d02d      	beq.n	800275e <HAL_DMA_Init+0x62>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002702:	2521      	movs	r5, #33	; 0x21
 8002704:	2302      	movs	r3, #2
 8002706:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002708:	6801      	ldr	r1, [r0, #0]
 800270a:	680b      	ldr	r3, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_DMA_Init+0x68>)
 800270e:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002710:	6843      	ldr	r3, [r0, #4]
 8002712:	6880      	ldr	r0, [r0, #8]
 8002714:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002716:	68e0      	ldr	r0, [r4, #12]
 8002718:	4303      	orrs	r3, r0
 800271a:	6920      	ldr	r0, [r4, #16]
 800271c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271e:	6960      	ldr	r0, [r4, #20]
 8002720:	4303      	orrs	r3, r0
 8002722:	69a0      	ldr	r0, [r4, #24]
 8002724:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002726:	69e0      	ldr	r0, [r4, #28]
 8002728:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800272a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800272c:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <HAL_DMA_Init+0x6c>)
 8002732:	4694      	mov	ip, r2
 8002734:	4463      	add	r3, ip
 8002736:	0018      	movs	r0, r3
 8002738:	2114      	movs	r1, #20
 800273a:	f7fd fce5 	bl	8000108 <__udivsi3>
 800273e:	0080      	lsls	r0, r0, #2
 8002740:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_DMA_Init+0x70>)
 8002744:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800274a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800274c:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800274e:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002750:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002752:	2201      	movs	r2, #1
 8002754:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8002756:	321f      	adds	r2, #31
 8002758:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800275a:	2000      	movs	r0, #0
}  
 800275c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800275e:	2001      	movs	r0, #1
 8002760:	e7fc      	b.n	800275c <HAL_DMA_Init+0x60>
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	ffffc00f 	.word	0xffffc00f
 8002768:	bffdfff8 	.word	0xbffdfff8
 800276c:	40020000 	.word	0x40020000

08002770 <HAL_DMA_Start_IT>:
{
 8002770:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002772:	2420      	movs	r4, #32
 8002774:	5d05      	ldrb	r5, [r0, r4]
 8002776:	3c1e      	subs	r4, #30
 8002778:	2d01      	cmp	r5, #1
 800277a:	d00a      	beq.n	8002792 <HAL_DMA_Start_IT+0x22>
 800277c:	2501      	movs	r5, #1
 800277e:	341e      	adds	r4, #30
 8002780:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002782:	3401      	adds	r4, #1
 8002784:	5d04      	ldrb	r4, [r0, r4]
 8002786:	2c01      	cmp	r4, #1
 8002788:	d005      	beq.n	8002796 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 800278a:	2200      	movs	r2, #0
 800278c:	2320      	movs	r3, #32
 800278e:	54c2      	strb	r2, [r0, r3]
    status = HAL_BUSY;
 8002790:	2402      	movs	r4, #2
} 
 8002792:	0020      	movs	r0, r4
 8002794:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002796:	3501      	adds	r5, #1
 8002798:	3420      	adds	r4, #32
 800279a:	5505      	strb	r5, [r0, r4]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279c:	2400      	movs	r4, #0
 800279e:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027a0:	6806      	ldr	r6, [r0, #0]
 80027a2:	6835      	ldr	r5, [r6, #0]
 80027a4:	3401      	adds	r4, #1
 80027a6:	43a5      	bics	r5, r4
 80027a8:	6035      	str	r5, [r6, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027aa:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80027ac:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80027ae:	40b4      	lsls	r4, r6
 80027b0:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 80027b2:	6804      	ldr	r4, [r0, #0]
 80027b4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b6:	6843      	ldr	r3, [r0, #4]
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d012      	beq.n	80027e2 <HAL_DMA_Start_IT+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80027bc:	6803      	ldr	r3, [r0, #0]
 80027be:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027c0:	6803      	ldr	r3, [r0, #0]
 80027c2:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80027c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d010      	beq.n	80027ec <HAL_DMA_Start_IT+0x7c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027ca:	6802      	ldr	r2, [r0, #0]
 80027cc:	6813      	ldr	r3, [r2, #0]
 80027ce:	210e      	movs	r1, #14
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80027d4:	6802      	ldr	r2, [r0, #0]
 80027d6:	6813      	ldr	r3, [r2, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	430b      	orrs	r3, r1
 80027dc:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80027de:	2400      	movs	r4, #0
 80027e0:	e7d7      	b.n	8002792 <HAL_DMA_Start_IT+0x22>
    hdma->Instance->CPAR = DstAddress;
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80027e6:	6803      	ldr	r3, [r0, #0]
 80027e8:	60d9      	str	r1, [r3, #12]
 80027ea:	e7eb      	b.n	80027c4 <HAL_DMA_Start_IT+0x54>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80027ec:	6802      	ldr	r2, [r0, #0]
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	210a      	movs	r1, #10
 80027f2:	430b      	orrs	r3, r1
 80027f4:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80027f6:	6802      	ldr	r2, [r0, #0]
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	3906      	subs	r1, #6
 80027fc:	438b      	bics	r3, r1
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	e7e8      	b.n	80027d4 <HAL_DMA_Start_IT+0x64>

08002802 <HAL_DMA_IRQHandler>:
{
 8002802:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002804:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002806:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002808:	6804      	ldr	r4, [r0, #0]
 800280a:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800280c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800280e:	2304      	movs	r3, #4
 8002810:	408b      	lsls	r3, r1
 8002812:	421a      	tst	r2, r3
 8002814:	d012      	beq.n	800283c <HAL_DMA_IRQHandler+0x3a>
 8002816:	076b      	lsls	r3, r5, #29
 8002818:	d510      	bpl.n	800283c <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	069b      	lsls	r3, r3, #26
 800281e:	d403      	bmi.n	8002828 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	2204      	movs	r2, #4
 8002824:	4393      	bics	r3, r2
 8002826:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002828:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800282a:	2304      	movs	r3, #4
 800282c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800282e:	408b      	lsls	r3, r1
 8002830:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002832:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d000      	beq.n	800283a <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8002838:	4798      	blx	r3
}  
 800283a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800283c:	2302      	movs	r3, #2
 800283e:	408b      	lsls	r3, r1
 8002840:	421a      	tst	r2, r3
 8002842:	d018      	beq.n	8002876 <HAL_DMA_IRQHandler+0x74>
 8002844:	07ab      	lsls	r3, r5, #30
 8002846:	d516      	bpl.n	8002876 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	069b      	lsls	r3, r3, #26
 800284c:	d406      	bmi.n	800285c <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	220a      	movs	r2, #10
 8002852:	4393      	bics	r3, r2
 8002854:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002856:	3a09      	subs	r2, #9
 8002858:	2321      	movs	r3, #33	; 0x21
 800285a:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800285c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800285e:	2302      	movs	r3, #2
 8002860:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002862:	408b      	lsls	r3, r1
 8002864:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002866:	2200      	movs	r2, #0
 8002868:	2320      	movs	r3, #32
 800286a:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 800286c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0e3      	beq.n	800283a <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8002872:	4798      	blx	r3
 8002874:	e7e1      	b.n	800283a <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002876:	2308      	movs	r3, #8
 8002878:	408b      	lsls	r3, r1
 800287a:	421a      	tst	r2, r3
 800287c:	d0dd      	beq.n	800283a <HAL_DMA_IRQHandler+0x38>
 800287e:	072b      	lsls	r3, r5, #28
 8002880:	d5db      	bpl.n	800283a <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	220e      	movs	r2, #14
 8002886:	4393      	bics	r3, r2
 8002888:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800288a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800288c:	2301      	movs	r3, #1
 800288e:	0019      	movs	r1, r3
 8002890:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002892:	40a1      	lsls	r1, r4
 8002894:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002896:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002898:	2221      	movs	r2, #33	; 0x21
 800289a:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 800289c:	2200      	movs	r2, #0
 800289e:	331f      	adds	r3, #31
 80028a0:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80028a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0c8      	beq.n	800283a <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 80028a8:	4798      	blx	r3
}  
 80028aa:	e7c6      	b.n	800283a <HAL_DMA_IRQHandler+0x38>

080028ac <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <FLASH_SetErrorCode+0x34>)
 80028ae:	68da      	ldr	r2, [r3, #12]
  uint32_t flags = 0U;
 80028b0:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80028b2:	06d2      	lsls	r2, r2, #27
 80028b4:	d505      	bpl.n	80028c2 <FLASH_SetErrorCode+0x16>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <FLASH_SetErrorCode+0x38>)
 80028b8:	69d3      	ldr	r3, [r2, #28]
 80028ba:	2102      	movs	r1, #2
 80028bc:	430b      	orrs	r3, r1
 80028be:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80028c0:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <FLASH_SetErrorCode+0x34>)
 80028c4:	68d2      	ldr	r2, [r2, #12]
 80028c6:	0752      	lsls	r2, r2, #29
 80028c8:	d506      	bpl.n	80028d8 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80028ca:	4906      	ldr	r1, [pc, #24]	; (80028e4 <FLASH_SetErrorCode+0x38>)
 80028cc:	69ca      	ldr	r2, [r1, #28]
 80028ce:	2001      	movs	r0, #1
 80028d0:	4302      	orrs	r2, r0
 80028d2:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 80028d4:	2204      	movs	r2, #4
 80028d6:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80028d8:	4a01      	ldr	r2, [pc, #4]	; (80028e0 <FLASH_SetErrorCode+0x34>)
 80028da:	60d3      	str	r3, [r2, #12]
}  
 80028dc:	4770      	bx	lr
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40022000 	.word	0x40022000
 80028e4:	20000080 	.word	0x20000080

080028e8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_FLASH_Unlock+0x18>)
 80028ea:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80028ee:	061b      	lsls	r3, r3, #24
 80028f0:	d505      	bpl.n	80028fe <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028f2:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_FLASH_Unlock+0x18>)
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_FLASH_Unlock+0x1c>)
 80028f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80028f8:	4a03      	ldr	r2, [pc, #12]	; (8002908 <HAL_FLASH_Unlock+0x20>)
 80028fa:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80028fc:	2000      	movs	r0, #0
}
 80028fe:	4770      	bx	lr
 8002900:	40022000 	.word	0x40022000
 8002904:	45670123 	.word	0x45670123
 8002908:	cdef89ab 	.word	0xcdef89ab

0800290c <FLASH_WaitForLastOperation>:
{
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff fc3c 	bl	800218c <HAL_GetTick>
 8002914:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002916:	4e13      	ldr	r6, [pc, #76]	; (8002964 <FLASH_WaitForLastOperation+0x58>)
 8002918:	2501      	movs	r5, #1
 800291a:	68f3      	ldr	r3, [r6, #12]
 800291c:	421d      	tst	r5, r3
 800291e:	d00a      	beq.n	8002936 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8002920:	1c63      	adds	r3, r4, #1
 8002922:	d0fa      	beq.n	800291a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002924:	2c00      	cmp	r4, #0
 8002926:	d01a      	beq.n	800295e <FLASH_WaitForLastOperation+0x52>
 8002928:	f7ff fc30 	bl	800218c <HAL_GetTick>
 800292c:	1bc0      	subs	r0, r0, r7
 800292e:	4284      	cmp	r4, r0
 8002930:	d2f3      	bcs.n	800291a <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8002932:	2003      	movs	r0, #3
 8002934:	e012      	b.n	800295c <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <FLASH_WaitForLastOperation+0x58>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	069b      	lsls	r3, r3, #26
 800293c:	d502      	bpl.n	8002944 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800293e:	2220      	movs	r2, #32
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <FLASH_WaitForLastOperation+0x58>)
 8002942:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <FLASH_WaitForLastOperation+0x58>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	06db      	lsls	r3, r3, #27
 800294a:	d404      	bmi.n	8002956 <FLASH_WaitForLastOperation+0x4a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <FLASH_WaitForLastOperation+0x58>)
 800294e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8002950:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002952:	075b      	lsls	r3, r3, #29
 8002954:	d502      	bpl.n	800295c <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8002956:	f7ff ffa9 	bl	80028ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 800295a:	2001      	movs	r0, #1
}
 800295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800295e:	2003      	movs	r0, #3
 8002960:	e7fc      	b.n	800295c <FLASH_WaitForLastOperation+0x50>
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	40022000 	.word	0x40022000

08002968 <HAL_FLASH_Program>:
{
 8002968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296a:	46de      	mov	lr, fp
 800296c:	4657      	mov	r7, sl
 800296e:	464e      	mov	r6, r9
 8002970:	4645      	mov	r5, r8
 8002972:	b5e0      	push	{r5, r6, r7, lr}
 8002974:	b083      	sub	sp, #12
 8002976:	0004      	movs	r4, r0
 8002978:	000e      	movs	r6, r1
 800297a:	9201      	str	r2, [sp, #4]
 800297c:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_FLASH_Program+0xbc>)
 8002980:	7e1b      	ldrb	r3, [r3, #24]
 8002982:	2002      	movs	r0, #2
 8002984:	2b01      	cmp	r3, #1
 8002986:	d106      	bne.n	8002996 <HAL_FLASH_Program+0x2e>
}
 8002988:	b003      	add	sp, #12
 800298a:	bc3c      	pop	{r2, r3, r4, r5}
 800298c:	4690      	mov	r8, r2
 800298e:	4699      	mov	r9, r3
 8002990:	46a2      	mov	sl, r4
 8002992:	46ab      	mov	fp, r5
 8002994:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8002996:	2201      	movs	r2, #1
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_FLASH_Program+0xbc>)
 800299a:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800299c:	4822      	ldr	r0, [pc, #136]	; (8002a28 <HAL_FLASH_Program+0xc0>)
 800299e:	f7ff ffb5 	bl	800290c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d133      	bne.n	8002a0e <HAL_FLASH_Program+0xa6>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80029a6:	2c01      	cmp	r4, #1
 80029a8:	d035      	beq.n	8002a16 <HAL_FLASH_Program+0xae>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80029aa:	2c02      	cmp	r4, #2
 80029ac:	d036      	beq.n	8002a1c <HAL_FLASH_Program+0xb4>
      nbiterations = 4U;
 80029ae:	2304      	movs	r3, #4
 80029b0:	469b      	mov	fp, r3
{
 80029b2:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_FLASH_Program+0xbc>)
 80029b6:	469a      	mov	sl, r3
 80029b8:	2300      	movs	r3, #0
 80029ba:	4699      	mov	r9, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029bc:	4c1b      	ldr	r4, [pc, #108]	; (8002a2c <HAL_FLASH_Program+0xc4>)
 80029be:	e01e      	b.n	80029fe <HAL_FLASH_Program+0x96>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80029c0:	2220      	movs	r2, #32
 80029c2:	1ad2      	subs	r2, r2, r3
 80029c4:	4641      	mov	r1, r8
 80029c6:	4091      	lsls	r1, r2
 80029c8:	000a      	movs	r2, r1
 80029ca:	9901      	ldr	r1, [sp, #4]
 80029cc:	40d9      	lsrs	r1, r3
 80029ce:	000b      	movs	r3, r1
 80029d0:	4313      	orrs	r3, r2
 80029d2:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029d4:	4652      	mov	r2, sl
 80029d6:	4649      	mov	r1, r9
 80029d8:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029da:	6922      	ldr	r2, [r4, #16]
 80029dc:	2701      	movs	r7, #1
 80029de:	433a      	orrs	r2, r7
 80029e0:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 80029e2:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80029e4:	4810      	ldr	r0, [pc, #64]	; (8002a28 <HAL_FLASH_Program+0xc0>)
 80029e6:	f7ff ff91 	bl	800290c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80029ea:	6923      	ldr	r3, [r4, #16]
 80029ec:	43bb      	bics	r3, r7
 80029ee:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d10c      	bne.n	8002a0e <HAL_FLASH_Program+0xa6>
 80029f4:	3501      	adds	r5, #1
 80029f6:	3602      	adds	r6, #2
    for (index = 0U; index < nbiterations; index++)
 80029f8:	b2eb      	uxtb	r3, r5
 80029fa:	459b      	cmp	fp, r3
 80029fc:	d907      	bls.n	8002a0e <HAL_FLASH_Program+0xa6>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80029fe:	012b      	lsls	r3, r5, #4
 8002a00:	2220      	movs	r2, #32
 8002a02:	4252      	negs	r2, r2
 8002a04:	189a      	adds	r2, r3, r2
 8002a06:	d4db      	bmi.n	80029c0 <HAL_FLASH_Program+0x58>
 8002a08:	4643      	mov	r3, r8
 8002a0a:	40d3      	lsrs	r3, r2
 8002a0c:	e7e1      	b.n	80029d2 <HAL_FLASH_Program+0x6a>
  __HAL_UNLOCK(&pFlash);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_FLASH_Program+0xbc>)
 8002a12:	761a      	strb	r2, [r3, #24]
  return status;
 8002a14:	e7b8      	b.n	8002988 <HAL_FLASH_Program+0x20>
      nbiterations = 1U;
 8002a16:	2301      	movs	r3, #1
 8002a18:	469b      	mov	fp, r3
 8002a1a:	e7ca      	b.n	80029b2 <HAL_FLASH_Program+0x4a>
      nbiterations = 2U;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	469b      	mov	fp, r3
 8002a20:	e7c7      	b.n	80029b2 <HAL_FLASH_Program+0x4a>
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	20000080 	.word	0x20000080
 8002a28:	0000c350 	.word	0x0000c350
 8002a2c:	40022000 	.word	0x40022000

08002a30 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a30:	2200      	movs	r2, #0
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <FLASH_MassErase+0x1c>)
 8002a34:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <FLASH_MassErase+0x20>)
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	313c      	adds	r1, #60	; 0x3c
 8002a44:	430a      	orrs	r2, r1
 8002a46:	611a      	str	r2, [r3, #16]
}
 8002a48:	4770      	bx	lr
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	20000080 	.word	0x20000080
 8002a50:	40022000 	.word	0x40022000

08002a54 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a54:	2200      	movs	r2, #0
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <FLASH_PageErase+0x1c>)
 8002a58:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <FLASH_PageErase+0x20>)
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	2102      	movs	r1, #2
 8002a60:	430a      	orrs	r2, r1
 8002a62:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a64:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	313e      	adds	r1, #62	; 0x3e
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	611a      	str	r2, [r3, #16]
}
 8002a6e:	4770      	bx	lr
 8002a70:	20000080 	.word	0x20000080
 8002a74:	40022000 	.word	0x40022000

08002a78 <HAL_FLASHEx_Erase>:
{
 8002a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7a:	46c6      	mov	lr, r8
 8002a7c:	b500      	push	{lr}
 8002a7e:	0006      	movs	r6, r0
 8002a80:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002a82:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_FLASHEx_Erase+0xac>)
 8002a84:	7e1b      	ldrb	r3, [r3, #24]
 8002a86:	2002      	movs	r0, #2
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d038      	beq.n	8002afe <HAL_FLASHEx_Erase+0x86>
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <HAL_FLASHEx_Erase+0xac>)
 8002a90:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a92:	6833      	ldr	r3, [r6, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d028      	beq.n	8002aea <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002a98:	4823      	ldr	r0, [pc, #140]	; (8002b28 <HAL_FLASHEx_Erase+0xb0>)
 8002a9a:	f7ff ff37 	bl	800290c <FLASH_WaitForLastOperation>
 8002a9e:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002aa0:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d128      	bne.n	8002af8 <HAL_FLASHEx_Erase+0x80>
        *PageError = 0xFFFFFFFFU;
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8002aac:	6874      	ldr	r4, [r6, #4]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002aae:	68b3      	ldr	r3, [r6, #8]
 8002ab0:	029b      	lsls	r3, r3, #10
 8002ab2:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8002ab4:	429c      	cmp	r4, r3
 8002ab6:	d233      	bcs.n	8002b20 <HAL_FLASHEx_Erase+0xa8>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ab8:	4f1c      	ldr	r7, [pc, #112]	; (8002b2c <HAL_FLASHEx_Erase+0xb4>)
 8002aba:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8002abc:	0020      	movs	r0, r4
 8002abe:	f7ff ffc9 	bl	8002a54 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ac2:	4819      	ldr	r0, [pc, #100]	; (8002b28 <HAL_FLASHEx_Erase+0xb0>)
 8002ac4:	f7ff ff22 	bl	800290c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43ab      	bics	r3, r5
 8002acc:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d123      	bne.n	8002b1a <HAL_FLASHEx_Erase+0xa2>
            address += FLASH_PAGE_SIZE)
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	469c      	mov	ip, r3
 8002ad8:	4464      	add	r4, ip
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002ada:	68b3      	ldr	r3, [r6, #8]
 8002adc:	029b      	lsls	r3, r3, #10
 8002ade:	6872      	ldr	r2, [r6, #4]
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8002ae4:	42a3      	cmp	r3, r4
 8002ae6:	d8e9      	bhi.n	8002abc <HAL_FLASHEx_Erase+0x44>
 8002ae8:	e006      	b.n	8002af8 <HAL_FLASHEx_Erase+0x80>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002aea:	480f      	ldr	r0, [pc, #60]	; (8002b28 <HAL_FLASHEx_Erase+0xb0>)
 8002aec:	f7ff ff0e 	bl	800290c <FLASH_WaitForLastOperation>
 8002af0:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002af2:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8002af8:	2200      	movs	r2, #0
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_FLASHEx_Erase+0xac>)
 8002afc:	761a      	strb	r2, [r3, #24]
}
 8002afe:	bc04      	pop	{r2}
 8002b00:	4690      	mov	r8, r2
 8002b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8002b04:	f7ff ff94 	bl	8002a30 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b08:	4807      	ldr	r0, [pc, #28]	; (8002b28 <HAL_FLASHEx_Erase+0xb0>)
 8002b0a:	f7ff feff 	bl	800290c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_FLASHEx_Erase+0xb4>)
 8002b10:	6913      	ldr	r3, [r2, #16]
 8002b12:	2104      	movs	r1, #4
 8002b14:	438b      	bics	r3, r1
 8002b16:	6113      	str	r3, [r2, #16]
 8002b18:	e7ee      	b.n	8002af8 <HAL_FLASHEx_Erase+0x80>
            *PageError = address;
 8002b1a:	4643      	mov	r3, r8
 8002b1c:	601c      	str	r4, [r3, #0]
            break;
 8002b1e:	e7eb      	b.n	8002af8 <HAL_FLASHEx_Erase+0x80>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
 8002b22:	e7e9      	b.n	8002af8 <HAL_FLASHEx_Erase+0x80>
 8002b24:	20000080 	.word	0x20000080
 8002b28:	0000c350 	.word	0x0000c350
 8002b2c:	40022000 	.word	0x40022000

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b32:	46de      	mov	lr, fp
 8002b34:	4657      	mov	r7, sl
 8002b36:	464e      	mov	r6, r9
 8002b38:	4645      	mov	r5, r8
 8002b3a:	b5e0      	push	{r5, r6, r7, lr}
 8002b3c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002b3e:	680a      	ldr	r2, [r1, #0]
 8002b40:	2a00      	cmp	r2, #0
 8002b42:	d100      	bne.n	8002b46 <HAL_GPIO_Init+0x16>
 8002b44:	e0b6      	b.n	8002cb4 <HAL_GPIO_Init+0x184>
 8002b46:	2500      	movs	r5, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4699      	mov	r9, r3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	469a      	mov	sl, r3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b50:	4b5c      	ldr	r3, [pc, #368]	; (8002cc4 <HAL_GPIO_Init+0x194>)
 8002b52:	469b      	mov	fp, r3
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b54:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <HAL_GPIO_Init+0x198>)
 8002b56:	4698      	mov	r8, r3
 8002b58:	e03c      	b.n	8002bd4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8002b5a:	08ec      	lsrs	r4, r5, #3
 8002b5c:	00a4      	lsls	r4, r4, #2
 8002b5e:	1904      	adds	r4, r0, r4
 8002b60:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002b62:	3305      	adds	r3, #5
 8002b64:	402b      	ands	r3, r5
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002b6e:	690a      	ldr	r2, [r1, #16]
 8002b70:	409a      	lsls	r2, r3
 8002b72:	0013      	movs	r3, r2
 8002b74:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002b76:	6223      	str	r3, [r4, #32]
 8002b78:	e036      	b.n	8002be8 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->OSPEEDR; 
 8002b7a:	6883      	ldr	r3, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b7c:	4023      	ands	r3, r4
 8002b7e:	469c      	mov	ip, r3
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002b80:	68cb      	ldr	r3, [r1, #12]
 8002b82:	40bb      	lsls	r3, r7
 8002b84:	4662      	mov	r2, ip
 8002b86:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8002b88:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8002b8a:	6843      	ldr	r3, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002b8c:	43b3      	bics	r3, r6
 8002b8e:	001e      	movs	r6, r3
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b90:	684b      	ldr	r3, [r1, #4]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	464a      	mov	r2, r9
 8002b96:	4013      	ands	r3, r2
 8002b98:	40ab      	lsls	r3, r5
 8002b9a:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8002b9c:	6043      	str	r3, [r0, #4]
 8002b9e:	e037      	b.n	8002c10 <HAL_GPIO_Init+0xe0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ba0:	2400      	movs	r4, #0
 8002ba2:	e066      	b.n	8002c72 <HAL_GPIO_Init+0x142>
 8002ba4:	464c      	mov	r4, r9
 8002ba6:	e064      	b.n	8002c72 <HAL_GPIO_Init+0x142>
 8002ba8:	2402      	movs	r4, #2
 8002baa:	e062      	b.n	8002c72 <HAL_GPIO_Init+0x142>
 8002bac:	4654      	mov	r4, sl
 8002bae:	e060      	b.n	8002c72 <HAL_GPIO_Init+0x142>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(temp, iocurrent); 
 8002bb0:	9a01      	ldr	r2, [sp, #4]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	e068      	b.n	8002c88 <HAL_GPIO_Init+0x158>

        temp = EXTI->EMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          SET_BIT(temp, iocurrent); 
 8002bb6:	9a01      	ldr	r2, [sp, #4]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	e06c      	b.n	8002c96 <HAL_GPIO_Init+0x166>
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
 8002bbc:	9a01      	ldr	r2, [sp, #4]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	e070      	b.n	8002ca4 <HAL_GPIO_Init+0x174>

        temp = EXTI->FTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
 8002bc2:	9a01      	ldr	r2, [sp, #4]
 8002bc4:	4313      	orrs	r3, r2
        }
        EXTI->FTSR = temp;
 8002bc6:	4642      	mov	r2, r8
 8002bc8:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002bca:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002bcc:	680a      	ldr	r2, [r1, #0]
 8002bce:	0013      	movs	r3, r2
 8002bd0:	40eb      	lsrs	r3, r5
 8002bd2:	d06f      	beq.n	8002cb4 <HAL_GPIO_Init+0x184>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002bd4:	464e      	mov	r6, r9
 8002bd6:	40ae      	lsls	r6, r5
 8002bd8:	4032      	ands	r2, r6
 8002bda:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8002bdc:	d0f5      	beq.n	8002bca <HAL_GPIO_Init+0x9a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002bde:	684b      	ldr	r3, [r1, #4]
 8002be0:	2410      	movs	r4, #16
 8002be2:	43a3      	bics	r3, r4
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d0b8      	beq.n	8002b5a <HAL_GPIO_Init+0x2a>
      temp = GPIOx->MODER;
 8002be8:	6803      	ldr	r3, [r0, #0]
 8002bea:	006f      	lsls	r7, r5, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002bec:	4654      	mov	r4, sl
 8002bee:	40bc      	lsls	r4, r7
 8002bf0:	43e4      	mvns	r4, r4
 8002bf2:	4023      	ands	r3, r4
 8002bf4:	469c      	mov	ip, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf6:	684b      	ldr	r3, [r1, #4]
 8002bf8:	4652      	mov	r2, sl
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	40bb      	lsls	r3, r7
 8002bfe:	4662      	mov	r2, ip
 8002c00:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8002c02:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c04:	684b      	ldr	r3, [r1, #4]
 8002c06:	2210      	movs	r2, #16
 8002c08:	4393      	bics	r3, r2
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d9b4      	bls.n	8002b7a <HAL_GPIO_Init+0x4a>
      temp = GPIOx->PUPDR;
 8002c10:	68c3      	ldr	r3, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c12:	4023      	ands	r3, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002c14:	688c      	ldr	r4, [r1, #8]
 8002c16:	40bc      	lsls	r4, r7
 8002c18:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 8002c1a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c1c:	684b      	ldr	r3, [r1, #4]
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	0552      	lsls	r2, r2, #21
 8002c22:	4213      	tst	r3, r2
 8002c24:	d0d1      	beq.n	8002bca <HAL_GPIO_Init+0x9a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	465b      	mov	r3, fp
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	464a      	mov	r2, r9
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	465a      	mov	r2, fp
 8002c30:	6193      	str	r3, [r2, #24]
 8002c32:	6993      	ldr	r3, [r2, #24]
 8002c34:	464a      	mov	r2, r9
 8002c36:	4013      	ands	r3, r2
 8002c38:	9303      	str	r3, [sp, #12]
 8002c3a:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8002c3c:	08ab      	lsrs	r3, r5, #2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <HAL_GPIO_Init+0x19c>)
 8002c42:	4694      	mov	ip, r2
 8002c44:	4463      	add	r3, ip
 8002c46:	689c      	ldr	r4, [r3, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002c48:	4657      	mov	r7, sl
 8002c4a:	402f      	ands	r7, r5
 8002c4c:	00bf      	lsls	r7, r7, #2
 8002c4e:	260f      	movs	r6, #15
 8002c50:	40be      	lsls	r6, r7
 8002c52:	43b4      	bics	r4, r6
 8002c54:	0026      	movs	r6, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c56:	2290      	movs	r2, #144	; 0x90
 8002c58:	05d2      	lsls	r2, r2, #23
 8002c5a:	4290      	cmp	r0, r2
 8002c5c:	d0a0      	beq.n	8002ba0 <HAL_GPIO_Init+0x70>
 8002c5e:	4c1c      	ldr	r4, [pc, #112]	; (8002cd0 <HAL_GPIO_Init+0x1a0>)
 8002c60:	42a0      	cmp	r0, r4
 8002c62:	d09f      	beq.n	8002ba4 <HAL_GPIO_Init+0x74>
 8002c64:	4c1b      	ldr	r4, [pc, #108]	; (8002cd4 <HAL_GPIO_Init+0x1a4>)
 8002c66:	42a0      	cmp	r0, r4
 8002c68:	d09e      	beq.n	8002ba8 <HAL_GPIO_Init+0x78>
 8002c6a:	4c1b      	ldr	r4, [pc, #108]	; (8002cd8 <HAL_GPIO_Init+0x1a8>)
 8002c6c:	42a0      	cmp	r0, r4
 8002c6e:	d09d      	beq.n	8002bac <HAL_GPIO_Init+0x7c>
 8002c70:	2405      	movs	r4, #5
 8002c72:	40bc      	lsls	r4, r7
 8002c74:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c76:	609c      	str	r4, [r3, #8]
        temp = EXTI->IMR;
 8002c78:	4643      	mov	r3, r8
 8002c7a:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c7c:	9a01      	ldr	r2, [sp, #4]
 8002c7e:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c80:	684a      	ldr	r2, [r1, #4]
 8002c82:	03d2      	lsls	r2, r2, #15
 8002c84:	d494      	bmi.n	8002bb0 <HAL_GPIO_Init+0x80>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c86:	4023      	ands	r3, r4
        EXTI->IMR = temp;
 8002c88:	4642      	mov	r2, r8
 8002c8a:	6013      	str	r3, [r2, #0]
        temp = EXTI->EMR;
 8002c8c:	6853      	ldr	r3, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c8e:	684a      	ldr	r2, [r1, #4]
 8002c90:	0392      	lsls	r2, r2, #14
 8002c92:	d490      	bmi.n	8002bb6 <HAL_GPIO_Init+0x86>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002c94:	4023      	ands	r3, r4
        EXTI->EMR = temp;
 8002c96:	4642      	mov	r2, r8
 8002c98:	6053      	str	r3, [r2, #4]
        temp = EXTI->RTSR;
 8002c9a:	6893      	ldr	r3, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c9c:	684a      	ldr	r2, [r1, #4]
 8002c9e:	02d2      	lsls	r2, r2, #11
 8002ca0:	d48c      	bmi.n	8002bbc <HAL_GPIO_Init+0x8c>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002ca2:	4023      	ands	r3, r4
        EXTI->RTSR = temp;
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	6093      	str	r3, [r2, #8]
        temp = EXTI->FTSR;
 8002ca8:	68d3      	ldr	r3, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002caa:	684a      	ldr	r2, [r1, #4]
 8002cac:	0292      	lsls	r2, r2, #10
 8002cae:	d488      	bmi.n	8002bc2 <HAL_GPIO_Init+0x92>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002cb0:	4023      	ands	r3, r4
 8002cb2:	e788      	b.n	8002bc6 <HAL_GPIO_Init+0x96>
  } 
}
 8002cb4:	b005      	add	sp, #20
 8002cb6:	bc3c      	pop	{r2, r3, r4, r5}
 8002cb8:	4690      	mov	r8, r2
 8002cba:	4699      	mov	r9, r3
 8002cbc:	46a2      	mov	sl, r4
 8002cbe:	46ab      	mov	fp, r5
 8002cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010400 	.word	0x40010400
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	48000400 	.word	0x48000400
 8002cd4:	48000800 	.word	0x48000800
 8002cd8:	48000c00 	.word	0x48000c00

08002cdc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cdc:	6900      	ldr	r0, [r0, #16]
 8002cde:	4008      	ands	r0, r1
 8002ce0:	1e41      	subs	r1, r0, #1
 8002ce2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002ce4:	b2c0      	uxtb	r0, r0
  }
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cec:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002cee:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cf0:	6181      	str	r1, [r0, #24]
 8002cf2:	e7fc      	b.n	8002cee <HAL_GPIO_WritePin+0x6>

08002cf4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002cf4:	6943      	ldr	r3, [r0, #20]
 8002cf6:	4059      	eors	r1, r3
 8002cf8:	6141      	str	r1, [r0, #20]
}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfe:	46ce      	mov	lr, r9
 8002d00:	4647      	mov	r7, r8
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b083      	sub	sp, #12
 8002d06:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d08:	6803      	ldr	r3, [r0, #0]
 8002d0a:	07db      	lsls	r3, r3, #31
 8002d0c:	d539      	bpl.n	8002d82 <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d0e:	4bb8      	ldr	r3, [pc, #736]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	230c      	movs	r3, #12
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d02a      	beq.n	8002d70 <HAL_RCC_OscConfig+0x74>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d1a:	4bb5      	ldr	r3, [pc, #724]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	230c      	movs	r3, #12
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d020      	beq.n	8002d68 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d26:	6863      	ldr	r3, [r4, #4]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d050      	beq.n	8002dce <HAL_RCC_OscConfig+0xd2>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d155      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe0>
 8002d30:	4baf      	ldr	r3, [pc, #700]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	49af      	ldr	r1, [pc, #700]	; (8002ff4 <HAL_RCC_OscConfig+0x2f8>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	49ae      	ldr	r1, [pc, #696]	; (8002ff8 <HAL_RCC_OscConfig+0x2fc>)
 8002d3e:	400a      	ands	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d42:	6863      	ldr	r3, [r4, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d061      	beq.n	8002e0c <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7ff fa20 	bl	800218c <HAL_GetTick>
 8002d4c:	0007      	movs	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4ea8      	ldr	r6, [pc, #672]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002d50:	2580      	movs	r5, #128	; 0x80
 8002d52:	02ad      	lsls	r5, r5, #10
 8002d54:	6833      	ldr	r3, [r6, #0]
 8002d56:	422b      	tst	r3, r5
 8002d58:	d113      	bne.n	8002d82 <HAL_RCC_OscConfig+0x86>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5a:	f7ff fa17 	bl	800218c <HAL_GetTick>
 8002d5e:	1bc0      	subs	r0, r0, r7
 8002d60:	2864      	cmp	r0, #100	; 0x64
 8002d62:	d9f7      	bls.n	8002d54 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002d64:	2003      	movs	r0, #3
 8002d66:	e08e      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d68:	4ba1      	ldr	r3, [pc, #644]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	03db      	lsls	r3, r3, #15
 8002d6e:	d5da      	bpl.n	8002d26 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4b9f      	ldr	r3, [pc, #636]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	039b      	lsls	r3, r3, #14
 8002d76:	d504      	bpl.n	8002d82 <HAL_RCC_OscConfig+0x86>
        return HAL_ERROR;
 8002d78:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d100      	bne.n	8002d82 <HAL_RCC_OscConfig+0x86>
 8002d80:	e081      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	079b      	lsls	r3, r3, #30
 8002d86:	d565      	bpl.n	8002e54 <HAL_RCC_OscConfig+0x158>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d88:	4b99      	ldr	r3, [pc, #612]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	220c      	movs	r2, #12
 8002d8e:	421a      	tst	r2, r3
 8002d90:	d050      	beq.n	8002e34 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d92:	4b97      	ldr	r3, [pc, #604]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	230c      	movs	r3, #12
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d046      	beq.n	8002e2c <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9e:	68e3      	ldr	r3, [r4, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d100      	bne.n	8002da6 <HAL_RCC_OscConfig+0xaa>
 8002da4:	e07d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1a6>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da6:	4a92      	ldr	r2, [pc, #584]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002da8:	6813      	ldr	r3, [r2, #0]
 8002daa:	2101      	movs	r1, #1
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff f9ec 	bl	800218c <HAL_GetTick>
 8002db4:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	4e8e      	ldr	r6, [pc, #568]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002db8:	2502      	movs	r5, #2
 8002dba:	6833      	ldr	r3, [r6, #0]
 8002dbc:	421d      	tst	r5, r3
 8002dbe:	d167      	bne.n	8002e90 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7ff f9e4 	bl	800218c <HAL_GetTick>
 8002dc4:	1bc0      	subs	r0, r0, r7
 8002dc6:	2802      	cmp	r0, #2
 8002dc8:	d9f7      	bls.n	8002dba <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 8002dca:	2003      	movs	r0, #3
 8002dcc:	e05b      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dce:	4a88      	ldr	r2, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002dd0:	6811      	ldr	r1, [r2, #0]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	025b      	lsls	r3, r3, #9
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e7b2      	b.n	8002d42 <HAL_RCC_OscConfig+0x46>
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d009      	beq.n	8002df4 <HAL_RCC_OscConfig+0xf8>
 8002de0:	4b83      	ldr	r3, [pc, #524]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4983      	ldr	r1, [pc, #524]	; (8002ff4 <HAL_RCC_OscConfig+0x2f8>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4982      	ldr	r1, [pc, #520]	; (8002ff8 <HAL_RCC_OscConfig+0x2fc>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e7a6      	b.n	8002d42 <HAL_RCC_OscConfig+0x46>
 8002df4:	4b7e      	ldr	r3, [pc, #504]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	02d2      	lsls	r2, r2, #11
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	0252      	lsls	r2, r2, #9
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e79a      	b.n	8002d42 <HAL_RCC_OscConfig+0x46>
        tickstart = HAL_GetTick();
 8002e0c:	f7ff f9be 	bl	800218c <HAL_GetTick>
 8002e10:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	4e77      	ldr	r6, [pc, #476]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002e14:	2580      	movs	r5, #128	; 0x80
 8002e16:	02ad      	lsls	r5, r5, #10
 8002e18:	6833      	ldr	r3, [r6, #0]
 8002e1a:	422b      	tst	r3, r5
 8002e1c:	d0b1      	beq.n	8002d82 <HAL_RCC_OscConfig+0x86>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1e:	f7ff f9b5 	bl	800218c <HAL_GetTick>
 8002e22:	1bc0      	subs	r0, r0, r7
 8002e24:	2864      	cmp	r0, #100	; 0x64
 8002e26:	d9f7      	bls.n	8002e18 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002e28:	2003      	movs	r0, #3
 8002e2a:	e02c      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e2c:	4b70      	ldr	r3, [pc, #448]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	03db      	lsls	r3, r3, #15
 8002e32:	d4b4      	bmi.n	8002d9e <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e34:	4b6e      	ldr	r3, [pc, #440]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	079b      	lsls	r3, r3, #30
 8002e3a:	d503      	bpl.n	8002e44 <HAL_RCC_OscConfig+0x148>
        return HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	68e3      	ldr	r3, [r4, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d120      	bne.n	8002e86 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	496a      	ldr	r1, [pc, #424]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002e46:	680a      	ldr	r2, [r1, #0]
 8002e48:	6923      	ldr	r3, [r4, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	20f8      	movs	r0, #248	; 0xf8
 8002e4e:	4382      	bics	r2, r0
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	071b      	lsls	r3, r3, #28
 8002e58:	d54b      	bpl.n	8002ef2 <HAL_RCC_OscConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5a:	69e3      	ldr	r3, [r4, #28]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d034      	beq.n	8002eca <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e60:	4a63      	ldr	r2, [pc, #396]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002e62:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002e64:	2101      	movs	r1, #1
 8002e66:	430b      	orrs	r3, r1
 8002e68:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7ff f98f 	bl	800218c <HAL_GetTick>
 8002e6e:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e70:	4e5f      	ldr	r6, [pc, #380]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002e72:	2502      	movs	r5, #2
 8002e74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e76:	421d      	tst	r5, r3
 8002e78:	d13b      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x1f6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e7a:	f7ff f987 	bl	800218c <HAL_GetTick>
 8002e7e:	1bc0      	subs	r0, r0, r7
 8002e80:	2802      	cmp	r0, #2
 8002e82:	d9f7      	bls.n	8002e74 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8002e84:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8002e86:	b003      	add	sp, #12
 8002e88:	bc0c      	pop	{r2, r3}
 8002e8a:	4690      	mov	r8, r2
 8002e8c:	4699      	mov	r9, r3
 8002e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4957      	ldr	r1, [pc, #348]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002e92:	680a      	ldr	r2, [r1, #0]
 8002e94:	6923      	ldr	r3, [r4, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	20f8      	movs	r0, #248	; 0xf8
 8002e9a:	4382      	bics	r2, r0
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e7d8      	b.n	8002e54 <HAL_RCC_OscConfig+0x158>
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4a53      	ldr	r2, [pc, #332]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002ea4:	6813      	ldr	r3, [r2, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	438b      	bics	r3, r1
 8002eaa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002eac:	f7ff f96e 	bl	800218c <HAL_GetTick>
 8002eb0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	4e4f      	ldr	r6, [pc, #316]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002eb4:	2502      	movs	r5, #2
 8002eb6:	6833      	ldr	r3, [r6, #0]
 8002eb8:	421d      	tst	r5, r3
 8002eba:	d0cb      	beq.n	8002e54 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7ff f966 	bl	800218c <HAL_GetTick>
 8002ec0:	1bc0      	subs	r0, r0, r7
 8002ec2:	2802      	cmp	r0, #2
 8002ec4:	d9f7      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	e7dd      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_LSI_DISABLE();
 8002eca:	4a49      	ldr	r2, [pc, #292]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002ecc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002ece:	2101      	movs	r1, #1
 8002ed0:	438b      	bics	r3, r1
 8002ed2:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002ed4:	f7ff f95a 	bl	800218c <HAL_GetTick>
 8002ed8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eda:	4e45      	ldr	r6, [pc, #276]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002edc:	2502      	movs	r5, #2
 8002ede:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002ee0:	421d      	tst	r5, r3
 8002ee2:	d006      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1f6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee4:	f7ff f952 	bl	800218c <HAL_GetTick>
 8002ee8:	1bc0      	subs	r0, r0, r7
 8002eea:	2802      	cmp	r0, #2
 8002eec:	d9f7      	bls.n	8002ede <HAL_RCC_OscConfig+0x1e2>
          return HAL_TIMEOUT;
 8002eee:	2003      	movs	r0, #3
 8002ef0:	e7c9      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	075b      	lsls	r3, r3, #29
 8002ef6:	d400      	bmi.n	8002efa <HAL_RCC_OscConfig+0x1fe>
 8002ef8:	e087      	b.n	800300a <HAL_RCC_OscConfig+0x30e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2200      	movs	r2, #0
 8002f00:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	d40b      	bmi.n	8002f1e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002f08:	69d1      	ldr	r1, [r2, #28]
 8002f0a:	2080      	movs	r0, #128	; 0x80
 8002f0c:	0540      	lsls	r0, r0, #21
 8002f0e:	4301      	orrs	r1, r0
 8002f10:	61d1      	str	r1, [r2, #28]
 8002f12:	69d3      	ldr	r3, [r2, #28]
 8002f14:	4003      	ands	r3, r0
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <HAL_RCC_OscConfig+0x300>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	05db      	lsls	r3, r3, #23
 8002f24:	d521      	bpl.n	8002f6a <HAL_RCC_OscConfig+0x26e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f26:	68a3      	ldr	r3, [r4, #8]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d034      	beq.n	8002f96 <HAL_RCC_OscConfig+0x29a>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d138      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x2a6>
 8002f30:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	2101      	movs	r1, #1
 8002f36:	438a      	bics	r2, r1
 8002f38:	621a      	str	r2, [r3, #32]
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	3103      	adds	r1, #3
 8002f3e:	438a      	bics	r2, r1
 8002f40:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f42:	68a3      	ldr	r3, [r4, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d042      	beq.n	8002fce <HAL_RCC_OscConfig+0x2d2>
      tickstart = HAL_GetTick();
 8002f48:	f7ff f920 	bl	800218c <HAL_GetTick>
 8002f4c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	4f28      	ldr	r7, [pc, #160]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002f50:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	4d2b      	ldr	r5, [pc, #172]	; (8003000 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	421e      	tst	r6, r3
 8002f58:	d154      	bne.n	8003004 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7ff f917 	bl	800218c <HAL_GetTick>
 8002f5e:	464b      	mov	r3, r9
 8002f60:	1ac0      	subs	r0, r0, r3
 8002f62:	42a8      	cmp	r0, r5
 8002f64:	d9f6      	bls.n	8002f54 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
 8002f68:	e78d      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6a:	4a24      	ldr	r2, [pc, #144]	; (8002ffc <HAL_RCC_OscConfig+0x300>)
 8002f6c:	6811      	ldr	r1, [r2, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	430b      	orrs	r3, r1
 8002f74:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002f76:	f7ff f909 	bl	800218c <HAL_GetTick>
 8002f7a:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	4f1f      	ldr	r7, [pc, #124]	; (8002ffc <HAL_RCC_OscConfig+0x300>)
 8002f7e:	2680      	movs	r6, #128	; 0x80
 8002f80:	0076      	lsls	r6, r6, #1
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	4233      	tst	r3, r6
 8002f86:	d1ce      	bne.n	8002f26 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f88:	f7ff f900 	bl	800218c <HAL_GetTick>
 8002f8c:	1b40      	subs	r0, r0, r5
 8002f8e:	2864      	cmp	r0, #100	; 0x64
 8002f90:	d9f7      	bls.n	8002f82 <HAL_RCC_OscConfig+0x286>
          return HAL_TIMEOUT;
 8002f92:	2003      	movs	r0, #3
 8002f94:	e777      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002f98:	6a13      	ldr	r3, [r2, #32]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	e7cf      	b.n	8002f42 <HAL_RCC_OscConfig+0x246>
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_OscConfig+0x2be>
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	2101      	movs	r1, #1
 8002fac:	438a      	bics	r2, r1
 8002fae:	621a      	str	r2, [r3, #32]
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	3103      	adds	r1, #3
 8002fb4:	438a      	bics	r2, r1
 8002fb6:	621a      	str	r2, [r3, #32]
 8002fb8:	e7c3      	b.n	8002f42 <HAL_RCC_OscConfig+0x246>
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	621a      	str	r2, [r3, #32]
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	3903      	subs	r1, #3
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	621a      	str	r2, [r3, #32]
 8002fcc:	e7b9      	b.n	8002f42 <HAL_RCC_OscConfig+0x246>
      tickstart = HAL_GetTick();
 8002fce:	f7ff f8dd 	bl	800218c <HAL_GetTick>
 8002fd2:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	4f06      	ldr	r7, [pc, #24]	; (8002ff0 <HAL_RCC_OscConfig+0x2f4>)
 8002fd6:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	4d09      	ldr	r5, [pc, #36]	; (8003000 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	421e      	tst	r6, r3
 8002fde:	d011      	beq.n	8003004 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7ff f8d4 	bl	800218c <HAL_GetTick>
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	1ac0      	subs	r0, r0, r3
 8002fe8:	42a8      	cmp	r0, r5
 8002fea:	d9f6      	bls.n	8002fda <HAL_RCC_OscConfig+0x2de>
          return HAL_TIMEOUT;
 8002fec:	2003      	movs	r0, #3
 8002fee:	e74a      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	fffeffff 	.word	0xfffeffff
 8002ff8:	fffbffff 	.word	0xfffbffff
 8002ffc:	40007000 	.word	0x40007000
 8003000:	00001388 	.word	0x00001388
    if(pwrclkchanged == SET)
 8003004:	4643      	mov	r3, r8
 8003006:	2b01      	cmp	r3, #1
 8003008:	d01f      	beq.n	800304a <HAL_RCC_OscConfig+0x34e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	06db      	lsls	r3, r3, #27
 800300e:	d54f      	bpl.n	80030b0 <HAL_RCC_OscConfig+0x3b4>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003010:	6963      	ldr	r3, [r4, #20]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d01f      	beq.n	8003056 <HAL_RCC_OscConfig+0x35a>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003016:	3305      	adds	r3, #5
 8003018:	d03e      	beq.n	8003098 <HAL_RCC_OscConfig+0x39c>
      __HAL_RCC_HSI14ADC_DISABLE();
 800301a:	4b56      	ldr	r3, [pc, #344]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 800301c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301e:	2104      	movs	r1, #4
 8003020:	430a      	orrs	r2, r1
 8003022:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003026:	3903      	subs	r1, #3
 8003028:	438a      	bics	r2, r1
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800302c:	f7ff f8ae 	bl	800218c <HAL_GetTick>
 8003030:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003032:	4e50      	ldr	r6, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003034:	2502      	movs	r5, #2
 8003036:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003038:	421d      	tst	r5, r3
 800303a:	d039      	beq.n	80030b0 <HAL_RCC_OscConfig+0x3b4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800303c:	f7ff f8a6 	bl	800218c <HAL_GetTick>
 8003040:	1bc0      	subs	r0, r0, r7
 8003042:	2802      	cmp	r0, #2
 8003044:	d9f7      	bls.n	8003036 <HAL_RCC_OscConfig+0x33a>
          return HAL_TIMEOUT;
 8003046:	2003      	movs	r0, #3
 8003048:	e71d      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 800304c:	69d3      	ldr	r3, [r2, #28]
 800304e:	494a      	ldr	r1, [pc, #296]	; (8003178 <HAL_RCC_OscConfig+0x47c>)
 8003050:	400b      	ands	r3, r1
 8003052:	61d3      	str	r3, [r2, #28]
 8003054:	e7d9      	b.n	800300a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305a:	2104      	movs	r1, #4
 800305c:	430a      	orrs	r2, r1
 800305e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003062:	3903      	subs	r1, #3
 8003064:	430a      	orrs	r2, r1
 8003066:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003068:	f7ff f890 	bl	800218c <HAL_GetTick>
 800306c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800306e:	4e41      	ldr	r6, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003070:	2502      	movs	r5, #2
 8003072:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003074:	421d      	tst	r5, r3
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003078:	f7ff f888 	bl	800218c <HAL_GetTick>
 800307c:	1bc0      	subs	r0, r0, r7
 800307e:	2802      	cmp	r0, #2
 8003080:	d9f7      	bls.n	8003072 <HAL_RCC_OscConfig+0x376>
          return HAL_TIMEOUT;
 8003082:	2003      	movs	r0, #3
 8003084:	e6ff      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003086:	493b      	ldr	r1, [pc, #236]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003088:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800308a:	69a3      	ldr	r3, [r4, #24]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	20f8      	movs	r0, #248	; 0xf8
 8003090:	4382      	bics	r2, r0
 8003092:	4313      	orrs	r3, r2
 8003094:	634b      	str	r3, [r1, #52]	; 0x34
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0x3b4>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003098:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 800309a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800309c:	2104      	movs	r1, #4
 800309e:	438b      	bics	r3, r1
 80030a0:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030a2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80030a4:	69a3      	ldr	r3, [r4, #24]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	20f8      	movs	r0, #248	; 0xf8
 80030aa:	4381      	bics	r1, r0
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6353      	str	r3, [r2, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b0:	6a23      	ldr	r3, [r4, #32]
  return HAL_OK;
 80030b2:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d100      	bne.n	80030ba <HAL_RCC_OscConfig+0x3be>
 80030b8:	e6e5      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ba:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 80030bc:	6851      	ldr	r1, [r2, #4]
 80030be:	220c      	movs	r2, #12
 80030c0:	400a      	ands	r2, r1
 80030c2:	2a08      	cmp	r2, #8
 80030c4:	d053      	beq.n	800316e <HAL_RCC_OscConfig+0x472>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d014      	beq.n	80030f4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4a2a      	ldr	r2, [pc, #168]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 80030cc:	6813      	ldr	r3, [r2, #0]
 80030ce:	492b      	ldr	r1, [pc, #172]	; (800317c <HAL_RCC_OscConfig+0x480>)
 80030d0:	400b      	ands	r3, r1
 80030d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030d4:	f7ff f85a 	bl	800218c <HAL_GetTick>
 80030d8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030da:	4d26      	ldr	r5, [pc, #152]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 80030dc:	2480      	movs	r4, #128	; 0x80
 80030de:	04a4      	lsls	r4, r4, #18
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	4223      	tst	r3, r4
 80030e4:	d041      	beq.n	800316a <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e6:	f7ff f851 	bl	800218c <HAL_GetTick>
 80030ea:	1b80      	subs	r0, r0, r6
 80030ec:	2802      	cmp	r0, #2
 80030ee:	d9f7      	bls.n	80030e0 <HAL_RCC_OscConfig+0x3e4>
            return HAL_TIMEOUT;
 80030f0:	2003      	movs	r0, #3
 80030f2:	e6c8      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_PLL_DISABLE();
 80030f4:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 80030f6:	6813      	ldr	r3, [r2, #0]
 80030f8:	4920      	ldr	r1, [pc, #128]	; (800317c <HAL_RCC_OscConfig+0x480>)
 80030fa:	400b      	ands	r3, r1
 80030fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030fe:	f7ff f845 	bl	800218c <HAL_GetTick>
 8003102:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003104:	4e1b      	ldr	r6, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003106:	2580      	movs	r5, #128	; 0x80
 8003108:	04ad      	lsls	r5, r5, #18
 800310a:	6833      	ldr	r3, [r6, #0]
 800310c:	422b      	tst	r3, r5
 800310e:	d006      	beq.n	800311e <HAL_RCC_OscConfig+0x422>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003110:	f7ff f83c 	bl	800218c <HAL_GetTick>
 8003114:	1bc0      	subs	r0, r0, r7
 8003116:	2802      	cmp	r0, #2
 8003118:	d9f7      	bls.n	800310a <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 800311a:	2003      	movs	r0, #3
 800311c:	e6b3      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 8003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003122:	210f      	movs	r1, #15
 8003124:	438a      	bics	r2, r1
 8003126:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003128:	430a      	orrs	r2, r1
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003130:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003132:	4302      	orrs	r2, r0
 8003134:	4812      	ldr	r0, [pc, #72]	; (8003180 <HAL_RCC_OscConfig+0x484>)
 8003136:	4001      	ands	r1, r0
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	0452      	lsls	r2, r2, #17
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003146:	f7ff f821 	bl	800218c <HAL_GetTick>
 800314a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800314c:	4d09      	ldr	r5, [pc, #36]	; (8003174 <HAL_RCC_OscConfig+0x478>)
 800314e:	2480      	movs	r4, #128	; 0x80
 8003150:	04a4      	lsls	r4, r4, #18
 8003152:	682b      	ldr	r3, [r5, #0]
 8003154:	4223      	tst	r3, r4
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x46a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7ff f818 	bl	800218c <HAL_GetTick>
 800315c:	1b80      	subs	r0, r0, r6
 800315e:	2802      	cmp	r0, #2
 8003160:	d9f7      	bls.n	8003152 <HAL_RCC_OscConfig+0x456>
            return HAL_TIMEOUT;
 8003162:	2003      	movs	r0, #3
 8003164:	e68f      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8003166:	2000      	movs	r0, #0
 8003168:	e68d      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
 800316a:	2000      	movs	r0, #0
 800316c:	e68b      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
      return HAL_ERROR;
 800316e:	2001      	movs	r0, #1
 8003170:	e689      	b.n	8002e86 <HAL_RCC_OscConfig+0x18a>
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40021000 	.word	0x40021000
 8003178:	efffffff 	.word	0xefffffff
 800317c:	feffffff 	.word	0xfeffffff
 8003180:	ffc2ffff 	.word	0xffc2ffff

08003184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b530      	push	{r4, r5, lr}
 8003186:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003188:	aa04      	add	r2, sp, #16
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x5c>)
 800318c:	0018      	movs	r0, r3
 800318e:	c832      	ldmia	r0!, {r1, r4, r5}
 8003190:	c232      	stmia	r2!, {r1, r4, r5}
 8003192:	0011      	movs	r1, r2
 8003194:	6802      	ldr	r2, [r0, #0]
 8003196:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003198:	466a      	mov	r2, sp
 800319a:	3310      	adds	r3, #16
 800319c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800319e:	c213      	stmia	r2!, {r0, r1, r4}
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x60>)
 80031a6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031a8:	230c      	movs	r3, #12
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d113      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80031b0:	0c91      	lsrs	r1, r2, #18
 80031b2:	3307      	adds	r3, #7
 80031b4:	4019      	ands	r1, r3
 80031b6:	a804      	add	r0, sp, #16
 80031b8:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80031ba:	490a      	ldr	r1, [pc, #40]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x60>)
 80031bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80031be:	400b      	ands	r3, r1
 80031c0:	4669      	mov	r1, sp
 80031c2:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031c4:	03d3      	lsls	r3, r2, #15
 80031c6:	d402      	bmi.n	80031ce <HAL_RCC_GetSysClockFreq+0x4a>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80031c8:	4807      	ldr	r0, [pc, #28]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x64>)
 80031ca:	4360      	muls	r0, r4
 80031cc:	e005      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80031ce:	4807      	ldr	r0, [pc, #28]	; (80031ec <HAL_RCC_GetSysClockFreq+0x68>)
 80031d0:	f7fc ff9a 	bl	8000108 <__udivsi3>
 80031d4:	4360      	muls	r0, r4
 80031d6:	e000      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80031d8:	4804      	ldr	r0, [pc, #16]	; (80031ec <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80031da:	b009      	add	sp, #36	; 0x24
 80031dc:	bd30      	pop	{r4, r5, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	08004950 	.word	0x08004950
 80031e4:	40021000 	.word	0x40021000
 80031e8:	003d0900 	.word	0x003d0900
 80031ec:	007a1200 	.word	0x007a1200

080031f0 <HAL_RCC_ClockConfig>:
{
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	46ce      	mov	lr, r9
 80031f4:	4647      	mov	r7, r8
 80031f6:	b580      	push	{r7, lr}
 80031f8:	0005      	movs	r5, r0
 80031fa:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80031fc:	4b51      	ldr	r3, [pc, #324]	; (8003344 <HAL_RCC_ClockConfig+0x154>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2301      	movs	r3, #1
 8003202:	4013      	ands	r3, r2
 8003204:	428b      	cmp	r3, r1
 8003206:	d20b      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003208:	494e      	ldr	r1, [pc, #312]	; (8003344 <HAL_RCC_ClockConfig+0x154>)
 800320a:	680b      	ldr	r3, [r1, #0]
 800320c:	2201      	movs	r2, #1
 800320e:	4393      	bics	r3, r2
 8003210:	4323      	orrs	r3, r4
 8003212:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003214:	680b      	ldr	r3, [r1, #0]
 8003216:	401a      	ands	r2, r3
      return HAL_ERROR;
 8003218:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800321a:	4294      	cmp	r4, r2
 800321c:	d000      	beq.n	8003220 <HAL_RCC_ClockConfig+0x30>
 800321e:	e08c      	b.n	800333a <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	079b      	lsls	r3, r3, #30
 8003224:	d506      	bpl.n	8003234 <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003226:	4a48      	ldr	r2, [pc, #288]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 8003228:	6853      	ldr	r3, [r2, #4]
 800322a:	21f0      	movs	r1, #240	; 0xf0
 800322c:	438b      	bics	r3, r1
 800322e:	68a9      	ldr	r1, [r5, #8]
 8003230:	430b      	orrs	r3, r1
 8003232:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	07db      	lsls	r3, r3, #31
 8003238:	d555      	bpl.n	80032e6 <HAL_RCC_ClockConfig+0xf6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323a:	686a      	ldr	r2, [r5, #4]
 800323c:	2a01      	cmp	r2, #1
 800323e:	d024      	beq.n	800328a <HAL_RCC_ClockConfig+0x9a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003240:	2a02      	cmp	r2, #2
 8003242:	d028      	beq.n	8003296 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b40      	ldr	r3, [pc, #256]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 8003246:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8003248:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	079b      	lsls	r3, r3, #30
 800324c:	d575      	bpl.n	800333a <HAL_RCC_ClockConfig+0x14a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	493e      	ldr	r1, [pc, #248]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 8003250:	684b      	ldr	r3, [r1, #4]
 8003252:	2003      	movs	r0, #3
 8003254:	4383      	bics	r3, r0
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800325a:	f7fe ff97 	bl	800218c <HAL_GetTick>
 800325e:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003260:	686b      	ldr	r3, [r5, #4]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d01d      	beq.n	80032a2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003266:	2b02      	cmp	r3, #2
 8003268:	d02c      	beq.n	80032c4 <HAL_RCC_ClockConfig+0xd4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 800326c:	4698      	mov	r8, r3
 800326e:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_ClockConfig+0x15c>)
 8003272:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003274:	4643      	mov	r3, r8
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	421f      	tst	r7, r3
 800327a:	d034      	beq.n	80032e6 <HAL_RCC_ClockConfig+0xf6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe ff86 	bl	800218c <HAL_GetTick>
 8003280:	1b80      	subs	r0, r0, r6
 8003282:	4548      	cmp	r0, r9
 8003284:	d9f6      	bls.n	8003274 <HAL_RCC_ClockConfig+0x84>
          return HAL_TIMEOUT;
 8003286:	2003      	movs	r0, #3
 8003288:	e057      	b.n	800333a <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 800328c:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 800328e:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003290:	039b      	lsls	r3, r3, #14
 8003292:	d4dc      	bmi.n	800324e <HAL_RCC_ClockConfig+0x5e>
 8003294:	e051      	b.n	800333a <HAL_RCC_ClockConfig+0x14a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 8003298:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 800329a:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	d4d6      	bmi.n	800324e <HAL_RCC_ClockConfig+0x5e>
 80032a0:	e04b      	b.n	800333a <HAL_RCC_ClockConfig+0x14a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 80032a4:	4698      	mov	r8, r3
 80032a6:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_RCC_ClockConfig+0x15c>)
 80032aa:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ac:	4643      	mov	r3, r8
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	403b      	ands	r3, r7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d017      	beq.n	80032e6 <HAL_RCC_ClockConfig+0xf6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b6:	f7fe ff69 	bl	800218c <HAL_GetTick>
 80032ba:	1b80      	subs	r0, r0, r6
 80032bc:	4548      	cmp	r0, r9
 80032be:	d9f5      	bls.n	80032ac <HAL_RCC_ClockConfig+0xbc>
          return HAL_TIMEOUT;
 80032c0:	2003      	movs	r0, #3
 80032c2:	e03a      	b.n	800333a <HAL_RCC_ClockConfig+0x14a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 80032c6:	4698      	mov	r8, r3
 80032c8:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_ClockConfig+0x15c>)
 80032cc:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ce:	4643      	mov	r3, r8
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	403b      	ands	r3, r7
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d006      	beq.n	80032e6 <HAL_RCC_ClockConfig+0xf6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe ff58 	bl	800218c <HAL_GetTick>
 80032dc:	1b80      	subs	r0, r0, r6
 80032de:	4548      	cmp	r0, r9
 80032e0:	d9f5      	bls.n	80032ce <HAL_RCC_ClockConfig+0xde>
          return HAL_TIMEOUT;
 80032e2:	2003      	movs	r0, #3
 80032e4:	e029      	b.n	800333a <HAL_RCC_ClockConfig+0x14a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <HAL_RCC_ClockConfig+0x154>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2301      	movs	r3, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	429c      	cmp	r4, r3
 80032f0:	d20a      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x118>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4914      	ldr	r1, [pc, #80]	; (8003344 <HAL_RCC_ClockConfig+0x154>)
 80032f4:	680b      	ldr	r3, [r1, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4393      	bics	r3, r2
 80032fa:	4323      	orrs	r3, r4
 80032fc:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032fe:	680b      	ldr	r3, [r1, #0]
 8003300:	401a      	ands	r2, r3
      return HAL_ERROR;
 8003302:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003304:	4294      	cmp	r4, r2
 8003306:	d118      	bne.n	800333a <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	075b      	lsls	r3, r3, #29
 800330c:	d506      	bpl.n	800331c <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800330e:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 8003310:	6853      	ldr	r3, [r2, #4]
 8003312:	490f      	ldr	r1, [pc, #60]	; (8003350 <HAL_RCC_ClockConfig+0x160>)
 8003314:	400b      	ands	r3, r1
 8003316:	68e9      	ldr	r1, [r5, #12]
 8003318:	430b      	orrs	r3, r1
 800331a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800331c:	f7ff ff32 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_ClockConfig+0x158>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	0f1b      	lsrs	r3, r3, #28
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x164>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	40d8      	lsrs	r0, r3
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <HAL_RCC_ClockConfig+0x168>)
 8003330:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003332:	2000      	movs	r0, #0
 8003334:	f7fe ff00 	bl	8002138 <HAL_InitTick>
  return HAL_OK;
 8003338:	2000      	movs	r0, #0
}
 800333a:	bc0c      	pop	{r2, r3}
 800333c:	4690      	mov	r8, r2
 800333e:	4699      	mov	r9, r3
 8003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	00001388 	.word	0x00001388
 8003350:	fffff8ff 	.word	0xfffff8ff
 8003354:	08004b6c 	.word	0x08004b6c
 8003358:	20000048 	.word	0x20000048

0800335c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800335c:	4b01      	ldr	r3, [pc, #4]	; (8003364 <HAL_RCC_GetHCLKFreq+0x8>)
 800335e:	6818      	ldr	r0, [r3, #0]
}
 8003360:	4770      	bx	lr
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	20000048 	.word	0x20000048

08003368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	46ce      	mov	lr, r9
 800336c:	4647      	mov	r7, r8
 800336e:	b580      	push	{r7, lr}
 8003370:	b083      	sub	sp, #12
 8003372:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003374:	6803      	ldr	r3, [r0, #0]
 8003376:	03db      	lsls	r3, r3, #15
 8003378:	d536      	bpl.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800337c:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800337e:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	d40a      	bmi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003384:	4a3c      	ldr	r2, [pc, #240]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003386:	69d1      	ldr	r1, [r2, #28]
 8003388:	2080      	movs	r0, #128	; 0x80
 800338a:	0540      	lsls	r0, r0, #21
 800338c:	4301      	orrs	r1, r0
 800338e:	61d1      	str	r1, [r2, #28]
 8003390:	69d3      	ldr	r3, [r2, #28]
 8003392:	4003      	ands	r3, r0
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003398:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	4b38      	ldr	r3, [pc, #224]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	d53c      	bpl.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033a2:	4b35      	ldr	r3, [pc, #212]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	22c0      	movs	r2, #192	; 0xc0
 80033a8:	0092      	lsls	r2, r2, #2
 80033aa:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ac:	d013      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80033ae:	6861      	ldr	r1, [r4, #4]
 80033b0:	400a      	ands	r2, r1
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00f      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033b6:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80033b8:	6a18      	ldr	r0, [r3, #32]
 80033ba:	4a31      	ldr	r2, [pc, #196]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80033bc:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033be:	6a1e      	ldr	r6, [r3, #32]
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	0249      	lsls	r1, r1, #9
 80033c4:	4331      	orrs	r1, r6
 80033c6:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033c8:	6a19      	ldr	r1, [r3, #32]
 80033ca:	4e2e      	ldr	r6, [pc, #184]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80033cc:	4031      	ands	r1, r6
 80033ce:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033d0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033d2:	07c3      	lsls	r3, r0, #31
 80033d4:	d439      	bmi.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d6:	4a28      	ldr	r2, [pc, #160]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80033d8:	6a13      	ldr	r3, [r2, #32]
 80033da:	4929      	ldr	r1, [pc, #164]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80033dc:	400b      	ands	r3, r1
 80033de:	6861      	ldr	r1, [r4, #4]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e4:	2d01      	cmp	r5, #1
 80033e6:	d042      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	07db      	lsls	r3, r3, #31
 80033ec:	d506      	bpl.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ee:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80033f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80033f2:	2103      	movs	r1, #3
 80033f4:	438b      	bics	r3, r1
 80033f6:	68a1      	ldr	r1, [r4, #8]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033fc:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	069b      	lsls	r3, r3, #26
 8003402:	d506      	bpl.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003406:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003408:	2110      	movs	r1, #16
 800340a:	438b      	bics	r3, r1
 800340c:	68e1      	ldr	r1, [r4, #12]
 800340e:	430b      	orrs	r3, r1
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003412:	b003      	add	sp, #12
 8003414:	bc0c      	pop	{r2, r3}
 8003416:	4690      	mov	r8, r2
 8003418:	4699      	mov	r9, r3
 800341a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341c:	4a17      	ldr	r2, [pc, #92]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800341e:	6811      	ldr	r1, [r2, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	430b      	orrs	r3, r1
 8003426:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003428:	f7fe feb0 	bl	800218c <HAL_GetTick>
 800342c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	4f13      	ldr	r7, [pc, #76]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003430:	2680      	movs	r6, #128	; 0x80
 8003432:	0076      	lsls	r6, r6, #1
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4233      	tst	r3, r6
 8003438:	d1b3      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343a:	f7fe fea7 	bl	800218c <HAL_GetTick>
 800343e:	4643      	mov	r3, r8
 8003440:	1ac0      	subs	r0, r0, r3
 8003442:	2864      	cmp	r0, #100	; 0x64
 8003444:	d9f6      	bls.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8003446:	2003      	movs	r0, #3
 8003448:	e7e3      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 800344a:	f7fe fe9f 	bl	800218c <HAL_GetTick>
 800344e:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003450:	4f09      	ldr	r7, [pc, #36]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003452:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8003456:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	421e      	tst	r6, r3
 800345c:	d1bb      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe fe95 	bl	800218c <HAL_GetTick>
 8003462:	464b      	mov	r3, r9
 8003464:	1ac0      	subs	r0, r0, r3
 8003466:	4540      	cmp	r0, r8
 8003468:	d9f6      	bls.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
 800346a:	2003      	movs	r0, #3
 800346c:	e7d1      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	69d3      	ldr	r3, [r2, #28]
 8003470:	4906      	ldr	r1, [pc, #24]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003472:	400b      	ands	r3, r1
 8003474:	61d3      	str	r3, [r2, #28]
 8003476:	e7b7      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	fffffcff 	.word	0xfffffcff
 8003484:	fffeffff 	.word	0xfffeffff
 8003488:	00001388 	.word	0x00001388
 800348c:	efffffff 	.word	0xefffffff

08003490 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003494:	6802      	ldr	r2, [r0, #0]
 8003496:	68d3      	ldr	r3, [r2, #12]
 8003498:	21a0      	movs	r1, #160	; 0xa0
 800349a:	438b      	bics	r3, r1
 800349c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800349e:	f7fe fe75 	bl	800218c <HAL_GetTick>
 80034a2:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034a4:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80034a6:	26fa      	movs	r6, #250	; 0xfa
 80034a8:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	421d      	tst	r5, r3
 80034b0:	d106      	bne.n	80034c0 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80034b2:	f7fe fe6b 	bl	800218c <HAL_GetTick>
 80034b6:	1bc0      	subs	r0, r0, r7
 80034b8:	42b0      	cmp	r0, r6
 80034ba:	d9f6      	bls.n	80034aa <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80034bc:	2003      	movs	r0, #3
 80034be:	e000      	b.n	80034c2 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80034c0:	2000      	movs	r0, #0
}
 80034c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034c8:	6803      	ldr	r3, [r0, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80034cc:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034ce:	0652      	lsls	r2, r2, #25
 80034d0:	d500      	bpl.n	80034d4 <RTC_EnterInitMode+0x10>
}
 80034d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80034d4:	2201      	movs	r2, #1
 80034d6:	4252      	negs	r2, r2
 80034d8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80034da:	f7fe fe57 	bl	800218c <HAL_GetTick>
 80034de:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034e0:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80034e2:	26fa      	movs	r6, #250	; 0xfa
 80034e4:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	421d      	tst	r5, r3
 80034ec:	d106      	bne.n	80034fc <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80034ee:	f7fe fe4d 	bl	800218c <HAL_GetTick>
 80034f2:	1bc0      	subs	r0, r0, r7
 80034f4:	42b0      	cmp	r0, r6
 80034f6:	d9f6      	bls.n	80034e6 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80034f8:	2003      	movs	r0, #3
 80034fa:	e7ea      	b.n	80034d2 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80034fc:	2000      	movs	r0, #0
 80034fe:	e7e8      	b.n	80034d2 <RTC_EnterInitMode+0xe>

08003500 <HAL_RTC_Init>:
{
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8003504:	d057      	beq.n	80035b6 <HAL_RTC_Init+0xb6>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003506:	7f43      	ldrb	r3, [r0, #29]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d03d      	beq.n	8003588 <HAL_RTC_Init+0x88>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800350c:	2302      	movs	r3, #2
 800350e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	22ca      	movs	r2, #202	; 0xca
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	3a77      	subs	r2, #119	; 0x77
 800351a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800351c:	0020      	movs	r0, r4
 800351e:	f7ff ffd1 	bl	80034c4 <RTC_EnterInitMode>
 8003522:	1e05      	subs	r5, r0, #0
 8003524:	d134      	bne.n	8003590 <HAL_RTC_Init+0x90>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	6893      	ldr	r3, [r2, #8]
 800352a:	4924      	ldr	r1, [pc, #144]	; (80035bc <HAL_RTC_Init+0xbc>)
 800352c:	400b      	ands	r3, r1
 800352e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	6891      	ldr	r1, [r2, #8]
 8003534:	6863      	ldr	r3, [r4, #4]
 8003536:	6920      	ldr	r0, [r4, #16]
 8003538:	4303      	orrs	r3, r0
 800353a:	6960      	ldr	r0, [r4, #20]
 800353c:	4303      	orrs	r3, r0
 800353e:	430b      	orrs	r3, r1
 8003540:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	68e2      	ldr	r2, [r4, #12]
 8003546:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	6911      	ldr	r1, [r2, #16]
 800354c:	68a3      	ldr	r3, [r4, #8]
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	430b      	orrs	r3, r1
 8003552:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	68d3      	ldr	r3, [r2, #12]
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	438b      	bics	r3, r1
 800355c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	069b      	lsls	r3, r3, #26
 8003564:	d51b      	bpl.n	800359e <HAL_RTC_Init+0x9e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003566:	6822      	ldr	r2, [r4, #0]
 8003568:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800356a:	4915      	ldr	r1, [pc, #84]	; (80035c0 <HAL_RTC_Init+0xc0>)
 800356c:	400b      	ands	r3, r1
 800356e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003574:	69a1      	ldr	r1, [r4, #24]
 8003576:	430b      	orrs	r3, r1
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	22ff      	movs	r2, #255	; 0xff
 800357e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003580:	2301      	movs	r3, #1
 8003582:	7763      	strb	r3, [r4, #29]
}
 8003584:	0028      	movs	r0, r5
 8003586:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8003588:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800358a:	f001 f90d 	bl	80047a8 <HAL_RTC_MspInit>
 800358e:	e7bd      	b.n	800350c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	22ff      	movs	r2, #255	; 0xff
 8003594:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003596:	2304      	movs	r3, #4
 8003598:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800359a:	2501      	movs	r5, #1
 800359c:	e7f2      	b.n	8003584 <HAL_RTC_Init+0x84>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800359e:	0020      	movs	r0, r4
 80035a0:	f7ff ff76 	bl	8003490 <HAL_RTC_WaitForSynchro>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d0de      	beq.n	8003566 <HAL_RTC_Init+0x66>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	22ff      	movs	r2, #255	; 0xff
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035ae:	2304      	movs	r3, #4
 80035b0:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 80035b2:	2501      	movs	r5, #1
 80035b4:	e7e6      	b.n	8003584 <HAL_RTC_Init+0x84>
     return HAL_ERROR;
 80035b6:	2501      	movs	r5, #1
 80035b8:	e7e4      	b.n	8003584 <HAL_RTC_Init+0x84>
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	ff8fffbf 	.word	0xff8fffbf
 80035c0:	fffbffff 	.word	0xfffbffff

080035c4 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  
  while(Value >= 10U)
 80035c4:	2809      	cmp	r0, #9
 80035c6:	d909      	bls.n	80035dc <RTC_ByteToBcd2+0x18>
 80035c8:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80035ca:	3301      	adds	r3, #1
    Value -= 10U;
 80035cc:	380a      	subs	r0, #10
 80035ce:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 80035d0:	2809      	cmp	r0, #9
 80035d2:	d8fa      	bhi.n	80035ca <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4318      	orrs	r0, r3
 80035d8:	b2c0      	uxtb	r0, r0
}
 80035da:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	e7f9      	b.n	80035d4 <RTC_ByteToBcd2+0x10>

080035e0 <HAL_RTC_SetTime>:
{
 80035e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e2:	46c6      	mov	lr, r8
 80035e4:	b500      	push	{lr}
 80035e6:	0004      	movs	r4, r0
 80035e8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80035ea:	7f03      	ldrb	r3, [r0, #28]
 80035ec:	2702      	movs	r7, #2
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d049      	beq.n	8003686 <HAL_RTC_SetTime+0xa6>
 80035f2:	2301      	movs	r3, #1
 80035f4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035f6:	3301      	adds	r3, #1
 80035f8:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80035fa:	2a00      	cmp	r2, #0
 80035fc:	d147      	bne.n	800368e <HAL_RTC_SetTime+0xae>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80035fe:	6803      	ldr	r3, [r0, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	065b      	lsls	r3, r3, #25
 8003604:	d401      	bmi.n	800360a <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800360a:	7830      	ldrb	r0, [r6, #0]
 800360c:	f7ff ffda 	bl	80035c4 <RTC_ByteToBcd2>
 8003610:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003612:	7870      	ldrb	r0, [r6, #1]
 8003614:	f7ff ffd6 	bl	80035c4 <RTC_ByteToBcd2>
 8003618:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800361a:	78b0      	ldrb	r0, [r6, #2]
 800361c:	f7ff ffd2 	bl	80035c4 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8003620:	78f5      	ldrb	r5, [r6, #3]
 8003622:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003624:	4305      	orrs	r5, r0
 8003626:	4643      	mov	r3, r8
 8003628:	0418      	lsls	r0, r3, #16
 800362a:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800362c:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800362e:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	22ca      	movs	r2, #202	; 0xca
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	3a77      	subs	r2, #119	; 0x77
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800363c:	0020      	movs	r0, r4
 800363e:	f7ff ff41 	bl	80034c4 <RTC_EnterInitMode>
 8003642:	1e07      	subs	r7, r0, #0
 8003644:	d134      	bne.n	80036b0 <HAL_RTC_SetTime+0xd0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	4825      	ldr	r0, [pc, #148]	; (80036e0 <HAL_RTC_SetTime+0x100>)
 800364a:	4005      	ands	r5, r0
 800364c:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	6893      	ldr	r3, [r2, #8]
 8003652:	4924      	ldr	r1, [pc, #144]	; (80036e4 <HAL_RTC_SetTime+0x104>)
 8003654:	400b      	ands	r3, r1
 8003656:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	6891      	ldr	r1, [r2, #8]
 800365c:	68f3      	ldr	r3, [r6, #12]
 800365e:	6930      	ldr	r0, [r6, #16]
 8003660:	4303      	orrs	r3, r0
 8003662:	430b      	orrs	r3, r1
 8003664:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003666:	6822      	ldr	r2, [r4, #0]
 8003668:	68d3      	ldr	r3, [r2, #12]
 800366a:	2180      	movs	r1, #128	; 0x80
 800366c:	438b      	bics	r3, r1
 800366e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	069b      	lsls	r3, r3, #26
 8003676:	d524      	bpl.n	80036c2 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	22ff      	movs	r2, #255	; 0xff
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800367e:	2301      	movs	r3, #1
 8003680:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8003682:	2300      	movs	r3, #0
 8003684:	7723      	strb	r3, [r4, #28]
}
 8003686:	0038      	movs	r0, r7
 8003688:	bc04      	pop	{r2}
 800368a:	4690      	mov	r8, r2
 800368c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800368e:	6803      	ldr	r3, [r0, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	065b      	lsls	r3, r3, #25
 8003694:	d401      	bmi.n	800369a <HAL_RTC_SetTime+0xba>
      sTime->TimeFormat = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800369a:	7835      	ldrb	r5, [r6, #0]
 800369c:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800369e:	7870      	ldrb	r0, [r6, #1]
 80036a0:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80036a2:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80036a4:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80036a6:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 80036a8:	78f0      	ldrb	r0, [r6, #3]
 80036aa:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80036ac:	4305      	orrs	r5, r0
 80036ae:	e7bf      	b.n	8003630 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036b6:	2304      	movs	r3, #4
 80036b8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80036ba:	2300      	movs	r3, #0
 80036bc:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80036be:	2701      	movs	r7, #1
 80036c0:	e7e1      	b.n	8003686 <HAL_RTC_SetTime+0xa6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036c2:	0020      	movs	r0, r4
 80036c4:	f7ff fee4 	bl	8003490 <HAL_RTC_WaitForSynchro>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d0d5      	beq.n	8003678 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	22ff      	movs	r2, #255	; 0xff
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036d2:	2304      	movs	r3, #4
 80036d4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80036d6:	2300      	movs	r3, #0
 80036d8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80036da:	2701      	movs	r7, #1
 80036dc:	e7d3      	b.n	8003686 <HAL_RTC_SetTime+0xa6>
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	007f7f7f 	.word	0x007f7f7f
 80036e4:	fffbffff 	.word	0xfffbffff

080036e8 <HAL_RTC_SetDate>:
{
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	46c6      	mov	lr, r8
 80036ec:	b500      	push	{lr}
 80036ee:	0004      	movs	r4, r0
 80036f0:	000f      	movs	r7, r1
 __HAL_LOCK(hrtc);
 80036f2:	7f03      	ldrb	r3, [r0, #28]
 80036f4:	2602      	movs	r6, #2
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d03e      	beq.n	8003778 <HAL_RTC_SetDate+0x90>
 80036fa:	2301      	movs	r3, #1
 80036fc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80036fe:	3301      	adds	r3, #1
 8003700:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003702:	2a00      	cmp	r2, #0
 8003704:	d153      	bne.n	80037ae <HAL_RTC_SetDate+0xc6>
 8003706:	784b      	ldrb	r3, [r1, #1]
 8003708:	06da      	lsls	r2, r3, #27
 800370a:	d503      	bpl.n	8003714 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800370c:	2210      	movs	r2, #16
 800370e:	4393      	bics	r3, r2
 8003710:	330a      	adds	r3, #10
 8003712:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003714:	78f8      	ldrb	r0, [r7, #3]
 8003716:	f7ff ff55 	bl	80035c4 <RTC_ByteToBcd2>
 800371a:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800371c:	7878      	ldrb	r0, [r7, #1]
 800371e:	f7ff ff51 	bl	80035c4 <RTC_ByteToBcd2>
 8003722:	0006      	movs	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003724:	78b8      	ldrb	r0, [r7, #2]
 8003726:	f7ff ff4d 	bl	80035c4 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13U));   
 800372a:	783d      	ldrb	r5, [r7, #0]
 800372c:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800372e:	4305      	orrs	r5, r0
 8003730:	4643      	mov	r3, r8
 8003732:	0418      	lsls	r0, r3, #16
 8003734:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003736:	0236      	lsls	r6, r6, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003738:	4335      	orrs	r5, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	22ca      	movs	r2, #202	; 0xca
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	3a77      	subs	r2, #119	; 0x77
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003746:	0020      	movs	r0, r4
 8003748:	f7ff febc 	bl	80034c4 <RTC_EnterInitMode>
 800374c:	1e06      	subs	r6, r0, #0
 800374e:	d117      	bne.n	8003780 <HAL_RTC_SetDate+0x98>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	481c      	ldr	r0, [pc, #112]	; (80037c4 <HAL_RTC_SetDate+0xdc>)
 8003754:	4005      	ands	r5, r0
 8003756:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	68d3      	ldr	r3, [r2, #12]
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	438b      	bics	r3, r1
 8003760:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	069b      	lsls	r3, r3, #26
 8003768:	d513      	bpl.n	8003792 <HAL_RTC_SetDate+0xaa>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	22ff      	movs	r2, #255	; 0xff
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003770:	2301      	movs	r3, #1
 8003772:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003774:	2300      	movs	r3, #0
 8003776:	7723      	strb	r3, [r4, #28]
}
 8003778:	0030      	movs	r0, r6
 800377a:	bc04      	pop	{r2}
 800377c:	4690      	mov	r8, r2
 800377e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	22ff      	movs	r2, #255	; 0xff
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003786:	2304      	movs	r3, #4
 8003788:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800378a:	2300      	movs	r3, #0
 800378c:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800378e:	2601      	movs	r6, #1
 8003790:	e7f2      	b.n	8003778 <HAL_RTC_SetDate+0x90>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003792:	0020      	movs	r0, r4
 8003794:	f7ff fe7c 	bl	8003490 <HAL_RTC_WaitForSynchro>
 8003798:	2800      	cmp	r0, #0
 800379a:	d0e6      	beq.n	800376a <HAL_RTC_SetDate+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80037a2:	2304      	movs	r3, #4
 80037a4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80037a6:	2300      	movs	r3, #0
 80037a8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80037aa:	2601      	movs	r6, #1
 80037ac:	e7e4      	b.n	8003778 <HAL_RTC_SetDate+0x90>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037ae:	78cd      	ldrb	r5, [r1, #3]
 80037b0:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80037b2:	7848      	ldrb	r0, [r1, #1]
 80037b4:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037b6:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 80037b8:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80037ba:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80037bc:	7808      	ldrb	r0, [r1, #0]
 80037be:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037c0:	4305      	orrs	r5, r0
 80037c2:	e7ba      	b.n	800373a <HAL_RTC_SetDate+0x52>
 80037c4:	00ffff3f 	.word	0x00ffff3f

080037c8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80037c8:	0002      	movs	r2, r0
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80037ca:	0900      	lsrs	r0, r0, #4
 80037cc:	0083      	lsls	r3, r0, #2
 80037ce:	181b      	adds	r3, r3, r0
 80037d0:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 80037d2:	200f      	movs	r0, #15
 80037d4:	4010      	ands	r0, r2
 80037d6:	1818      	adds	r0, r3, r0
 80037d8:	b2c0      	uxtb	r0, r0
}
 80037da:	4770      	bx	lr

080037dc <HAL_RTC_GetTime>:
{
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80037e0:	6803      	ldr	r3, [r0, #0]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80037e6:	6803      	ldr	r3, [r0, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	045b      	lsls	r3, r3, #17
 80037ec:	0c5b      	lsrs	r3, r3, #17
 80037ee:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80037f0:	6803      	ldr	r3, [r0, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	490e      	ldr	r1, [pc, #56]	; (8003830 <HAL_RTC_GetTime+0x54>)
 80037f6:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80037f8:	0c1e      	lsrs	r6, r3, #16
 80037fa:	203f      	movs	r0, #63	; 0x3f
 80037fc:	4030      	ands	r0, r6
 80037fe:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8003800:	0a1d      	lsrs	r5, r3, #8
 8003802:	277f      	movs	r7, #127	; 0x7f
 8003804:	403d      	ands	r5, r7
 8003806:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003808:	401f      	ands	r7, r3
 800380a:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	4031      	ands	r1, r6
 8003810:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8003812:	2a00      	cmp	r2, #0
 8003814:	d10a      	bne.n	800382c <HAL_RTC_GetTime+0x50>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003816:	f7ff ffd7 	bl	80037c8 <RTC_Bcd2ToByte>
 800381a:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800381c:	0028      	movs	r0, r5
 800381e:	f7ff ffd3 	bl	80037c8 <RTC_Bcd2ToByte>
 8003822:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8003824:	0038      	movs	r0, r7
 8003826:	f7ff ffcf 	bl	80037c8 <RTC_Bcd2ToByte>
 800382a:	70a0      	strb	r0, [r4, #2]
}
 800382c:	2000      	movs	r0, #0
 800382e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003830:	007f7f7f 	.word	0x007f7f7f

08003834 <HAL_RTC_GetDate>:
{
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8003838:	6803      	ldr	r3, [r0, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	490d      	ldr	r1, [pc, #52]	; (8003874 <HAL_RTC_GetDate+0x40>)
 800383e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003840:	0c18      	lsrs	r0, r3, #16
 8003842:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003844:	04de      	lsls	r6, r3, #19
 8003846:	0ef6      	lsrs	r6, r6, #27
 8003848:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800384a:	253f      	movs	r5, #63	; 0x3f
 800384c:	401d      	ands	r5, r3
 800384e:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8003850:	041b      	lsls	r3, r3, #16
 8003852:	0f5b      	lsrs	r3, r3, #29
 8003854:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8003856:	2a00      	cmp	r2, #0
 8003858:	d10a      	bne.n	8003870 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800385a:	f7ff ffb5 	bl	80037c8 <RTC_Bcd2ToByte>
 800385e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003860:	0030      	movs	r0, r6
 8003862:	f7ff ffb1 	bl	80037c8 <RTC_Bcd2ToByte>
 8003866:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8003868:	0028      	movs	r0, r5
 800386a:	f7ff ffad 	bl	80037c8 <RTC_Bcd2ToByte>
 800386e:	70a0      	strb	r0, [r4, #2]
}
 8003870:	2000      	movs	r0, #0
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	00ffff3f 	.word	0x00ffff3f

08003878 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003878:	6803      	ldr	r3, [r0, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	2101      	movs	r1, #1
 800387e:	430a      	orrs	r2, r1
 8003880:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003882:	6802      	ldr	r2, [r0, #0]
 8003884:	6813      	ldr	r3, [r2, #0]
 8003886:	430b      	orrs	r3, r1
 8003888:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 800388a:	2000      	movs	r0, #0
 800388c:	4770      	bx	lr

0800388e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003890:	4770      	bx	lr

08003892 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_IRQHandler>:
{
 8003896:	b510      	push	{r4, lr}
 8003898:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800389a:	6803      	ldr	r3, [r0, #0]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	0792      	lsls	r2, r2, #30
 80038a0:	d50f      	bpl.n	80038c2 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	0792      	lsls	r2, r2, #30
 80038a6:	d50c      	bpl.n	80038c2 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a8:	2203      	movs	r2, #3
 80038aa:	4252      	negs	r2, r2
 80038ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b2:	6803      	ldr	r3, [r0, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	079b      	lsls	r3, r3, #30
 80038b8:	d063      	beq.n	8003982 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	f7ff ffe9 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	2300      	movs	r3, #0
 80038c0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	0752      	lsls	r2, r2, #29
 80038c8:	d512      	bpl.n	80038f0 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	0752      	lsls	r2, r2, #29
 80038ce:	d50f      	bpl.n	80038f0 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038d0:	2205      	movs	r2, #5
 80038d2:	4252      	negs	r2, r2
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d6:	2302      	movs	r3, #2
 80038d8:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	23c0      	movs	r3, #192	; 0xc0
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	421a      	tst	r2, r3
 80038e4:	d053      	beq.n	800398e <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	0020      	movs	r0, r4
 80038e8:	f7ff ffd2 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ec:	2300      	movs	r3, #0
 80038ee:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	0712      	lsls	r2, r2, #28
 80038f6:	d510      	bpl.n	800391a <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	0712      	lsls	r2, r2, #28
 80038fc:	d50d      	bpl.n	800391a <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038fe:	2209      	movs	r2, #9
 8003900:	4252      	negs	r2, r2
 8003902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003904:	2304      	movs	r3, #4
 8003906:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	079b      	lsls	r3, r3, #30
 800390e:	d045      	beq.n	800399c <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8003910:	0020      	movs	r0, r4
 8003912:	f7ff ffbd 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	2300      	movs	r3, #0
 8003918:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	06d2      	lsls	r2, r2, #27
 8003920:	d512      	bpl.n	8003948 <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	06d2      	lsls	r2, r2, #27
 8003926:	d50f      	bpl.n	8003948 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003928:	2211      	movs	r2, #17
 800392a:	4252      	negs	r2, r2
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392e:	2308      	movs	r3, #8
 8003930:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	23c0      	movs	r3, #192	; 0xc0
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	421a      	tst	r2, r3
 800393c:	d035      	beq.n	80039aa <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	0020      	movs	r0, r4
 8003940:	f7ff ffa6 	bl	8003890 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003944:	2300      	movs	r3, #0
 8003946:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	07d2      	lsls	r2, r2, #31
 800394e:	d502      	bpl.n	8003956 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	07d2      	lsls	r2, r2, #31
 8003954:	d430      	bmi.n	80039b8 <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	0612      	lsls	r2, r2, #24
 800395c:	d502      	bpl.n	8003964 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	0612      	lsls	r2, r2, #24
 8003962:	d430      	bmi.n	80039c6 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	0652      	lsls	r2, r2, #25
 800396a:	d502      	bpl.n	8003972 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	0652      	lsls	r2, r2, #25
 8003970:	d430      	bmi.n	80039d4 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	0692      	lsls	r2, r2, #26
 8003978:	d502      	bpl.n	8003980 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	0692      	lsls	r2, r2, #26
 800397e:	d430      	bmi.n	80039e2 <HAL_TIM_IRQHandler+0x14c>
}
 8003980:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	f7ff ff84 	bl	800388e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003986:	0020      	movs	r0, r4
 8003988:	f7ff ff83 	bl	8003892 <HAL_TIM_PWM_PulseFinishedCallback>
 800398c:	e797      	b.n	80038be <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	0020      	movs	r0, r4
 8003990:	f7ff ff7d 	bl	800388e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	0020      	movs	r0, r4
 8003996:	f7ff ff7c 	bl	8003892 <HAL_TIM_PWM_PulseFinishedCallback>
 800399a:	e7a7      	b.n	80038ec <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399c:	0020      	movs	r0, r4
 800399e:	f7ff ff76 	bl	800388e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a2:	0020      	movs	r0, r4
 80039a4:	f7ff ff75 	bl	8003892 <HAL_TIM_PWM_PulseFinishedCallback>
 80039a8:	e7b5      	b.n	8003916 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	0020      	movs	r0, r4
 80039ac:	f7ff ff6f 	bl	800388e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	0020      	movs	r0, r4
 80039b2:	f7ff ff6e 	bl	8003892 <HAL_TIM_PWM_PulseFinishedCallback>
 80039b6:	e7c5      	b.n	8003944 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b8:	2202      	movs	r2, #2
 80039ba:	4252      	negs	r2, r2
 80039bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80039be:	0020      	movs	r0, r4
 80039c0:	f000 fb96 	bl	80040f0 <HAL_TIM_PeriodElapsedCallback>
 80039c4:	e7c7      	b.n	8003956 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c6:	2281      	movs	r2, #129	; 0x81
 80039c8:	4252      	negs	r2, r2
 80039ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80039cc:	0020      	movs	r0, r4
 80039ce:	f000 f8b6 	bl	8003b3e <HAL_TIMEx_BreakCallback>
 80039d2:	e7c7      	b.n	8003964 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d4:	2241      	movs	r2, #65	; 0x41
 80039d6:	4252      	negs	r2, r2
 80039d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80039da:	0020      	movs	r0, r4
 80039dc:	f7ff ff5a 	bl	8003894 <HAL_TIM_TriggerCallback>
 80039e0:	e7c7      	b.n	8003972 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e2:	2221      	movs	r2, #33	; 0x21
 80039e4:	4252      	negs	r2, r2
 80039e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80039e8:	0020      	movs	r0, r4
 80039ea:	f000 f8a7 	bl	8003b3c <HAL_TIMEx_CommutationCallback>
}
 80039ee:	e7c7      	b.n	8003980 <HAL_TIM_IRQHandler+0xea>

080039f0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80039f0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f2:	4a3e      	ldr	r2, [pc, #248]	; (8003aec <TIM_Base_SetConfig+0xfc>)
 80039f4:	4290      	cmp	r0, r2
 80039f6:	d022      	beq.n	8003a3e <TIM_Base_SetConfig+0x4e>
 80039f8:	4a3d      	ldr	r2, [pc, #244]	; (8003af0 <TIM_Base_SetConfig+0x100>)
 80039fa:	4290      	cmp	r0, r2
 80039fc:	d038      	beq.n	8003a70 <TIM_Base_SetConfig+0x80>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fe:	4a3d      	ldr	r2, [pc, #244]	; (8003af4 <TIM_Base_SetConfig+0x104>)
 8003a00:	4290      	cmp	r0, r2
 8003a02:	d03a      	beq.n	8003a7a <TIM_Base_SetConfig+0x8a>
 8003a04:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <TIM_Base_SetConfig+0x108>)
 8003a06:	4290      	cmp	r0, r2
 8003a08:	d053      	beq.n	8003ab2 <TIM_Base_SetConfig+0xc2>
 8003a0a:	4a3c      	ldr	r2, [pc, #240]	; (8003afc <TIM_Base_SetConfig+0x10c>)
 8003a0c:	4290      	cmp	r0, r2
 8003a0e:	d042      	beq.n	8003a96 <TIM_Base_SetConfig+0xa6>
 8003a10:	4a3b      	ldr	r2, [pc, #236]	; (8003b00 <TIM_Base_SetConfig+0x110>)
 8003a12:	4290      	cmp	r0, r2
 8003a14:	d05b      	beq.n	8003ace <TIM_Base_SetConfig+0xde>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	4393      	bics	r3, r2
 8003a1a:	694a      	ldr	r2, [r1, #20]
 8003a1c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003a1e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a20:	688b      	ldr	r3, [r1, #8]
 8003a22:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003a24:	680b      	ldr	r3, [r1, #0]
 8003a26:	6283      	str	r3, [r0, #40]	; 0x28
 8003a28:	e01f      	b.n	8003a6a <TIM_Base_SetConfig+0x7a>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a2a:	4b33      	ldr	r3, [pc, #204]	; (8003af8 <TIM_Base_SetConfig+0x108>)
 8003a2c:	4298      	cmp	r0, r3
 8003a2e:	d01a      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <TIM_Base_SetConfig+0x10c>)
 8003a32:	4298      	cmp	r0, r3
 8003a34:	d017      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <TIM_Base_SetConfig+0x110>)
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d014      	beq.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003a3c:	e015      	b.n	8003a6a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a3e:	2270      	movs	r2, #112	; 0x70
 8003a40:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003a42:	684a      	ldr	r2, [r1, #4]
 8003a44:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	4a2f      	ldr	r2, [pc, #188]	; (8003b04 <TIM_Base_SetConfig+0x114>)
 8003a48:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4a:	68ca      	ldr	r2, [r1, #12]
 8003a4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	4393      	bics	r3, r2
 8003a52:	694a      	ldr	r2, [r1, #20]
 8003a54:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a56:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a58:	688b      	ldr	r3, [r1, #8]
 8003a5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003a5c:	680b      	ldr	r3, [r1, #0]
 8003a5e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a60:	4b22      	ldr	r3, [pc, #136]	; (8003aec <TIM_Base_SetConfig+0xfc>)
 8003a62:	4298      	cmp	r0, r3
 8003a64:	d1e1      	bne.n	8003a2a <TIM_Base_SetConfig+0x3a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a66:	690b      	ldr	r3, [r1, #16]
 8003a68:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	6143      	str	r3, [r0, #20]
}
 8003a6e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a70:	2270      	movs	r2, #112	; 0x70
 8003a72:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003a74:	684a      	ldr	r2, [r1, #4]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	e7e5      	b.n	8003a46 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7a:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <TIM_Base_SetConfig+0x114>)
 8003a7c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a7e:	68ca      	ldr	r2, [r1, #12]
 8003a80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a82:	2280      	movs	r2, #128	; 0x80
 8003a84:	4393      	bics	r3, r2
 8003a86:	694a      	ldr	r2, [r1, #20]
 8003a88:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003a8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8c:	688b      	ldr	r3, [r1, #8]
 8003a8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003a90:	680b      	ldr	r3, [r1, #0]
 8003a92:	6283      	str	r3, [r0, #40]	; 0x28
 8003a94:	e7e9      	b.n	8003a6a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a96:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <TIM_Base_SetConfig+0x114>)
 8003a98:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	68ca      	ldr	r2, [r1, #12]
 8003a9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9e:	2280      	movs	r2, #128	; 0x80
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	694a      	ldr	r2, [r1, #20]
 8003aa4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003aa6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa8:	688b      	ldr	r3, [r1, #8]
 8003aaa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003aac:	680b      	ldr	r3, [r1, #0]
 8003aae:	6283      	str	r3, [r0, #40]	; 0x28
 8003ab0:	e7d9      	b.n	8003a66 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <TIM_Base_SetConfig+0x114>)
 8003ab4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab6:	68ca      	ldr	r2, [r1, #12]
 8003ab8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	4393      	bics	r3, r2
 8003abe:	694a      	ldr	r2, [r1, #20]
 8003ac0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003ac2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	688b      	ldr	r3, [r1, #8]
 8003ac6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003ac8:	680b      	ldr	r3, [r1, #0]
 8003aca:	6283      	str	r3, [r0, #40]	; 0x28
 8003acc:	e7cb      	b.n	8003a66 <TIM_Base_SetConfig+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ace:	4a0d      	ldr	r2, [pc, #52]	; (8003b04 <TIM_Base_SetConfig+0x114>)
 8003ad0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad2:	68ca      	ldr	r2, [r1, #12]
 8003ad4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	4393      	bics	r3, r2
 8003ada:	694a      	ldr	r2, [r1, #20]
 8003adc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003ade:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae0:	688b      	ldr	r3, [r1, #8]
 8003ae2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003ae4:	680b      	ldr	r3, [r1, #0]
 8003ae6:	6283      	str	r3, [r0, #40]	; 0x28
 8003ae8:	e7bd      	b.n	8003a66 <TIM_Base_SetConfig+0x76>
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40002000 	.word	0x40002000
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800
 8003b04:	fffffcff 	.word	0xfffffcff

08003b08 <HAL_TIM_Base_Init>:
{
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8003b0c:	d014      	beq.n	8003b38 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003b0e:	233d      	movs	r3, #61	; 0x3d
 8003b10:	5cc3      	ldrb	r3, [r0, r3]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8003b16:	253d      	movs	r5, #61	; 0x3d
 8003b18:	2302      	movs	r3, #2
 8003b1a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1c:	1d21      	adds	r1, r4, #4
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	f7ff ff66 	bl	80039f0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003b24:	2301      	movs	r3, #1
 8003b26:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003b28:	2000      	movs	r0, #0
}
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	333c      	adds	r3, #60	; 0x3c
 8003b30:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003b32:	f000 fe49 	bl	80047c8 <HAL_TIM_Base_MspInit>
 8003b36:	e7ee      	b.n	8003b16 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8003b38:	2001      	movs	r0, #1
 8003b3a:	e7f6      	b.n	8003b2a <HAL_TIM_Base_Init+0x22>

08003b3c <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b3e:	4770      	bx	lr

08003b40 <EE_VerifyPageFullyErased>:
{
  uint32_t readstatus = 1;
  uint16_t addressvalue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <EE_VerifyPageFullyErased+0x34>)
 8003b42:	4298      	cmp	r0, r3
 8003b44:	d812      	bhi.n	8003b6c <EE_VerifyPageFullyErased+0x2c>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8003b46:	8803      	ldrh	r3, [r0, #0]
 8003b48:	b29b      	uxth	r3, r3

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8003b4a:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <EE_VerifyPageFullyErased+0x38>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10f      	bne.n	8003b70 <EE_VerifyPageFullyErased+0x30>
  while (Address <= PAGE0_END_ADDRESS)
 8003b50:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <EE_VerifyPageFullyErased+0x34>)
    if (addressvalue != ERASED)
 8003b52:	4909      	ldr	r1, [pc, #36]	; (8003b78 <EE_VerifyPageFullyErased+0x38>)
      readstatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 8003b54:	3004      	adds	r0, #4
  while (Address <= PAGE0_END_ADDRESS)
 8003b56:	4290      	cmp	r0, r2
 8003b58:	d805      	bhi.n	8003b66 <EE_VerifyPageFullyErased+0x26>
    addressvalue = (*(__IO uint16_t*)Address);
 8003b5a:	8803      	ldrh	r3, [r0, #0]
 8003b5c:	b29b      	uxth	r3, r3
    if (addressvalue != ERASED)
 8003b5e:	428b      	cmp	r3, r1
 8003b60:	d0f8      	beq.n	8003b54 <EE_VerifyPageFullyErased+0x14>
      readstatus = 0;
 8003b62:	2000      	movs	r0, #0
 8003b64:	e000      	b.n	8003b68 <EE_VerifyPageFullyErased+0x28>
  uint32_t readstatus = 1;
 8003b66:	2001      	movs	r0, #1
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8003b68:	b280      	uxth	r0, r0
}
 8003b6a:	4770      	bx	lr
  uint32_t readstatus = 1;
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	e7fb      	b.n	8003b68 <EE_VerifyPageFullyErased+0x28>
      readstatus = 0;
 8003b70:	2000      	movs	r0, #0
 8003b72:	e7f9      	b.n	8003b68 <EE_VerifyPageFullyErased+0x28>
 8003b74:	0800f3ff 	.word	0x0800f3ff
 8003b78:	0000ffff 	.word	0x0000ffff

08003b7c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8003b7c:	b530      	push	{r4, r5, lr}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	0005      	movs	r5, r0
  HAL_StatusTypeDef flashstatus = HAL_OK;
  __IO uint16_t validpage = PAGE0;
 8003b82:	2200      	movs	r2, #0
 8003b84:	466b      	mov	r3, sp
 8003b86:	80da      	strh	r2, [r3, #6]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003b88:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <EE_VerifyPageFullWriteVariable+0xa8>)
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003b8e:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <EE_VerifyPageFullWriteVariable+0xac>)
 8003b90:	8812      	ldrh	r2, [r2, #0]
 8003b92:	b292      	uxth	r2, r2
      if (pagestatus1 == VALID_PAGE)
 8003b94:	2a00      	cmp	r2, #0
 8003b96:	d12d      	bne.n	8003bf4 <EE_VerifyPageFullWriteVariable+0x78>
        if (pagestatus0 == RECEIVE_DATA)
 8003b98:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <EE_VerifyPageFullWriteVariable+0xb0>)
 8003b9a:	4694      	mov	ip, r2
 8003b9c:	4463      	add	r3, ip
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	4193      	sbcs	r3, r2
          return PAGE1;         /* Page1 valid */
 8003ba2:	b298      	uxth	r0, r3
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8003ba4:	466b      	mov	r3, sp
 8003ba6:	1d9a      	adds	r2, r3, #6
 8003ba8:	80d8      	strh	r0, [r3, #6]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8003baa:	88db      	ldrh	r3, [r3, #6]
 8003bac:	b29b      	uxth	r3, r3
  {
    return  NO_VALID_PAGE;
 8003bae:	20ab      	movs	r0, #171	; 0xab
  if (validpage == NO_VALID_PAGE)
 8003bb0:	2bab      	cmp	r3, #171	; 0xab
 8003bb2:	d032      	beq.n	8003c1a <EE_VerifyPageFullWriteVariable+0x9e>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	8814      	ldrh	r4, [r2, #0]
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <EE_VerifyPageFullWriteVariable+0xb4>)
 8003bba:	4694      	mov	ip, r2
 8003bbc:	4464      	add	r4, ip
 8003bbe:	02a4      	lsls	r4, r4, #10

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8003bc0:	8818      	ldrh	r0, [r3, #0]
 8003bc2:	0280      	lsls	r0, r0, #10
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <EE_VerifyPageFullWriteVariable+0xb8>)
 8003bc6:	469c      	mov	ip, r3
 8003bc8:	4460      	add	r0, ip

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8003bca:	4284      	cmp	r4, r0
 8003bcc:	d227      	bcs.n	8003c1e <EE_VerifyPageFullWriteVariable+0xa2>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	d005      	beq.n	8003be0 <EE_VerifyPageFullWriteVariable+0x64>
      return flashstatus;
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8003bd4:	3404      	adds	r4, #4
  while (address < pageendaddress)
 8003bd6:	42a0      	cmp	r0, r4
 8003bd8:	d91e      	bls.n	8003c18 <EE_VerifyPageFullWriteVariable+0x9c>
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	d1f9      	bne.n	8003bd4 <EE_VerifyPageFullWriteVariable+0x58>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8003be0:	000a      	movs	r2, r1
 8003be2:	2300      	movs	r3, #0
 8003be4:	0021      	movs	r1, r4
 8003be6:	2001      	movs	r0, #1
 8003be8:	f7fe febe 	bl	8002968 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d00b      	beq.n	8003c08 <EE_VerifyPageFullWriteVariable+0x8c>
        return flashstatus;
 8003bf0:	b280      	uxth	r0, r0
 8003bf2:	e012      	b.n	8003c1a <EE_VerifyPageFullWriteVariable+0x9e>
        return NO_VALID_PAGE;   /* No valid Page */
 8003bf4:	20ab      	movs	r0, #171	; 0xab
      else if (pagestatus0 == VALID_PAGE)
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1d4      	bne.n	8003ba4 <EE_VerifyPageFullWriteVariable+0x28>
        if (pagestatus1 == RECEIVE_DATA)
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <EE_VerifyPageFullWriteVariable+0xb0>)
 8003bfc:	469c      	mov	ip, r3
 8003bfe:	4462      	add	r2, ip
 8003c00:	4250      	negs	r0, r2
 8003c02:	4150      	adcs	r0, r2
          return PAGE0;         /* Page0 valid */
 8003c04:	b280      	uxth	r0, r0
 8003c06:	e7cd      	b.n	8003ba4 <EE_VerifyPageFullWriteVariable+0x28>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 8003c08:	1ca1      	adds	r1, r4, #2
 8003c0a:	002a      	movs	r2, r5
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f7fe feaa 	bl	8002968 <HAL_FLASH_Program>
      return flashstatus;
 8003c14:	b280      	uxth	r0, r0
 8003c16:	e000      	b.n	8003c1a <EE_VerifyPageFullWriteVariable+0x9e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8003c18:	2080      	movs	r0, #128	; 0x80
}
 8003c1a:	b003      	add	sp, #12
 8003c1c:	bd30      	pop	{r4, r5, pc}
  return PAGE_FULL;
 8003c1e:	2080      	movs	r0, #128	; 0x80
 8003c20:	e7fb      	b.n	8003c1a <EE_VerifyPageFullWriteVariable+0x9e>
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	0800f000 	.word	0x0800f000
 8003c28:	0800f400 	.word	0x0800f400
 8003c2c:	ffff1112 	.word	0xffff1112
 8003c30:	0002003c 	.word	0x0002003c
 8003c34:	0800f3ff 	.word	0x0800f3ff

08003c38 <EE_Format>:
{
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	b084      	sub	sp, #16
  uint32_t page_error = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9303      	str	r3, [sp, #12]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003c40:	9300      	str	r3, [sp, #0]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8003c42:	4812      	ldr	r0, [pc, #72]	; (8003c8c <EE_Format+0x54>)
 8003c44:	9001      	str	r0, [sp, #4]
  s_eraseinit.NbPages     = 1;
 8003c46:	3301      	adds	r3, #1
 8003c48:	9302      	str	r3, [sp, #8]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003c4a:	f7ff ff79 	bl	8003b40 <EE_VerifyPageFullyErased>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d105      	bne.n	8003c5e <EE_Format+0x26>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8003c52:	a903      	add	r1, sp, #12
 8003c54:	4668      	mov	r0, sp
 8003c56:	f7fe ff0f 	bl	8002a78 <HAL_FLASHEx_Erase>
 8003c5a:	1e04      	subs	r4, r0, #0
    if (flashstatus != HAL_OK)
 8003c5c:	d107      	bne.n	8003c6e <EE_Format+0x36>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2300      	movs	r3, #0
 8003c62:	490a      	ldr	r1, [pc, #40]	; (8003c8c <EE_Format+0x54>)
 8003c64:	2001      	movs	r0, #1
 8003c66:	f7fe fe7f 	bl	8002968 <HAL_FLASH_Program>
 8003c6a:	1e04      	subs	r4, r0, #0
  if (flashstatus != HAL_OK)
 8003c6c:	d002      	beq.n	8003c74 <EE_Format+0x3c>
}
 8003c6e:	0020      	movs	r0, r4
 8003c70:	b004      	add	sp, #16
 8003c72:	bd10      	pop	{r4, pc}
  s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8003c74:	4806      	ldr	r0, [pc, #24]	; (8003c90 <EE_Format+0x58>)
 8003c76:	9001      	str	r0, [sp, #4]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003c78:	f7ff ff62 	bl	8003b40 <EE_VerifyPageFullyErased>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d1f6      	bne.n	8003c6e <EE_Format+0x36>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8003c80:	a903      	add	r1, sp, #12
 8003c82:	4668      	mov	r0, sp
 8003c84:	f7fe fef8 	bl	8002a78 <HAL_FLASHEx_Erase>
 8003c88:	0004      	movs	r4, r0
 8003c8a:	e7f0      	b.n	8003c6e <EE_Format+0x36>
 8003c8c:	0800f000 	.word	0x0800f000
 8003c90:	0800f400 	.word	0x0800f400

08003c94 <EE_ReadVariable>:
{
 8003c94:	b510      	push	{r4, lr}
 8003c96:	b082      	sub	sp, #8
  __IO uint16_t validpage = PAGE0;
 8003c98:	2200      	movs	r2, #0
 8003c9a:	466b      	mov	r3, sp
 8003c9c:	80da      	strh	r2, [r3, #6]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <EE_ReadVariable+0x7c>)
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <EE_ReadVariable+0x80>)
 8003ca6:	8812      	ldrh	r2, [r2, #0]
 8003ca8:	b292      	uxth	r2, r2
      if (pagestatus0 == VALID_PAGE)
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <EE_ReadVariable+0x20>
      else if (pagestatus1 == VALID_PAGE)
 8003cae:	2a00      	cmp	r2, #0
 8003cb0:	d027      	beq.n	8003d02 <EE_ReadVariable+0x6e>
        return NO_VALID_PAGE ;  /* No valid Page */
 8003cb2:	23ab      	movs	r3, #171	; 0xab
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003cb4:	466a      	mov	r2, sp
 8003cb6:	80d3      	strh	r3, [r2, #6]
  if (validpage == NO_VALID_PAGE)
 8003cb8:	88d3      	ldrh	r3, [r2, #6]
 8003cba:	b29b      	uxth	r3, r3
    return  NO_VALID_PAGE;
 8003cbc:	22ab      	movs	r2, #171	; 0xab
  if (validpage == NO_VALID_PAGE)
 8003cbe:	2bab      	cmp	r3, #171	; 0xab
 8003cc0:	d01c      	beq.n	8003cfc <EE_ReadVariable+0x68>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8003cc2:	466b      	mov	r3, sp
 8003cc4:	88dc      	ldrh	r4, [r3, #6]
 8003cc6:	3306      	adds	r3, #6
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	029b      	lsls	r3, r3, #10
 8003ccc:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <EE_ReadVariable+0x84>)
 8003cce:	4694      	mov	ip, r2
 8003cd0:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8003cd2:	02a4      	lsls	r4, r4, #10
  while (address > (PageStartAddress + 2))
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <EE_ReadVariable+0x88>)
 8003cd6:	4694      	mov	ip, r2
 8003cd8:	4464      	add	r4, ip
 8003cda:	429c      	cmp	r4, r3
 8003cdc:	d215      	bcs.n	8003d0a <EE_ReadVariable+0x76>
    addressvalue = (*(__IO uint16_t*)address);
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	b292      	uxth	r2, r2
    if (addressvalue == VirtAddress)
 8003ce2:	4290      	cmp	r0, r2
 8003ce4:	d006      	beq.n	8003cf4 <EE_ReadVariable+0x60>
      address = address - 4;
 8003ce6:	3b04      	subs	r3, #4
  while (address > (PageStartAddress + 2))
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d20c      	bcs.n	8003d06 <EE_ReadVariable+0x72>
    addressvalue = (*(__IO uint16_t*)address);
 8003cec:	881a      	ldrh	r2, [r3, #0]
 8003cee:	b292      	uxth	r2, r2
    if (addressvalue == VirtAddress)
 8003cf0:	4282      	cmp	r2, r0
 8003cf2:	d1f8      	bne.n	8003ce6 <EE_ReadVariable+0x52>
      *Data = (*(__IO uint16_t*)(address - 2));
 8003cf4:	3b02      	subs	r3, #2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	800b      	strh	r3, [r1, #0]
      readstatus = 0;
 8003cfa:	2200      	movs	r2, #0
}
 8003cfc:	0010      	movs	r0, r2
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd10      	pop	{r4, pc}
        return PAGE1;           /* Page1 valid */
 8003d02:	2301      	movs	r3, #1
 8003d04:	e7d6      	b.n	8003cb4 <EE_ReadVariable+0x20>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8003d06:	2201      	movs	r2, #1
 8003d08:	e7f8      	b.n	8003cfc <EE_ReadVariable+0x68>
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	e7f6      	b.n	8003cfc <EE_ReadVariable+0x68>
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	0800f000 	.word	0x0800f000
 8003d14:	0800f400 	.word	0x0800f400
 8003d18:	0800f3fe 	.word	0x0800f3fe
 8003d1c:	0800f002 	.word	0x0800f002

08003d20 <EE_Init>:
{
 8003d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d22:	46d6      	mov	lr, sl
 8003d24:	464f      	mov	r7, r9
 8003d26:	4646      	mov	r6, r8
 8003d28:	b5c0      	push	{r6, r7, lr}
 8003d2a:	b086      	sub	sp, #24
  uint32_t page_error = 0;
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	9205      	str	r2, [sp, #20]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003d30:	4b8f      	ldr	r3, [pc, #572]	; (8003f70 <EE_Init+0x250>)
 8003d32:	881f      	ldrh	r7, [r3, #0]
 8003d34:	b2bf      	uxth	r7, r7
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003d36:	498f      	ldr	r1, [pc, #572]	; (8003f74 <EE_Init+0x254>)
 8003d38:	880c      	ldrh	r4, [r1, #0]
 8003d3a:	b2a4      	uxth	r4, r4
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003d3c:	9202      	str	r2, [sp, #8]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8003d3e:	9303      	str	r3, [sp, #12]
  s_eraseinit.NbPages     = 1;
 8003d40:	2301      	movs	r3, #1
 8003d42:	9304      	str	r3, [sp, #16]
  switch (pagestatus0)
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <EE_Init+0x258>)
 8003d46:	429f      	cmp	r7, r3
 8003d48:	d044      	beq.n	8003dd4 <EE_Init+0xb4>
 8003d4a:	4b8c      	ldr	r3, [pc, #560]	; (8003f7c <EE_Init+0x25c>)
 8003d4c:	429f      	cmp	r7, r3
 8003d4e:	d00f      	beq.n	8003d70 <EE_Init+0x50>
 8003d50:	2f00      	cmp	r7, #0
 8003d52:	d100      	bne.n	8003d56 <EE_Init+0x36>
 8003d54:	e0aa      	b.n	8003eac <EE_Init+0x18c>
      flashstatus = EE_Format();
 8003d56:	f7ff ff6f 	bl	8003c38 <EE_Format>
  return HAL_OK;
 8003d5a:	2400      	movs	r4, #0
      if (flashstatus != HAL_OK)
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d000      	beq.n	8003d62 <EE_Init+0x42>
        return flashstatus;
 8003d60:	b284      	uxth	r4, r0
}
 8003d62:	0020      	movs	r0, r4
 8003d64:	b006      	add	sp, #24
 8003d66:	bc1c      	pop	{r2, r3, r4}
 8003d68:	4690      	mov	r8, r2
 8003d6a:	4699      	mov	r9, r3
 8003d6c:	46a2      	mov	sl, r4
 8003d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8003d70:	2c00      	cmp	r4, #0
 8003d72:	d009      	beq.n	8003d88 <EE_Init+0x68>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8003d74:	4b80      	ldr	r3, [pc, #512]	; (8003f78 <EE_Init+0x258>)
 8003d76:	429c      	cmp	r4, r3
 8003d78:	d014      	beq.n	8003da4 <EE_Init+0x84>
        flashstatus = EE_Format();
 8003d7a:	f7ff ff5d 	bl	8003c38 <EE_Format>
  return HAL_OK;
 8003d7e:	2400      	movs	r4, #0
        if (flashstatus != HAL_OK)
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d0ee      	beq.n	8003d62 <EE_Init+0x42>
          return flashstatus;
 8003d84:	b284      	uxth	r4, r0
 8003d86:	e7ec      	b.n	8003d62 <EE_Init+0x42>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003d88:	4879      	ldr	r0, [pc, #484]	; (8003f70 <EE_Init+0x250>)
 8003d8a:	f7ff fed9 	bl	8003b40 <EE_VerifyPageFullyErased>
 8003d8e:	1e05      	subs	r5, r0, #0
 8003d90:	d1e7      	bne.n	8003d62 <EE_Init+0x42>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003d92:	a905      	add	r1, sp, #20
 8003d94:	a802      	add	r0, sp, #8
 8003d96:	f7fe fe6f 	bl	8002a78 <HAL_FLASHEx_Erase>
  return HAL_OK;
 8003d9a:	002c      	movs	r4, r5
          if (flashstatus != HAL_OK)
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d0e0      	beq.n	8003d62 <EE_Init+0x42>
            return flashstatus;
 8003da0:	b284      	uxth	r4, r0
 8003da2:	e7de      	b.n	8003d62 <EE_Init+0x42>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003da4:	4872      	ldr	r0, [pc, #456]	; (8003f70 <EE_Init+0x250>)
 8003da6:	f7ff fecb 	bl	8003b40 <EE_VerifyPageFullyErased>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d105      	bne.n	8003dba <EE_Init+0x9a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003dae:	a905      	add	r1, sp, #20
 8003db0:	a802      	add	r0, sp, #8
 8003db2:	f7fe fe61 	bl	8002a78 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d10a      	bne.n	8003dd0 <EE_Init+0xb0>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	496d      	ldr	r1, [pc, #436]	; (8003f74 <EE_Init+0x254>)
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f7fe fdd1 	bl	8002968 <HAL_FLASH_Program>
  return HAL_OK;
 8003dc6:	2400      	movs	r4, #0
        if (flashstatus != HAL_OK)
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d0ca      	beq.n	8003d62 <EE_Init+0x42>
          return flashstatus;
 8003dcc:	b284      	uxth	r4, r0
 8003dce:	e7c8      	b.n	8003d62 <EE_Init+0x42>
            return flashstatus;
 8003dd0:	b284      	uxth	r4, r0
 8003dd2:	e7c6      	b.n	8003d62 <EE_Init+0x42>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8003dd4:	2c00      	cmp	r4, #0
 8003dd6:	d144      	bne.n	8003e62 <EE_Init+0x142>
 8003dd8:	4f69      	ldr	r7, [pc, #420]	; (8003f80 <EE_Init+0x260>)
 8003dda:	2500      	movs	r5, #0
 8003ddc:	2601      	movs	r6, #1
 8003dde:	4276      	negs	r6, r6
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8003de0:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <EE_Init+0x264>)
 8003de2:	4698      	mov	r8, r3
 8003de4:	e005      	b.n	8003df2 <EE_Init+0xd2>
            x = varidx;
 8003de6:	b22e      	sxth	r6, r5
 8003de8:	e00b      	b.n	8003e02 <EE_Init+0xe2>
 8003dea:	3501      	adds	r5, #1
 8003dec:	3702      	adds	r7, #2
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8003dee:	2d10      	cmp	r5, #16
 8003df0:	d018      	beq.n	8003e24 <EE_Init+0x104>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8003df2:	4643      	mov	r3, r8
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	002a      	movs	r2, r5
 8003dfa:	9701      	str	r7, [sp, #4]
 8003dfc:	8838      	ldrh	r0, [r7, #0]
 8003dfe:	4283      	cmp	r3, r0
 8003e00:	d0f1      	beq.n	8003de6 <EE_Init+0xc6>
          if (varidx != x)
 8003e02:	42b2      	cmp	r2, r6
 8003e04:	d0f1      	beq.n	8003dea <EE_Init+0xca>
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8003e06:	4960      	ldr	r1, [pc, #384]	; (8003f88 <EE_Init+0x268>)
 8003e08:	f7ff ff44 	bl	8003c94 <EE_ReadVariable>
            if (readstatus != 0x1)
 8003e0c:	2801      	cmp	r0, #1
 8003e0e:	d0ec      	beq.n	8003dea <EE_Init+0xca>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8003e10:	4b5d      	ldr	r3, [pc, #372]	; (8003f88 <EE_Init+0x268>)
 8003e12:	8819      	ldrh	r1, [r3, #0]
 8003e14:	9b01      	ldr	r3, [sp, #4]
 8003e16:	8818      	ldrh	r0, [r3, #0]
 8003e18:	f7ff feb0 	bl	8003b7c <EE_VerifyPageFullWriteVariable>
              if (eepromstatus != HAL_OK)
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d0e4      	beq.n	8003dea <EE_Init+0xca>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8003e20:	0004      	movs	r4, r0
 8003e22:	e79e      	b.n	8003d62 <EE_Init+0x42>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003e24:	2200      	movs	r2, #0
 8003e26:	2300      	movs	r3, #0
 8003e28:	4951      	ldr	r1, [pc, #324]	; (8003f70 <EE_Init+0x250>)
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f7fe fd9c 	bl	8002968 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d001      	beq.n	8003e38 <EE_Init+0x118>
          return flashstatus;
 8003e34:	b284      	uxth	r4, r0
 8003e36:	e794      	b.n	8003d62 <EE_Init+0x42>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9302      	str	r3, [sp, #8]
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8003e3c:	484d      	ldr	r0, [pc, #308]	; (8003f74 <EE_Init+0x254>)
 8003e3e:	9003      	str	r0, [sp, #12]
        s_eraseinit.NbPages     = 1;
 8003e40:	3301      	adds	r3, #1
 8003e42:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003e44:	f7ff fe7c 	bl	8003b40 <EE_VerifyPageFullyErased>
 8003e48:	1e05      	subs	r5, r0, #0
 8003e4a:	d000      	beq.n	8003e4e <EE_Init+0x12e>
 8003e4c:	e789      	b.n	8003d62 <EE_Init+0x42>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003e4e:	a905      	add	r1, sp, #20
 8003e50:	a802      	add	r0, sp, #8
 8003e52:	f7fe fe11 	bl	8002a78 <HAL_FLASHEx_Erase>
  return HAL_OK;
 8003e56:	002c      	movs	r4, r5
          if (flashstatus != HAL_OK)
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d100      	bne.n	8003e5e <EE_Init+0x13e>
 8003e5c:	e781      	b.n	8003d62 <EE_Init+0x42>
            return flashstatus;
 8003e5e:	b284      	uxth	r4, r0
 8003e60:	e77f      	b.n	8003d62 <EE_Init+0x42>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8003e62:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <EE_Init+0x25c>)
 8003e64:	429c      	cmp	r4, r3
 8003e66:	d007      	beq.n	8003e78 <EE_Init+0x158>
        flashstatus = EE_Format();
 8003e68:	f7ff fee6 	bl	8003c38 <EE_Format>
  return HAL_OK;
 8003e6c:	2400      	movs	r4, #0
        if (flashstatus != HAL_OK)
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d100      	bne.n	8003e74 <EE_Init+0x154>
 8003e72:	e776      	b.n	8003d62 <EE_Init+0x42>
          return flashstatus;
 8003e74:	b284      	uxth	r4, r0
 8003e76:	e774      	b.n	8003d62 <EE_Init+0x42>
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8003e78:	483e      	ldr	r0, [pc, #248]	; (8003f74 <EE_Init+0x254>)
 8003e7a:	9003      	str	r0, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003e7c:	f7ff fe60 	bl	8003b40 <EE_VerifyPageFullyErased>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d105      	bne.n	8003e90 <EE_Init+0x170>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003e84:	a905      	add	r1, sp, #20
 8003e86:	a802      	add	r0, sp, #8
 8003e88:	f7fe fdf6 	bl	8002a78 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d10b      	bne.n	8003ea8 <EE_Init+0x188>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2300      	movs	r3, #0
 8003e94:	4936      	ldr	r1, [pc, #216]	; (8003f70 <EE_Init+0x250>)
 8003e96:	2001      	movs	r0, #1
 8003e98:	f7fe fd66 	bl	8002968 <HAL_FLASH_Program>
  return HAL_OK;
 8003e9c:	2400      	movs	r4, #0
        if (flashstatus != HAL_OK)
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d100      	bne.n	8003ea4 <EE_Init+0x184>
 8003ea2:	e75e      	b.n	8003d62 <EE_Init+0x42>
          return flashstatus;
 8003ea4:	b284      	uxth	r4, r0
 8003ea6:	e75c      	b.n	8003d62 <EE_Init+0x42>
            return flashstatus;
 8003ea8:	b284      	uxth	r4, r0
 8003eaa:	e75a      	b.n	8003d62 <EE_Init+0x42>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	d00a      	beq.n	8003ec6 <EE_Init+0x1a6>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8003eb0:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <EE_Init+0x25c>)
 8003eb2:	429c      	cmp	r4, r3
 8003eb4:	d00e      	beq.n	8003ed4 <EE_Init+0x1b4>
 8003eb6:	4e32      	ldr	r6, [pc, #200]	; (8003f80 <EE_Init+0x260>)
 8003eb8:	2500      	movs	r5, #0
 8003eba:	2301      	movs	r3, #1
 8003ebc:	425b      	negs	r3, r3
 8003ebe:	4699      	mov	r9, r3
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8003ec0:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <EE_Init+0x26c>)
 8003ec2:	469a      	mov	sl, r3
 8003ec4:	e01e      	b.n	8003f04 <EE_Init+0x1e4>
        flashstatus = EE_Format();
 8003ec6:	f7ff feb7 	bl	8003c38 <EE_Format>
        if (flashstatus != HAL_OK)
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d100      	bne.n	8003ed0 <EE_Init+0x1b0>
 8003ece:	e748      	b.n	8003d62 <EE_Init+0x42>
          return flashstatus;
 8003ed0:	b284      	uxth	r4, r0
 8003ed2:	e746      	b.n	8003d62 <EE_Init+0x42>
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8003ed4:	4827      	ldr	r0, [pc, #156]	; (8003f74 <EE_Init+0x254>)
 8003ed6:	9003      	str	r0, [sp, #12]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003ed8:	f7ff fe32 	bl	8003b40 <EE_VerifyPageFullyErased>
 8003edc:	1e04      	subs	r4, r0, #0
 8003ede:	d001      	beq.n	8003ee4 <EE_Init+0x1c4>
  return HAL_OK;
 8003ee0:	003c      	movs	r4, r7
 8003ee2:	e73e      	b.n	8003d62 <EE_Init+0x42>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003ee4:	a905      	add	r1, sp, #20
 8003ee6:	a802      	add	r0, sp, #8
 8003ee8:	f7fe fdc6 	bl	8002a78 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d100      	bne.n	8003ef2 <EE_Init+0x1d2>
 8003ef0:	e737      	b.n	8003d62 <EE_Init+0x42>
            return flashstatus;
 8003ef2:	b284      	uxth	r4, r0
 8003ef4:	e735      	b.n	8003d62 <EE_Init+0x42>
            x = varidx;
 8003ef6:	b22b      	sxth	r3, r5
 8003ef8:	4699      	mov	r9, r3
 8003efa:	e00b      	b.n	8003f14 <EE_Init+0x1f4>
 8003efc:	3501      	adds	r5, #1
 8003efe:	3602      	adds	r6, #2
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8003f00:	2d10      	cmp	r5, #16
 8003f02:	d016      	beq.n	8003f32 <EE_Init+0x212>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8003f04:	4653      	mov	r3, sl
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	002a      	movs	r2, r5
 8003f0c:	0034      	movs	r4, r6
 8003f0e:	8830      	ldrh	r0, [r6, #0]
 8003f10:	4283      	cmp	r3, r0
 8003f12:	d0f0      	beq.n	8003ef6 <EE_Init+0x1d6>
          if (varidx != x)
 8003f14:	454a      	cmp	r2, r9
 8003f16:	d0f1      	beq.n	8003efc <EE_Init+0x1dc>
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8003f18:	491b      	ldr	r1, [pc, #108]	; (8003f88 <EE_Init+0x268>)
 8003f1a:	f7ff febb 	bl	8003c94 <EE_ReadVariable>
            if (readstatus != 0x1)
 8003f1e:	2801      	cmp	r0, #1
 8003f20:	d0ec      	beq.n	8003efc <EE_Init+0x1dc>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <EE_Init+0x268>)
 8003f24:	8819      	ldrh	r1, [r3, #0]
 8003f26:	8820      	ldrh	r0, [r4, #0]
 8003f28:	f7ff fe28 	bl	8003b7c <EE_VerifyPageFullWriteVariable>
 8003f2c:	1e04      	subs	r4, r0, #0
              if (eepromstatus != HAL_OK)
 8003f2e:	d0e5      	beq.n	8003efc <EE_Init+0x1dc>
 8003f30:	e717      	b.n	8003d62 <EE_Init+0x42>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8003f32:	2200      	movs	r2, #0
 8003f34:	2300      	movs	r3, #0
 8003f36:	490f      	ldr	r1, [pc, #60]	; (8003f74 <EE_Init+0x254>)
 8003f38:	2001      	movs	r0, #1
 8003f3a:	f7fe fd15 	bl	8002968 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d001      	beq.n	8003f46 <EE_Init+0x226>
          return flashstatus;
 8003f42:	b284      	uxth	r4, r0
 8003f44:	e70d      	b.n	8003d62 <EE_Init+0x42>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003f46:	2300      	movs	r3, #0
 8003f48:	9302      	str	r3, [sp, #8]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 8003f4a:	4809      	ldr	r0, [pc, #36]	; (8003f70 <EE_Init+0x250>)
 8003f4c:	9003      	str	r0, [sp, #12]
        s_eraseinit.NbPages     = 1;
 8003f4e:	3301      	adds	r3, #1
 8003f50:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003f52:	f7ff fdf5 	bl	8003b40 <EE_VerifyPageFullyErased>
 8003f56:	1e04      	subs	r4, r0, #0
 8003f58:	d001      	beq.n	8003f5e <EE_Init+0x23e>
  return HAL_OK;
 8003f5a:	003c      	movs	r4, r7
 8003f5c:	e701      	b.n	8003d62 <EE_Init+0x42>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8003f5e:	a905      	add	r1, sp, #20
 8003f60:	a802      	add	r0, sp, #8
 8003f62:	f7fe fd89 	bl	8002a78 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d100      	bne.n	8003f6c <EE_Init+0x24c>
 8003f6a:	e6fa      	b.n	8003d62 <EE_Init+0x42>
            return flashstatus;
 8003f6c:	b284      	uxth	r4, r0
 8003f6e:	e6f8      	b.n	8003d62 <EE_Init+0x42>
 8003f70:	0800f000 	.word	0x0800f000
 8003f74:	0800f400 	.word	0x0800f400
 8003f78:	0000eeee 	.word	0x0000eeee
 8003f7c:	0000ffff 	.word	0x0000ffff
 8003f80:	20000028 	.word	0x20000028
 8003f84:	0800f006 	.word	0x0800f006
 8003f88:	2000006c 	.word	0x2000006c
 8003f8c:	0800f406 	.word	0x0800f406

08003f90 <EE_WriteVariable>:
{
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	46d6      	mov	lr, sl
 8003f94:	b500      	push	{lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	0004      	movs	r4, r0
 8003f9a:	000d      	movs	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003f9c:	f7ff fdee 	bl	8003b7c <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 8003fa0:	2880      	cmp	r0, #128	; 0x80
 8003fa2:	d003      	beq.n	8003fac <EE_WriteVariable+0x1c>
}
 8003fa4:	b006      	add	sp, #24
 8003fa6:	bc04      	pop	{r2}
 8003fa8:	4692      	mov	sl, r2
 8003faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	9302      	str	r3, [sp, #8]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <EE_WriteVariable+0xcc>)
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003fb6:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <EE_WriteVariable+0xd0>)
 8003fb8:	8812      	ldrh	r2, [r2, #0]
 8003fba:	b292      	uxth	r2, r2
      if (pagestatus0 == VALID_PAGE)
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <EE_WriteVariable+0x40>
    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8003fc0:	302b      	adds	r0, #43	; 0x2b
      else if (pagestatus1 == VALID_PAGE)
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d1ee      	bne.n	8003fa4 <EE_WriteVariable+0x14>
    oldpageid = PAGE1_BASE_ADDRESS;
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <EE_WriteVariable+0xd0>)
 8003fc8:	469a      	mov	sl, r3
    newpageaddress = PAGE0_BASE_ADDRESS;
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <EE_WriteVariable+0xcc>)
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	e003      	b.n	8003fd8 <EE_WriteVariable+0x48>
    oldpageid = PAGE0_BASE_ADDRESS;
 8003fd0:	4b22      	ldr	r3, [pc, #136]	; (800405c <EE_WriteVariable+0xcc>)
 8003fd2:	469a      	mov	sl, r3
    newpageaddress = PAGE1_BASE_ADDRESS;
 8003fd4:	4b22      	ldr	r3, [pc, #136]	; (8004060 <EE_WriteVariable+0xd0>)
 8003fd6:	9301      	str	r3, [sp, #4]
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8003fd8:	4a22      	ldr	r2, [pc, #136]	; (8004064 <EE_WriteVariable+0xd4>)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9901      	ldr	r1, [sp, #4]
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f7fe fcc2 	bl	8002968 <HAL_FLASH_Program>
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d001      	beq.n	8003fec <EE_WriteVariable+0x5c>
  {
    return flashstatus;
 8003fe8:	b280      	uxth	r0, r0
 8003fea:	e7db      	b.n	8003fa4 <EE_WriteVariable+0x14>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8003fec:	0029      	movs	r1, r5
 8003fee:	0020      	movs	r0, r4
 8003ff0:	f7ff fdc4 	bl	8003b7c <EE_VerifyPageFullWriteVariable>
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d1d5      	bne.n	8003fa4 <EE_WriteVariable+0x14>
 8003ff8:	4e1b      	ldr	r6, [pc, #108]	; (8004068 <EE_WriteVariable+0xd8>)
 8003ffa:	0035      	movs	r5, r6
 8003ffc:	3520      	adds	r5, #32
 8003ffe:	e002      	b.n	8004006 <EE_WriteVariable+0x76>
 8004000:	3602      	adds	r6, #2
  {
    return eepromstatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8004002:	42ae      	cmp	r6, r5
 8004004:	d00f      	beq.n	8004026 <EE_WriteVariable+0x96>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8004006:	8830      	ldrh	r0, [r6, #0]
 8004008:	4284      	cmp	r4, r0
 800400a:	d0f9      	beq.n	8004000 <EE_WriteVariable+0x70>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800400c:	4917      	ldr	r1, [pc, #92]	; (800406c <EE_WriteVariable+0xdc>)
 800400e:	f7ff fe41 	bl	8003c94 <EE_ReadVariable>
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 8004012:	2801      	cmp	r0, #1
 8004014:	d0f4      	beq.n	8004000 <EE_WriteVariable+0x70>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <EE_WriteVariable+0xdc>)
 8004018:	8819      	ldrh	r1, [r3, #0]
 800401a:	8830      	ldrh	r0, [r6, #0]
 800401c:	f7ff fdae 	bl	8003b7c <EE_VerifyPageFullWriteVariable>
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 8004020:	2800      	cmp	r0, #0
 8004022:	d0ed      	beq.n	8004000 <EE_WriteVariable+0x70>
 8004024:	e7be      	b.n	8003fa4 <EE_WriteVariable+0x14>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004026:	2300      	movs	r3, #0
 8004028:	9303      	str	r3, [sp, #12]
  s_eraseinit.PageAddress = oldpageid;
 800402a:	4653      	mov	r3, sl
 800402c:	9304      	str	r3, [sp, #16]
  s_eraseinit.NbPages     = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	9305      	str	r3, [sp, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8004032:	a902      	add	r1, sp, #8
 8004034:	a803      	add	r0, sp, #12
 8004036:	f7fe fd1f 	bl	8002a78 <HAL_FLASHEx_Erase>
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800403a:	2800      	cmp	r0, #0
 800403c:	d001      	beq.n	8004042 <EE_WriteVariable+0xb2>
  {
    return flashstatus;
 800403e:	b280      	uxth	r0, r0
 8004040:	e7b0      	b.n	8003fa4 <EE_WriteVariable+0x14>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8004042:	2200      	movs	r2, #0
 8004044:	2300      	movs	r3, #0
 8004046:	9901      	ldr	r1, [sp, #4]
 8004048:	2001      	movs	r0, #1
 800404a:	f7fe fc8d 	bl	8002968 <HAL_FLASH_Program>
 800404e:	0003      	movs	r3, r0
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8004050:	2000      	movs	r0, #0
  if (flashstatus != HAL_OK)
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0a6      	beq.n	8003fa4 <EE_WriteVariable+0x14>
    return flashstatus;
 8004056:	b298      	uxth	r0, r3
 8004058:	e7a4      	b.n	8003fa4 <EE_WriteVariable+0x14>
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	0800f000 	.word	0x0800f000
 8004060:	0800f400 	.word	0x0800f400
 8004064:	0000eeee 	.word	0x0000eeee
 8004068:	20000028 	.word	0x20000028
 800406c:	2000006c 	.word	0x2000006c

08004070 <Count>:
void Count   ();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void Count  ()
{
 8004070:	b570      	push	{r4, r5, r6, lr}
D1 = gTime.Minutes/10;
 8004072:	4c10      	ldr	r4, [pc, #64]	; (80040b4 <Count+0x44>)
 8004074:	7865      	ldrb	r5, [r4, #1]
 8004076:	210a      	movs	r1, #10
 8004078:	0028      	movs	r0, r5
 800407a:	f7fc f845 	bl	8000108 <__udivsi3>
 800407e:	b2c0      	uxtb	r0, r0
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <Count+0x48>)
 8004082:	7018      	strb	r0, [r3, #0]
D2 = gTime.Minutes%10;
 8004084:	210a      	movs	r1, #10
 8004086:	0028      	movs	r0, r5
 8004088:	f7fc f8c4 	bl	8000214 <__aeabi_uidivmod>
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <Count+0x4c>)
 8004090:	7019      	strb	r1, [r3, #0]
D3 = gTime.Seconds/10;
 8004092:	78a4      	ldrb	r4, [r4, #2]
 8004094:	210a      	movs	r1, #10
 8004096:	0020      	movs	r0, r4
 8004098:	f7fc f836 	bl	8000108 <__udivsi3>
 800409c:	b2c0      	uxtb	r0, r0
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <Count+0x50>)
 80040a0:	7018      	strb	r0, [r3, #0]
D4 = gTime.Seconds%10;
 80040a2:	210a      	movs	r1, #10
 80040a4:	0020      	movs	r0, r4
 80040a6:	f7fc f8b5 	bl	8000214 <__aeabi_uidivmod>
 80040aa:	b2c9      	uxtb	r1, r1
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <Count+0x54>)
 80040ae:	7019      	strb	r1, [r3, #0]

}
 80040b0:	bd70      	pop	{r4, r5, r6, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	2000010c 	.word	0x2000010c
 80040b8:	200001dc 	.word	0x200001dc
 80040bc:	20000120 	.word	0x20000120
 80040c0:	200000c4 	.word	0x200000c4
 80040c4:	20000144 	.word	0x20000144

080040c8 <get_time>:


void get_time(void)
{
 80040c8:	b510      	push	{r4, lr}

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80040ca:	4c06      	ldr	r4, [pc, #24]	; (80040e4 <get_time+0x1c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	4906      	ldr	r1, [pc, #24]	; (80040e8 <get_time+0x20>)
 80040d0:	0020      	movs	r0, r4
 80040d2:	f7ff fb83 	bl	80037dc <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80040d6:	2200      	movs	r2, #0
 80040d8:	4904      	ldr	r1, [pc, #16]	; (80040ec <get_time+0x24>)
 80040da:	0020      	movs	r0, r4
 80040dc:	f7ff fbaa 	bl	8003834 <HAL_RTC_GetDate>
}
 80040e0:	bd10      	pop	{r4, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	20000124 	.word	0x20000124
 80040e8:	2000010c 	.word	0x2000010c
 80040ec:	200000c0 	.word	0x200000c0

080040f0 <HAL_TIM_PeriodElapsedCallback>:
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b510      	push	{r4, lr}
 80040f2:	b082      	sub	sp, #8

if(htim->Instance == htim17.Instance)
 80040f4:	6802      	ldr	r2, [r0, #0]
 80040f6:	4b38      	ldr	r3, [pc, #224]	; (80041d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d001      	beq.n	8004102 <HAL_TIM_PeriodElapsedCallback+0x12>

}



}
 80040fe:	b002      	add	sp, #8
 8004100:	bd10      	pop	{r4, pc}
 switch(MENU)
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b0a      	cmp	r3, #10
 800410a:	d8f8      	bhi.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4a34      	ldr	r2, [pc, #208]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004110:	58d3      	ldr	r3, [r2, r3]
 8004112:	469f      	mov	pc, r3
	Display_event(D1,D2,D3,D4,Blink_1HZ);
 8004114:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004116:	7818      	ldrb	r0, [r3, #0]
 8004118:	b2c0      	uxtb	r0, r0
 800411a:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800411c:	7819      	ldrb	r1, [r3, #0]
 800411e:	b2c9      	uxtb	r1, r1
 8004120:	4b32      	ldr	r3, [pc, #200]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	4b32      	ldr	r3, [pc, #200]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2400      	movs	r4, #0
 800412e:	9400      	str	r4, [sp, #0]
 8004130:	f7fd fdd0 	bl	8001cd4 <Display_event>
    break;
 8004134:	e7e3      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
	Display_event(CHAR_A,CHAR_B,CHAR_C,CHAR_D,Blink_1_Digit);
 8004136:	2301      	movs	r3, #1
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	220c      	movs	r2, #12
 800413e:	210b      	movs	r1, #11
 8004140:	200a      	movs	r0, #10
 8004142:	f7fd fdc7 	bl	8001cd4 <Display_event>
	break;
 8004146:	e7da      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
    Display_event(CHAR_F,CHAR_G,CHAR_h,CHAR__,Blink_ALL_Digit);
 8004148:	2305      	movs	r3, #5
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	331f      	adds	r3, #31
 800414e:	2226      	movs	r2, #38	; 0x26
 8004150:	2110      	movs	r1, #16
 8004152:	200f      	movs	r0, #15
 8004154:	f7fd fdbe 	bl	8001cd4 <Display_event>
    break;
 8004158:	e7d1      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(9,10,11,12,Blink_3_Digit);
 800415a:	2303      	movs	r3, #3
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	3309      	adds	r3, #9
 8004160:	220b      	movs	r2, #11
 8004162:	210a      	movs	r1, #10
 8004164:	2009      	movs	r0, #9
 8004166:	f7fd fdb5 	bl	8001cd4 <Display_event>
	 break;
 800416a:	e7c8      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(13,14,15,16,Blink_4_Digit);
 800416c:	2304      	movs	r3, #4
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	220f      	movs	r2, #15
 8004174:	210e      	movs	r1, #14
 8004176:	200d      	movs	r0, #13
 8004178:	f7fd fdac 	bl	8001cd4 <Display_event>
	 break;
 800417c:	e7bf      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
	Display_event(17,18,19,20,5);
 800417e:	2305      	movs	r3, #5
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	330f      	adds	r3, #15
 8004184:	2213      	movs	r2, #19
 8004186:	2112      	movs	r1, #18
 8004188:	2011      	movs	r0, #17
 800418a:	f7fd fda3 	bl	8001cd4 <Display_event>
	break;
 800418e:	e7b6      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(21,22,23,24,6);
 8004190:	2306      	movs	r3, #6
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	3312      	adds	r3, #18
 8004196:	2217      	movs	r2, #23
 8004198:	2116      	movs	r1, #22
 800419a:	2015      	movs	r0, #21
 800419c:	f7fd fd9a 	bl	8001cd4 <Display_event>
	 break;
 80041a0:	e7ad      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(25,26,36,27,7);
 80041a2:	2307      	movs	r3, #7
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	2224      	movs	r2, #36	; 0x24
 80041aa:	211a      	movs	r1, #26
 80041ac:	2019      	movs	r0, #25
 80041ae:	f7fd fd91 	bl	8001cd4 <Display_event>
	 break;
 80041b2:	e7a4      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(28,29,30,32,8);
 80041b4:	2308      	movs	r3, #8
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	3318      	adds	r3, #24
 80041ba:	221e      	movs	r2, #30
 80041bc:	211d      	movs	r1, #29
 80041be:	201c      	movs	r0, #28
 80041c0:	f7fd fd88 	bl	8001cd4 <Display_event>
	 break;
 80041c4:	e79b      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(37,38,39,40,9);
 80041c6:	2309      	movs	r3, #9
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	331f      	adds	r3, #31
 80041cc:	2227      	movs	r2, #39	; 0x27
 80041ce:	2126      	movs	r1, #38	; 0x26
 80041d0:	2025      	movs	r0, #37	; 0x25
 80041d2:	f7fd fd7f 	bl	8001cd4 <Display_event>
}
 80041d6:	e792      	b.n	80040fe <HAL_TIM_PeriodElapsedCallback+0xe>
 80041d8:	200000c8 	.word	0x200000c8
 80041dc:	20000004 	.word	0x20000004
 80041e0:	08004b24 	.word	0x08004b24
 80041e4:	200001dc 	.word	0x200001dc
 80041e8:	20000120 	.word	0x20000120
 80041ec:	200000c4 	.word	0x200000c4
 80041f0:	20000144 	.word	0x20000144

080041f4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)

{
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //adc_val[i]  = adc_buf[i]; //*calibration;  // store the values in adc_val from buffer

 }
*/

CT_Sample++;
 80041f6:	4b39      	ldr	r3, [pc, #228]	; (80042dc <HAL_ADC_ConvCpltCallback+0xe8>)
 80041f8:	881c      	ldrh	r4, [r3, #0]
 80041fa:	3401      	adds	r4, #1
 80041fc:	b2a4      	uxth	r4, r4
 80041fe:	801c      	strh	r4, [r3, #0]
V1 += adc_val[7];
 8004200:	4a37      	ldr	r2, [pc, #220]	; (80042e0 <HAL_ADC_ConvCpltCallback+0xec>)
 8004202:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8004204:	69d1      	ldr	r1, [r2, #28]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	4684      	mov	ip, r0
 800420a:	4461      	add	r1, ip
 800420c:	000d      	movs	r5, r1
 800420e:	6019      	str	r1, [r3, #0]
V2 += adc_val[0];
 8004210:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <HAL_ADC_ConvCpltCallback+0xf4>)
 8004212:	6810      	ldr	r0, [r2, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4694      	mov	ip, r2
 8004218:	4460      	add	r0, ip
 800421a:	6018      	str	r0, [r3, #0]
if(CT_Sample>=1000)
 800421c:	4b33      	ldr	r3, [pc, #204]	; (80042ec <HAL_ADC_ConvCpltCallback+0xf8>)
 800421e:	429c      	cmp	r4, r3
 8004220:	d95a      	bls.n	80042d8 <HAL_ADC_ConvCpltCallback+0xe4>
{

	RMS_value = (V2/CT_Sample);
 8004222:	0021      	movs	r1, r4
 8004224:	f7fb fffa 	bl	800021c <__divsi3>
 8004228:	f7fc fa04 	bl	8000634 <__aeabi_i2f>
 800422c:	1c06      	adds	r6, r0, #0
	V1        = (V1/CT_Sample);
 800422e:	0021      	movs	r1, r4
 8004230:	0028      	movs	r0, r5
 8004232:	f7fb fff3 	bl	800021c <__divsi3>
 8004236:	0007      	movs	r7, r0
	RMS_value = (3.3 *(*VREFINT_CAL_ADDR)*RMS_value)/(V1*4095);
 8004238:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <HAL_ADC_ConvCpltCallback+0xfc>)
 800423a:	8818      	ldrh	r0, [r3, #0]
 800423c:	f7fd fc0e 	bl	8001a5c <__aeabi_i2d>
 8004240:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <HAL_ADC_ConvCpltCallback+0x100>)
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <HAL_ADC_ConvCpltCallback+0x104>)
 8004244:	f7fd f98a 	bl	800155c <__aeabi_dmul>
 8004248:	0004      	movs	r4, r0
 800424a:	000d      	movs	r5, r1
 800424c:	1c30      	adds	r0, r6, #0
 800424e:	f7fd fc47 	bl	8001ae0 <__aeabi_f2d>
 8004252:	0002      	movs	r2, r0
 8004254:	000b      	movs	r3, r1
 8004256:	0020      	movs	r0, r4
 8004258:	0029      	movs	r1, r5
 800425a:	f7fd f97f 	bl	800155c <__aeabi_dmul>
 800425e:	0004      	movs	r4, r0
 8004260:	000d      	movs	r5, r1
 8004262:	0338      	lsls	r0, r7, #12
 8004264:	1bc0      	subs	r0, r0, r7
 8004266:	f7fd fbf9 	bl	8001a5c <__aeabi_i2d>
 800426a:	0002      	movs	r2, r0
 800426c:	000b      	movs	r3, r1
 800426e:	0020      	movs	r0, r4
 8004270:	0029      	movs	r1, r5
 8004272:	f7fc fd3f 	bl	8000cf4 <__aeabi_ddiv>
 8004276:	f7fd fc85 	bl	8001b84 <__aeabi_d2f>
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_ADC_ConvCpltCallback+0x108>)
 800427c:	6018      	str	r0, [r3, #0]
	CT1_amp = RMS_value /0.047;
 800427e:	f7fd fc2f 	bl	8001ae0 <__aeabi_f2d>
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_ADC_ConvCpltCallback+0x10c>)
 8004284:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <HAL_ADC_ConvCpltCallback+0x110>)
 8004286:	f7fc fd35 	bl	8000cf4 <__aeabi_ddiv>
 800428a:	f7fd fc7b 	bl	8001b84 <__aeabi_d2f>
 800428e:	1c04      	adds	r4, r0, #0
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_ADC_ConvCpltCallback+0x114>)
 8004292:	6018      	str	r0, [r3, #0]
	if(CT1_amp<20.0&&CT1_amp>0.1)
 8004294:	491d      	ldr	r1, [pc, #116]	; (800430c <HAL_ADC_ConvCpltCallback+0x118>)
 8004296:	f7fc f8fd 	bl	8000494 <__aeabi_fcmplt>
 800429a:	2800      	cmp	r0, #0
 800429c:	d014      	beq.n	80042c8 <HAL_ADC_ConvCpltCallback+0xd4>
 800429e:	1c20      	adds	r0, r4, #0
 80042a0:	f7fd fc1e 	bl	8001ae0 <__aeabi_f2d>
 80042a4:	0004      	movs	r4, r0
 80042a6:	000d      	movs	r5, r1
 80042a8:	4a19      	ldr	r2, [pc, #100]	; (8004310 <HAL_ADC_ConvCpltCallback+0x11c>)
 80042aa:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_ADC_ConvCpltCallback+0x120>)
 80042ac:	f7fc f8cc 	bl	8000448 <__aeabi_dcmpgt>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d009      	beq.n	80042c8 <HAL_ADC_ConvCpltCallback+0xd4>
	{

		CT1_amp +=0.7;
 80042b4:	4a0f      	ldr	r2, [pc, #60]	; (80042f4 <HAL_ADC_ConvCpltCallback+0x100>)
 80042b6:	4b18      	ldr	r3, [pc, #96]	; (8004318 <HAL_ADC_ConvCpltCallback+0x124>)
 80042b8:	0020      	movs	r0, r4
 80042ba:	0029      	movs	r1, r5
 80042bc:	f7fc fa0a 	bl	80006d4 <__aeabi_dadd>
 80042c0:	f7fd fc60 	bl	8001b84 <__aeabi_d2f>
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_ADC_ConvCpltCallback+0x114>)
 80042c6:	6018      	str	r0, [r3, #0]
	}
	CT_Sample=1;
 80042c8:	2201      	movs	r2, #1
 80042ca:	4b04      	ldr	r3, [pc, #16]	; (80042dc <HAL_ADC_ConvCpltCallback+0xe8>)
 80042cc:	801a      	strh	r2, [r3, #0]
	V1 = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80042d2:	6013      	str	r3, [r2, #0]
	V2 = 0;
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <HAL_ADC_ConvCpltCallback+0xf4>)
 80042d6:	6013      	str	r3, [r2, #0]
}

}
 80042d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	20000002 	.word	0x20000002
 80042e0:	200000a0 	.word	0x200000a0
 80042e4:	20000108 	.word	0x20000108
 80042e8:	200001e0 	.word	0x200001e0
 80042ec:	000003e7 	.word	0x000003e7
 80042f0:	1ffff7ba 	.word	0x1ffff7ba
 80042f4:	66666666 	.word	0x66666666
 80042f8:	400a6666 	.word	0x400a6666
 80042fc:	20000074 	.word	0x20000074
 8004300:	4dd2f1aa 	.word	0x4dd2f1aa
 8004304:	3fa81062 	.word	0x3fa81062
 8004308:	20000070 	.word	0x20000070
 800430c:	41a00000 	.word	0x41a00000
 8004310:	9999999a 	.word	0x9999999a
 8004314:	3fb99999 	.word	0x3fb99999
 8004318:	3fe66666 	.word	0x3fe66666

0800431c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800431c:	b530      	push	{r4, r5, lr}
 800431e:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8004320:	231a      	movs	r3, #26
 8004322:	9308      	str	r3, [sp, #32]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004324:	3b19      	subs	r3, #25
 8004326:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004328:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800432a:	2210      	movs	r2, #16
 800432c:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800432e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004330:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004332:	2502      	movs	r5, #2
 8004334:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004336:	2400      	movs	r4, #0
 8004338:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800433a:	23c0      	movs	r3, #192	; 0xc0
 800433c:	035b      	lsls	r3, r3, #13
 800433e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004340:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004342:	a808      	add	r0, sp, #32
 8004344:	f7fe fcda 	bl	8002cfc <HAL_RCC_OscConfig>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004348:	2307      	movs	r3, #7
 800434a:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800434c:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800434e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004350:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004352:	2101      	movs	r1, #1
 8004354:	a804      	add	r0, sp, #16
 8004356:	f7fe ff4b 	bl	80031f0 <HAL_RCC_ClockConfig>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	025b      	lsls	r3, r3, #9
 800435e:	9300      	str	r3, [sp, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004366:	4668      	mov	r0, sp
 8004368:	f7fe fffe 	bl	8003368 <HAL_RCCEx_PeriphCLKConfig>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800436c:	f7fe fff6 	bl	800335c <HAL_RCC_GetHCLKFreq>
 8004370:	21fa      	movs	r1, #250	; 0xfa
 8004372:	0089      	lsls	r1, r1, #2
 8004374:	f7fb fec8 	bl	8000108 <__udivsi3>
 8004378:	f7fe f98e 	bl	8002698 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800437c:	2004      	movs	r0, #4
 800437e:	f7fe f9a7 	bl	80026d0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004382:	2200      	movs	r2, #0
 8004384:	2100      	movs	r1, #0
 8004386:	2001      	movs	r0, #1
 8004388:	4240      	negs	r0, r0
 800438a:	f7fe f947 	bl	800261c <HAL_NVIC_SetPriority>
}
 800438e:	b015      	add	sp, #84	; 0x54
 8004390:	bd30      	pop	{r4, r5, pc}
	...

08004394 <main>:
{
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004396:	46de      	mov	lr, fp
 8004398:	4657      	mov	r7, sl
 800439a:	464e      	mov	r6, r9
 800439c:	4645      	mov	r5, r8
 800439e:	b5e0      	push	{r5, r6, r7, lr}
 80043a0:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80043a2:	f7fd fedb 	bl	800215c <HAL_Init>
  SystemClock_Config();
 80043a6:	f7ff ffb9 	bl	800431c <SystemClock_Config>
  HAL_FLASH_Unlock();
 80043aa:	f7fe fa9d 	bl	80028e8 <HAL_FLASH_Unlock>
  EE_Init();
 80043ae:	f7ff fcb7 	bl	8003d20 <EE_Init>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b2:	4fb4      	ldr	r7, [pc, #720]	; (8004684 <main+0x2f0>)
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	0289      	lsls	r1, r1, #10
 80043ba:	430a      	orrs	r2, r1
 80043bc:	617a      	str	r2, [r7, #20]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	400b      	ands	r3, r1
 80043c2:	9302      	str	r3, [sp, #8]
 80043c4:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	02c9      	lsls	r1, r1, #11
 80043cc:	430a      	orrs	r2, r1
 80043ce:	617a      	str	r2, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	400b      	ands	r3, r1
 80043d4:	9303      	str	r3, [sp, #12]
 80043d6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	03c9      	lsls	r1, r1, #15
 80043de:	430a      	orrs	r2, r1
 80043e0:	617a      	str	r2, [r7, #20]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	400b      	ands	r3, r1
 80043e6:	9304      	str	r3, [sp, #16]
 80043e8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin|BUZZER_Pin 
 80043ea:	2200      	movs	r2, #0
 80043ec:	49a6      	ldr	r1, [pc, #664]	; (8004688 <main+0x2f4>)
 80043ee:	48a7      	ldr	r0, [pc, #668]	; (800468c <main+0x2f8>)
 80043f0:	f7fe fc7a 	bl	8002ce8 <HAL_GPIO_WritePin>
                          |DB_Pin|G_Pin|F_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin 
 80043f4:	239f      	movs	r3, #159	; 0x9f
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	469b      	mov	fp, r3
 80043fa:	2200      	movs	r2, #0
 80043fc:	0019      	movs	r1, r3
 80043fe:	2090      	movs	r0, #144	; 0x90
 8004400:	05c0      	lsls	r0, r0, #23
 8004402:	f7fe fc71 	bl	8002ce8 <HAL_GPIO_WritePin>
                          |D_Pin|A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, C_Pin|B_Pin, GPIO_PIN_RESET);
 8004406:	2200      	movs	r2, #0
 8004408:	21c0      	movs	r1, #192	; 0xc0
 800440a:	48a1      	ldr	r0, [pc, #644]	; (8004690 <main+0x2fc>)
 800440c:	f7fe fc6c 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin;
 8004410:	ac05      	add	r4, sp, #20
 8004412:	2307      	movs	r3, #7
 8004414:	469a      	mov	sl, r3
 8004416:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004418:	2601      	movs	r6, #1
 800441a:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441c:	2500      	movs	r5, #0
 800441e:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004420:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004422:	0021      	movs	r1, r4
 8004424:	4899      	ldr	r0, [pc, #612]	; (800468c <main+0x2f8>)
 8004426:	f7fe fb83 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin DB_Pin G_Pin F_Pin 
                           E_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|DB_Pin|G_Pin|F_Pin 
 800442a:	23f4      	movs	r3, #244	; 0xf4
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	9305      	str	r3, [sp, #20]
                          |E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004430:	2311      	movs	r3, #17
 8004432:	4699      	mov	r9, r3
 8004434:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004438:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800443a:	0021      	movs	r1, r4
 800443c:	4893      	ldr	r0, [pc, #588]	; (800468c <main+0x2f8>)
 800443e:	f7fe fb77 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin LED1_Pin 
                           D_Pin A_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin 
 8004442:	465b      	mov	r3, fp
 8004444:	9305      	str	r3, [sp, #20]
                          |D_Pin|A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004446:	464b      	mov	r3, r9
 8004448:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444c:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444e:	0021      	movs	r1, r4
 8004450:	2090      	movs	r0, #144	; 0x90
 8004452:	05c0      	lsls	r0, r0, #23
 8004454:	f7fe fb6c 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_Pin B_Pin */
  GPIO_InitStruct.Pin = C_Pin|B_Pin;
 8004458:	23c0      	movs	r3, #192	; 0xc0
 800445a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800445c:	464b      	mov	r3, r9
 800445e:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004462:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004464:	0021      	movs	r1, r4
 8004466:	488a      	ldr	r0, [pc, #552]	; (8004690 <main+0x2fc>)
 8004468:	f7fe fb62 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_down_Pin SW_up_Pin SW_menu_Pin */
  GPIO_InitStruct.Pin = SW_down_Pin|SW_up_Pin|SW_menu_Pin;
 800446c:	2338      	movs	r3, #56	; 0x38
 800446e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004470:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004472:	60a6      	str	r6, [r4, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004474:	0021      	movs	r1, r4
 8004476:	4885      	ldr	r0, [pc, #532]	; (800468c <main+0x2f8>)
 8004478:	f7fe fb5a 	bl	8002b30 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4333      	orrs	r3, r6
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	4033      	ands	r3, r6
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800448a:	2200      	movs	r2, #0
 800448c:	2100      	movs	r1, #0
 800448e:	2009      	movs	r0, #9
 8004490:	f7fe f8c4 	bl	800261c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004494:	2009      	movs	r0, #9
 8004496:	f7fe f8f5 	bl	8002684 <HAL_NVIC_EnableIRQ>
  hadc.Instance = ADC1;
 800449a:	4f7e      	ldr	r7, [pc, #504]	; (8004694 <main+0x300>)
 800449c:	4b7e      	ldr	r3, [pc, #504]	; (8004698 <main+0x304>)
 800449e:	603b      	str	r3, [r7, #0]
  hadc.Init.ClockPrescaler =ADC_CLOCK_SYNC_PCLK_DIV4; //ADC_CLOCK_ASYNC_DIV1;
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	607b      	str	r3, [r7, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 80044a6:	2308      	movs	r3, #8
 80044a8:	60bb      	str	r3, [r7, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044aa:	60fd      	str	r5, [r7, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80044ac:	613e      	str	r6, [r7, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80044ae:	617b      	str	r3, [r7, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80044b0:	61bd      	str	r5, [r7, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80044b2:	61fd      	str	r5, [r7, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 80044b4:	623e      	str	r6, [r7, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80044b6:	627d      	str	r5, [r7, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044b8:	23c2      	movs	r3, #194	; 0xc2
 80044ba:	33ff      	adds	r3, #255	; 0xff
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80044be:	62fd      	str	r5, [r7, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 80044c0:	633e      	str	r6, [r7, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80044c2:	637e      	str	r6, [r7, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80044c4:	0038      	movs	r0, r7
 80044c6:	f7fd fecd 	bl	8002264 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 80044ca:	9505      	str	r5, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	015b      	lsls	r3, r3, #5
 80044d0:	6063      	str	r3, [r4, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80044d2:	4653      	mov	r3, sl
 80044d4:	60a3      	str	r3, [r4, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044d6:	0021      	movs	r1, r4
 80044d8:	0038      	movs	r0, r7
 80044da:	f7fe f811 	bl	8002500 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 80044de:	9605      	str	r6, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044e0:	0021      	movs	r1, r4
 80044e2:	0038      	movs	r0, r7
 80044e4:	f7fe f80c 	bl	8002500 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 80044e8:	2302      	movs	r3, #2
 80044ea:	469a      	mov	sl, r3
 80044ec:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044ee:	0021      	movs	r1, r4
 80044f0:	0038      	movs	r0, r7
 80044f2:	f7fe f805 	bl	8002500 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 80044f6:	2303      	movs	r3, #3
 80044f8:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80044fa:	0021      	movs	r1, r4
 80044fc:	0038      	movs	r0, r7
 80044fe:	f7fd ffff 	bl	8002500 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 8004502:	2304      	movs	r3, #4
 8004504:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004506:	0021      	movs	r1, r4
 8004508:	0038      	movs	r0, r7
 800450a:	f7fd fff9 	bl	8002500 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 800450e:	2305      	movs	r3, #5
 8004510:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004512:	0021      	movs	r1, r4
 8004514:	0038      	movs	r0, r7
 8004516:	f7fd fff3 	bl	8002500 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800451a:	2310      	movs	r3, #16
 800451c:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800451e:	0021      	movs	r1, r4
 8004520:	0038      	movs	r0, r7
 8004522:	f7fd ffed 	bl	8002500 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004526:	464b      	mov	r3, r9
 8004528:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800452a:	0021      	movs	r1, r4
 800452c:	0038      	movs	r0, r7
 800452e:	f7fd ffe7 	bl	8002500 <HAL_ADC_ConfigChannel>
  hrtc.Instance = RTC;
 8004532:	4b5a      	ldr	r3, [pc, #360]	; (800469c <main+0x308>)
 8004534:	4698      	mov	r8, r3
 8004536:	4b5a      	ldr	r3, [pc, #360]	; (80046a0 <main+0x30c>)
 8004538:	4642      	mov	r2, r8
 800453a:	6013      	str	r3, [r2, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800453c:	6055      	str	r5, [r2, #4]
  hrtc.Init.AsynchPrediv = 127;
 800453e:	237f      	movs	r3, #127	; 0x7f
 8004540:	6093      	str	r3, [r2, #8]
  hrtc.Init.SynchPrediv = 255;
 8004542:	3380      	adds	r3, #128	; 0x80
 8004544:	60d3      	str	r3, [r2, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004546:	6115      	str	r5, [r2, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004548:	6155      	str	r5, [r2, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800454a:	6195      	str	r5, [r2, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800454c:	4640      	mov	r0, r8
 800454e:	f7fe ffd7 	bl	8003500 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8004552:	7025      	strb	r5, [r4, #0]
  sTime.Minutes = 0x0;
 8004554:	7065      	strb	r5, [r4, #1]
  sTime.Seconds = 0x0;
 8004556:	70a5      	strb	r5, [r4, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004558:	60e5      	str	r5, [r4, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800455a:	6125      	str	r5, [r4, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800455c:	2201      	movs	r2, #1
 800455e:	0021      	movs	r1, r4
 8004560:	4640      	mov	r0, r8
 8004562:	f7ff f83d 	bl	80035e0 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004566:	466b      	mov	r3, sp
 8004568:	701e      	strb	r6, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800456a:	705e      	strb	r6, [r3, #1]
  sDate.Date = 0x1;
 800456c:	709e      	strb	r6, [r3, #2]
  sDate.Year = 0x0;
 800456e:	70dd      	strb	r5, [r3, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004570:	2201      	movs	r2, #1
 8004572:	4669      	mov	r1, sp
 8004574:	4640      	mov	r0, r8
 8004576:	f7ff f8b7 	bl	80036e8 <HAL_RTC_SetDate>
  htim17.Instance = TIM17;
 800457a:	4c4a      	ldr	r4, [pc, #296]	; (80046a4 <main+0x310>)
 800457c:	4b4a      	ldr	r3, [pc, #296]	; (80046a8 <main+0x314>)
 800457e:	6023      	str	r3, [r4, #0]
  htim17.Init.Prescaler = 2;
 8004580:	4653      	mov	r3, sl
 8004582:	6063      	str	r3, [r4, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004584:	60a5      	str	r5, [r4, #8]
  htim17.Init.Period = 65535;
 8004586:	4b49      	ldr	r3, [pc, #292]	; (80046ac <main+0x318>)
 8004588:	60e3      	str	r3, [r4, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	6123      	str	r3, [r4, #16]
  htim17.Init.RepetitionCounter = 0;
 8004590:	6165      	str	r5, [r4, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004592:	3b81      	subs	r3, #129	; 0x81
 8004594:	3bff      	subs	r3, #255	; 0xff
 8004596:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004598:	0020      	movs	r0, r4
 800459a:	f7ff fab5 	bl	8003b08 <HAL_TIM_Base_Init>
    EE_ReadVariable(VirtAddVarTab[9], &VarDataTab[9]);
 800459e:	4e44      	ldr	r6, [pc, #272]	; (80046b0 <main+0x31c>)
 80045a0:	4d44      	ldr	r5, [pc, #272]	; (80046b4 <main+0x320>)
 80045a2:	8a68      	ldrh	r0, [r5, #18]
 80045a4:	4944      	ldr	r1, [pc, #272]	; (80046b8 <main+0x324>)
 80045a6:	f7ff fb75 	bl	8003c94 <EE_ReadVariable>
     VarValue  = VarDataTab[9];
 80045aa:	8a71      	ldrh	r1, [r6, #18]
    EE_WriteVariable(VirtAddVarTab[7], VarValue++);
 80045ac:	89e8      	ldrh	r0, [r5, #14]
 80045ae:	4b43      	ldr	r3, [pc, #268]	; (80046bc <main+0x328>)
 80045b0:	4699      	mov	r9, r3
 80045b2:	1c4b      	adds	r3, r1, #1
 80045b4:	464a      	mov	r2, r9
 80045b6:	8013      	strh	r3, [r2, #0]
 80045b8:	f7ff fcea 	bl	8003f90 <EE_WriteVariable>
    EE_WriteVariable(VirtAddVarTab[8], VarValue++);
 80045bc:	8a28      	ldrh	r0, [r5, #16]
 80045be:	464b      	mov	r3, r9
 80045c0:	8819      	ldrh	r1, [r3, #0]
 80045c2:	1c4b      	adds	r3, r1, #1
 80045c4:	464a      	mov	r2, r9
 80045c6:	8013      	strh	r3, [r2, #0]
 80045c8:	f7ff fce2 	bl	8003f90 <EE_WriteVariable>
    EE_WriteVariable(VirtAddVarTab[9], VarValue++);
 80045cc:	8a68      	ldrh	r0, [r5, #18]
 80045ce:	464b      	mov	r3, r9
 80045d0:	8819      	ldrh	r1, [r3, #0]
 80045d2:	1c4b      	adds	r3, r1, #1
 80045d4:	464a      	mov	r2, r9
 80045d6:	8013      	strh	r3, [r2, #0]
 80045d8:	f7ff fcda 	bl	8003f90 <EE_WriteVariable>
    EE_ReadVariable(VirtAddVarTab[7], &VarDataTab[7]);
 80045dc:	0031      	movs	r1, r6
 80045de:	310e      	adds	r1, #14
 80045e0:	89e8      	ldrh	r0, [r5, #14]
 80045e2:	f7ff fb57 	bl	8003c94 <EE_ReadVariable>
    EE_ReadVariable(VirtAddVarTab[8], &VarDataTab[8]);
 80045e6:	0031      	movs	r1, r6
 80045e8:	3110      	adds	r1, #16
 80045ea:	8a28      	ldrh	r0, [r5, #16]
 80045ec:	f7ff fb52 	bl	8003c94 <EE_ReadVariable>
    EE_ReadVariable(VirtAddVarTab[9], &VarDataTab[9]);
 80045f0:	8a68      	ldrh	r0, [r5, #18]
 80045f2:	4931      	ldr	r1, [pc, #196]	; (80046b8 <main+0x324>)
 80045f4:	f7ff fb4e 	bl	8003c94 <EE_ReadVariable>
  HAL_TIM_Base_Start_IT(&htim17);
 80045f8:	0020      	movs	r0, r4
 80045fa:	f7ff f93d 	bl	8003878 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA (&hadc, (uint32_t *)adc_val, 8);
 80045fe:	2208      	movs	r2, #8
 8004600:	492f      	ldr	r1, [pc, #188]	; (80046c0 <main+0x32c>)
 8004602:	0038      	movs	r0, r7
 8004604:	f7fd fee0 	bl	80023c8 <HAL_ADC_Start_DMA>
		if((HAL_GPIO_ReadPin(GPIOB ,SW_menu_Pin)==0)) //||
 8004608:	4c20      	ldr	r4, [pc, #128]	; (800468c <main+0x2f8>)
			MENU++;
 800460a:	4e2e      	ldr	r6, [pc, #184]	; (80046c4 <main+0x330>)
			 MENU=1;
 800460c:	0037      	movs	r7, r6
			MENU--;
 800460e:	0035      	movs	r5, r6
 8004610:	e009      	b.n	8004626 <main+0x292>
			HAL_Delay(1000);
 8004612:	20fa      	movs	r0, #250	; 0xfa
 8004614:	0080      	lsls	r0, r0, #2
 8004616:	f7fd fdbf 	bl	8002198 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB ,SW_down_Pin)==0)
 800461a:	2108      	movs	r1, #8
 800461c:	0020      	movs	r0, r4
 800461e:	f7fe fb5d 	bl	8002cdc <HAL_GPIO_ReadPin>
 8004622:	2800      	cmp	r0, #0
 8004624:	d028      	beq.n	8004678 <main+0x2e4>
	  get_time();
 8004626:	f7ff fd4f 	bl	80040c8 <get_time>
	  Count  ();
 800462a:	f7ff fd21 	bl	8004070 <Count>
		if((HAL_GPIO_ReadPin(GPIOB ,SW_menu_Pin)==0)) //||
 800462e:	2120      	movs	r1, #32
 8004630:	0020      	movs	r0, r4
 8004632:	f7fe fb53 	bl	8002cdc <HAL_GPIO_ReadPin>
 8004636:	2800      	cmp	r0, #0
 8004638:	d10d      	bne.n	8004656 <main+0x2c2>
			MENU++;
 800463a:	7833      	ldrb	r3, [r6, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	b2db      	uxtb	r3, r3
 8004640:	7033      	strb	r3, [r6, #0]
			if(MENU>10)
 8004642:	7833      	ldrb	r3, [r6, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b0a      	cmp	r3, #10
 8004648:	d901      	bls.n	800464e <main+0x2ba>
			 MENU=1;
 800464a:	2301      	movs	r3, #1
 800464c:	703b      	strb	r3, [r7, #0]
			HAL_Delay(1000);
 800464e:	20fa      	movs	r0, #250	; 0xfa
 8004650:	0080      	lsls	r0, r0, #2
 8004652:	f7fd fda1 	bl	8002198 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB ,SW_up_Pin)==0)
 8004656:	2110      	movs	r1, #16
 8004658:	0020      	movs	r0, r4
 800465a:	f7fe fb3f 	bl	8002cdc <HAL_GPIO_ReadPin>
 800465e:	2800      	cmp	r0, #0
 8004660:	d1db      	bne.n	800461a <main+0x286>
			MENU--;
 8004662:	782b      	ldrb	r3, [r5, #0]
 8004664:	3b01      	subs	r3, #1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	702b      	strb	r3, [r5, #0]
			if(MENU<=0)
 800466a:	782b      	ldrb	r3, [r5, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1d0      	bne.n	8004612 <main+0x27e>
			 MENU=10;
 8004670:	220a      	movs	r2, #10
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <main+0x330>)
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e7cc      	b.n	8004612 <main+0x27e>
			HAL_GPIO_TogglePin(GPIOB ,BUZZER_Pin);
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	00c9      	lsls	r1, r1, #3
 800467c:	0020      	movs	r0, r4
 800467e:	f7fe fb39 	bl	8002cf4 <HAL_GPIO_TogglePin>
 8004682:	e7d0      	b.n	8004626 <main+0x292>
 8004684:	40021000 	.word	0x40021000
 8004688:	0000f407 	.word	0x0000f407
 800468c:	48000400 	.word	0x48000400
 8004690:	48001400 	.word	0x48001400
 8004694:	20000190 	.word	0x20000190
 8004698:	40012400 	.word	0x40012400
 800469c:	20000124 	.word	0x20000124
 80046a0:	40002800 	.word	0x40002800
 80046a4:	200000c8 	.word	0x200000c8
 80046a8:	40014800 	.word	0x40014800
 80046ac:	0000ffff 	.word	0x0000ffff
 80046b0:	20000008 	.word	0x20000008
 80046b4:	20000028 	.word	0x20000028
 80046b8:	2000001a 	.word	0x2000001a
 80046bc:	20000078 	.word	0x20000078
 80046c0:	200000a0 	.word	0x200000a0
 80046c4:	20000004 	.word	0x20000004

080046c8 <_Error_Handler>:
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046cc:	b500      	push	{lr}
 80046ce:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_MspInit+0x50>)
 80046d2:	6999      	ldr	r1, [r3, #24]
 80046d4:	2201      	movs	r2, #1
 80046d6:	4311      	orrs	r1, r2
 80046d8:	6199      	str	r1, [r3, #24]
 80046da:	6999      	ldr	r1, [r3, #24]
 80046dc:	400a      	ands	r2, r1
 80046de:	9200      	str	r2, [sp, #0]
 80046e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	69da      	ldr	r2, [r3, #28]
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	0549      	lsls	r1, r1, #21
 80046e8:	430a      	orrs	r2, r1
 80046ea:	61da      	str	r2, [r3, #28]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	400b      	ands	r3, r1
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80046f4:	2200      	movs	r2, #0
 80046f6:	2100      	movs	r1, #0
 80046f8:	2005      	movs	r0, #5
 80046fa:	4240      	negs	r0, r0
 80046fc:	f7fd ff8e 	bl	800261c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	2002      	movs	r0, #2
 8004706:	4240      	negs	r0, r0
 8004708:	f7fd ff88 	bl	800261c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800470c:	2200      	movs	r2, #0
 800470e:	2100      	movs	r1, #0
 8004710:	2001      	movs	r0, #1
 8004712:	4240      	negs	r0, r0
 8004714:	f7fd ff82 	bl	800261c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004718:	b003      	add	sp, #12
 800471a:	bd00      	pop	{pc}
 800471c:	40021000 	.word	0x40021000

08004720 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004726:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_ADC_MspInit+0x74>)
 8004728:	6802      	ldr	r2, [r0, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800472e:	b006      	add	sp, #24
 8004730:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004732:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_ADC_MspInit+0x78>)
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	2680      	movs	r6, #128	; 0x80
 8004738:	00b6      	lsls	r6, r6, #2
 800473a:	4332      	orrs	r2, r6
 800473c:	619a      	str	r2, [r3, #24]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	4033      	ands	r3, r6
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8004746:	233f      	movs	r3, #63	; 0x3f
 8004748:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800474a:	3b3c      	subs	r3, #60	; 0x3c
 800474c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2500      	movs	r5, #0
 8004750:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004752:	a901      	add	r1, sp, #4
 8004754:	2090      	movs	r0, #144	; 0x90
 8004756:	05c0      	lsls	r0, r0, #23
 8004758:	f7fe f9ea 	bl	8002b30 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 800475c:	480f      	ldr	r0, [pc, #60]	; (800479c <HAL_ADC_MspInit+0x7c>)
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_ADC_MspInit+0x80>)
 8004760:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004762:	6045      	str	r5, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004764:	6085      	str	r5, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800476a:	6106      	str	r6, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004772:	2320      	movs	r3, #32
 8004774:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004776:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004778:	f7fd ffc0 	bl	80026fc <HAL_DMA_Init>
 800477c:	2800      	cmp	r0, #0
 800477e:	d103      	bne.n	8004788 <HAL_ADC_MspInit+0x68>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_ADC_MspInit+0x7c>)
 8004782:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004784:	625c      	str	r4, [r3, #36]	; 0x24
}
 8004786:	e7d2      	b.n	800472e <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8004788:	216e      	movs	r1, #110	; 0x6e
 800478a:	4806      	ldr	r0, [pc, #24]	; (80047a4 <HAL_ADC_MspInit+0x84>)
 800478c:	f7ff ff9c 	bl	80046c8 <_Error_Handler>
 8004790:	e7f6      	b.n	8004780 <HAL_ADC_MspInit+0x60>
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	40012400 	.word	0x40012400
 8004798:	40021000 	.word	0x40021000
 800479c:	2000014c 	.word	0x2000014c
 80047a0:	40020008 	.word	0x40020008
 80047a4:	08004b50 	.word	0x08004b50

080047a8 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RTC_MspInit+0x18>)
 80047aa:	6802      	ldr	r2, [r0, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d000      	beq.n	80047b2 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80047b0:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HAL_RTC_MspInit+0x1c>)
 80047b4:	6a11      	ldr	r1, [r2, #32]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	021b      	lsls	r3, r3, #8
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6213      	str	r3, [r2, #32]
}
 80047be:	e7f7      	b.n	80047b0 <HAL_RTC_MspInit+0x8>
 80047c0:	40002800 	.word	0x40002800
 80047c4:	40021000 	.word	0x40021000

080047c8 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047c8:	b500      	push	{lr}
 80047ca:	b083      	sub	sp, #12

  if(htim_base->Instance==TIM17)
 80047cc:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <HAL_TIM_Base_MspInit+0x38>)
 80047ce:	6802      	ldr	r2, [r0, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80047d4:	b003      	add	sp, #12
 80047d6:	bd00      	pop	{pc}
    __HAL_RCC_TIM17_CLK_ENABLE();
 80047d8:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <HAL_TIM_Base_MspInit+0x3c>)
 80047da:	6991      	ldr	r1, [r2, #24]
 80047dc:	2080      	movs	r0, #128	; 0x80
 80047de:	02c0      	lsls	r0, r0, #11
 80047e0:	4301      	orrs	r1, r0
 80047e2:	6191      	str	r1, [r2, #24]
 80047e4:	6993      	ldr	r3, [r2, #24]
 80047e6:	4003      	ands	r3, r0
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80047ec:	2200      	movs	r2, #0
 80047ee:	2100      	movs	r1, #0
 80047f0:	2016      	movs	r0, #22
 80047f2:	f7fd ff13 	bl	800261c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80047f6:	2016      	movs	r0, #22
 80047f8:	f7fd ff44 	bl	8002684 <HAL_NVIC_EnableIRQ>
}
 80047fc:	e7ea      	b.n	80047d4 <HAL_TIM_Base_MspInit+0xc>
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	40014800 	.word	0x40014800
 8004804:	40021000 	.word	0x40021000

08004808 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004808:	4770      	bx	lr

0800480a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800480a:	e7fe      	b.n	800480a <HardFault_Handler>

0800480c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800480c:	4770      	bx	lr

0800480e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800480e:	4770      	bx	lr

08004810 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004810:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004812:	f7fd fcb3 	bl	800217c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004816:	f7fd ff6c 	bl	80026f2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800481a:	bd10      	pop	{r4, pc}

0800481c <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 800481c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800481e:	4802      	ldr	r0, [pc, #8]	; (8004828 <DMA1_Channel1_IRQHandler+0xc>)
 8004820:	f7fd ffef 	bl	8002802 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004824:	bd10      	pop	{r4, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	2000014c 	.word	0x2000014c

0800482c <TIM17_IRQHandler>:

/**
* @brief This function handles TIM17 global interrupt.
*/
void TIM17_IRQHandler(void)
{
 800482c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800482e:	4802      	ldr	r0, [pc, #8]	; (8004838 <TIM17_IRQHandler+0xc>)
 8004830:	f7ff f831 	bl	8003896 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004834:	bd10      	pop	{r4, pc}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	200000c8 	.word	0x200000c8

0800483c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <SystemInit+0x48>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	2101      	movs	r1, #1
 8004842:	430a      	orrs	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	480f      	ldr	r0, [pc, #60]	; (8004888 <SystemInit+0x4c>)
 800484a:	4002      	ands	r2, r0
 800484c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	480e      	ldr	r0, [pc, #56]	; (800488c <SystemInit+0x50>)
 8004852:	4002      	ands	r2, r0
 8004854:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	480d      	ldr	r0, [pc, #52]	; (8004890 <SystemInit+0x54>)
 800485a:	4002      	ands	r2, r0
 800485c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	480c      	ldr	r0, [pc, #48]	; (8004894 <SystemInit+0x58>)
 8004862:	4002      	ands	r2, r0
 8004864:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	200f      	movs	r0, #15
 800486a:	4382      	bics	r2, r0
 800486c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800486e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004870:	4809      	ldr	r0, [pc, #36]	; (8004898 <SystemInit+0x5c>)
 8004872:	4002      	ands	r2, r0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004878:	438a      	bics	r2, r1
 800487a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800487c:	2200      	movs	r2, #0
 800487e:	609a      	str	r2, [r3, #8]

}
 8004880:	4770      	bx	lr
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	40021000 	.word	0x40021000
 8004888:	08ffb80c 	.word	0x08ffb80c
 800488c:	fef6ffff 	.word	0xfef6ffff
 8004890:	fffbffff 	.word	0xfffbffff
 8004894:	ffc0ffff 	.word	0xffc0ffff
 8004898:	fffffeec 	.word	0xfffffeec

0800489c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800489c:	480d      	ldr	r0, [pc, #52]	; (80048d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800489e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048a0:	480d      	ldr	r0, [pc, #52]	; (80048d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80048a2:	490e      	ldr	r1, [pc, #56]	; (80048dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80048a4:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <LoopForever+0xe>)
  movs r3, #0
 80048a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048a8:	e002      	b.n	80048b0 <LoopCopyDataInit>

080048aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ae:	3304      	adds	r3, #4

080048b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048b4:	d3f9      	bcc.n	80048aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048b6:	4a0b      	ldr	r2, [pc, #44]	; (80048e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048b8:	4c0b      	ldr	r4, [pc, #44]	; (80048e8 <LoopForever+0x16>)
  movs r3, #0
 80048ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048bc:	e001      	b.n	80048c2 <LoopFillZerobss>

080048be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048c0:	3204      	adds	r2, #4

080048c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048c4:	d3fb      	bcc.n	80048be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80048c6:	f7ff ffb9 	bl	800483c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80048ca:	f000 f811 	bl	80048f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048ce:	f7ff fd61 	bl	8004394 <main>

080048d2 <LoopForever>:

LoopForever:
    b LoopForever
 80048d2:	e7fe      	b.n	80048d2 <LoopForever>
  ldr   r0, =_estack
 80048d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80048d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048dc:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80048e0:	08004b84 	.word	0x08004b84
  ldr r2, =_sbss
 80048e4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80048e8:	200001e4 	.word	0x200001e4

080048ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048ec:	e7fe      	b.n	80048ec <ADC1_IRQHandler>
	...

080048f0 <__libc_init_array>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	2600      	movs	r6, #0
 80048f4:	4d0c      	ldr	r5, [pc, #48]	; (8004928 <__libc_init_array+0x38>)
 80048f6:	4c0d      	ldr	r4, [pc, #52]	; (800492c <__libc_init_array+0x3c>)
 80048f8:	1b64      	subs	r4, r4, r5
 80048fa:	10a4      	asrs	r4, r4, #2
 80048fc:	42a6      	cmp	r6, r4
 80048fe:	d109      	bne.n	8004914 <__libc_init_array+0x24>
 8004900:	2600      	movs	r6, #0
 8004902:	f000 f819 	bl	8004938 <_init>
 8004906:	4d0a      	ldr	r5, [pc, #40]	; (8004930 <__libc_init_array+0x40>)
 8004908:	4c0a      	ldr	r4, [pc, #40]	; (8004934 <__libc_init_array+0x44>)
 800490a:	1b64      	subs	r4, r4, r5
 800490c:	10a4      	asrs	r4, r4, #2
 800490e:	42a6      	cmp	r6, r4
 8004910:	d105      	bne.n	800491e <__libc_init_array+0x2e>
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	00b3      	lsls	r3, r6, #2
 8004916:	58eb      	ldr	r3, [r5, r3]
 8004918:	4798      	blx	r3
 800491a:	3601      	adds	r6, #1
 800491c:	e7ee      	b.n	80048fc <__libc_init_array+0xc>
 800491e:	00b3      	lsls	r3, r6, #2
 8004920:	58eb      	ldr	r3, [r5, r3]
 8004922:	4798      	blx	r3
 8004924:	3601      	adds	r6, #1
 8004926:	e7f2      	b.n	800490e <__libc_init_array+0x1e>
 8004928:	08004b7c 	.word	0x08004b7c
 800492c:	08004b7c 	.word	0x08004b7c
 8004930:	08004b7c 	.word	0x08004b7c
 8004934:	08004b80 	.word	0x08004b80

08004938 <_init>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr

08004944 <_fini>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr
