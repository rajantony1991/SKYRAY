
stm32_1Phase_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  20000000  08002e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a0  20000048  08002ec8  00020048  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200001e8  08002ec8  000201e8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  9 .debug_info   000164b7  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002cd8  00000000  00000000  00036527  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008eeb  00000000  00000000  000391ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c20  00000000  00000000  000420f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b70  00000000  00000000  00042d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000063cc  00000000  00000000  00043880  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ae7  00000000  00000000  00049c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d733  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001eec  00000000  00000000  0004d7b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002cb4 	.word	0x08002cb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	08002cb4 	.word	0x08002cb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Display_event>:
const bool E[]={1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,1};
const bool F[]={1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0};
const bool G[]={0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,0,1};

void Display_event(uint8_t LED1 , uint8_t LED2 , uint8_t LED3 , uint8_t LED4 , uint8_t Blink)
{
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	0007      	movs	r7, r0
 8000224:	000e      	movs	r6, r1
 8000226:	0015      	movs	r5, r2
 8000228:	001c      	movs	r4, r3
 800022a:	ab06      	add	r3, sp, #24
 800022c:	781a      	ldrb	r2, [r3, #0]

	  switch(Segment)
 800022e:	4bcc      	ldr	r3, [pc, #816]	; (8000560 <Display_event+0x340>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	b2db      	uxtb	r3, r3
 8000234:	2b02      	cmp	r3, #2
 8000236:	d100      	bne.n	800023a <Display_event+0x1a>
 8000238:	e0be      	b.n	80003b8 <Display_event+0x198>
 800023a:	d940      	bls.n	80002be <Display_event+0x9e>
 800023c:	2b03      	cmp	r3, #3
 800023e:	d100      	bne.n	8000242 <Display_event+0x22>
 8000240:	e13f      	b.n	80004c2 <Display_event+0x2a2>
 8000242:	2b04      	cmp	r3, #4
 8000244:	d000      	beq.n	8000248 <Display_event+0x28>
 8000246:	e09d      	b.n	8000384 <Display_event+0x164>
			 	  	 GPIOA->BRR = (uint32_t)LED3_Pin;
			 	  	 break;
			 	   }
			 	   case 4:
			 	   {
			 	  	 GPIOA->BSRR =(uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8000248:	2390      	movs	r3, #144	; 0x90
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	21f0      	movs	r1, #240	; 0xf0
 800024e:	0109      	lsls	r1, r1, #4
 8000250:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 8000252:	2190      	movs	r1, #144	; 0x90
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	6199      	str	r1, [r3, #24]
			 	  	 GPIOF->BSRR = B_Pin|C_Pin;
 8000258:	21c0      	movs	r1, #192	; 0xc0
 800025a:	4bc2      	ldr	r3, [pc, #776]	; (8000564 <Display_event+0x344>)
 800025c:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 800025e:	21f0      	movs	r1, #240	; 0xf0
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	4bc1      	ldr	r3, [pc, #772]	; (8000568 <Display_event+0x348>)
 8000264:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==4||Blink==5||Blink==7||Blink==9)
 8000266:	1f13      	subs	r3, r2, #4
 8000268:	b2db      	uxtb	r3, r3
 800026a:	2b01      	cmp	r3, #1
 800026c:	d800      	bhi.n	8000270 <Display_event+0x50>
 800026e:	e1c4      	b.n	80005fa <Display_event+0x3da>
 8000270:	2a07      	cmp	r2, #7
 8000272:	d100      	bne.n	8000276 <Display_event+0x56>
 8000274:	e1c1      	b.n	80005fa <Display_event+0x3da>
 8000276:	2a09      	cmp	r2, #9
 8000278:	d100      	bne.n	800027c <Display_event+0x5c>
 800027a:	e1be      	b.n	80005fa <Display_event+0x3da>
			 	  		}

			 	  	 }
			 	  	 else
			 	  	 {
			 	   	 GPIOA->BRR  = (A[LED4]<<15)|(D[LED4]<<12);
 800027c:	4bbb      	ldr	r3, [pc, #748]	; (800056c <Display_event+0x34c>)
 800027e:	5d1b      	ldrb	r3, [r3, r4]
 8000280:	03db      	lsls	r3, r3, #15
 8000282:	4abb      	ldr	r2, [pc, #748]	; (8000570 <Display_event+0x350>)
 8000284:	5d12      	ldrb	r2, [r2, r4]
 8000286:	0312      	lsls	r2, r2, #12
 8000288:	4313      	orrs	r3, r2
 800028a:	2290      	movs	r2, #144	; 0x90
 800028c:	05d2      	lsls	r2, r2, #23
 800028e:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOF->BRR  = (B[LED4]<<7) |(C[LED4]<<6);
 8000290:	4bb8      	ldr	r3, [pc, #736]	; (8000574 <Display_event+0x354>)
 8000292:	5d1b      	ldrb	r3, [r3, r4]
 8000294:	01db      	lsls	r3, r3, #7
 8000296:	4ab8      	ldr	r2, [pc, #736]	; (8000578 <Display_event+0x358>)
 8000298:	5d12      	ldrb	r2, [r2, r4]
 800029a:	0192      	lsls	r2, r2, #6
 800029c:	4313      	orrs	r3, r2
 800029e:	4ab1      	ldr	r2, [pc, #708]	; (8000564 <Display_event+0x344>)
 80002a0:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOB->BRR  = (E[LED4]<<15)|(F[LED4]<<14)|(G[LED4]<<13);
 80002a2:	4bb6      	ldr	r3, [pc, #728]	; (800057c <Display_event+0x35c>)
 80002a4:	5d1b      	ldrb	r3, [r3, r4]
 80002a6:	03db      	lsls	r3, r3, #15
 80002a8:	4ab5      	ldr	r2, [pc, #724]	; (8000580 <Display_event+0x360>)
 80002aa:	5d12      	ldrb	r2, [r2, r4]
 80002ac:	0392      	lsls	r2, r2, #14
 80002ae:	4313      	orrs	r3, r2
 80002b0:	4ab4      	ldr	r2, [pc, #720]	; (8000584 <Display_event+0x364>)
 80002b2:	5d12      	ldrb	r2, [r2, r4]
 80002b4:	0352      	lsls	r2, r2, #13
 80002b6:	4313      	orrs	r3, r2
 80002b8:	4aab      	ldr	r2, [pc, #684]	; (8000568 <Display_event+0x348>)
 80002ba:	6293      	str	r3, [r2, #40]	; 0x28
 80002bc:	e1c1      	b.n	8000642 <Display_event+0x422>
	  switch(Segment)
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d160      	bne.n	8000384 <Display_event+0x164>
			 	  	 GPIOA->BSRR  = (uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 80002c2:	2390      	movs	r3, #144	; 0x90
 80002c4:	05db      	lsls	r3, r3, #23
 80002c6:	21f0      	movs	r1, #240	; 0xf0
 80002c8:	0109      	lsls	r1, r1, #4
 80002ca:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 80002cc:	2190      	movs	r1, #144	; 0x90
 80002ce:	0209      	lsls	r1, r1, #8
 80002d0:	6199      	str	r1, [r3, #24]
			 	     GPIOF->BSRR = B_Pin|C_Pin;
 80002d2:	21c0      	movs	r1, #192	; 0xc0
 80002d4:	4ba3      	ldr	r3, [pc, #652]	; (8000564 <Display_event+0x344>)
 80002d6:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 80002d8:	21f0      	movs	r1, #240	; 0xf0
 80002da:	0209      	lsls	r1, r1, #8
 80002dc:	4ba2      	ldr	r3, [pc, #648]	; (8000568 <Display_event+0x348>)
 80002de:	6199      	str	r1, [r3, #24]
                     if(Blink==1||Blink==5||Blink==6||Blink==8)
 80002e0:	2a01      	cmp	r2, #1
 80002e2:	d026      	beq.n	8000332 <Display_event+0x112>
 80002e4:	2a05      	cmp	r2, #5
 80002e6:	d024      	beq.n	8000332 <Display_event+0x112>
 80002e8:	2a06      	cmp	r2, #6
 80002ea:	d022      	beq.n	8000332 <Display_event+0x112>
 80002ec:	2a08      	cmp	r2, #8
 80002ee:	d020      	beq.n	8000332 <Display_event+0x112>
                      GPIOA->BRR  = (A[LED1]<<15)|(D[LED1]<<12);
 80002f0:	4b9e      	ldr	r3, [pc, #632]	; (800056c <Display_event+0x34c>)
 80002f2:	5c1b      	ldrb	r3, [r3, r0]
 80002f4:	03db      	lsls	r3, r3, #15
 80002f6:	4a9e      	ldr	r2, [pc, #632]	; (8000570 <Display_event+0x350>)
 80002f8:	5c12      	ldrb	r2, [r2, r0]
 80002fa:	0312      	lsls	r2, r2, #12
 80002fc:	4313      	orrs	r3, r2
 80002fe:	2290      	movs	r2, #144	; 0x90
 8000300:	05d2      	lsls	r2, r2, #23
 8000302:	6293      	str	r3, [r2, #40]	; 0x28
                      GPIOF->BRR  = (B[LED1]<<7) |(C[LED1]<<6);
 8000304:	4b9b      	ldr	r3, [pc, #620]	; (8000574 <Display_event+0x354>)
 8000306:	5c1b      	ldrb	r3, [r3, r0]
 8000308:	01db      	lsls	r3, r3, #7
 800030a:	4a9b      	ldr	r2, [pc, #620]	; (8000578 <Display_event+0x358>)
 800030c:	5c12      	ldrb	r2, [r2, r0]
 800030e:	0192      	lsls	r2, r2, #6
 8000310:	4313      	orrs	r3, r2
 8000312:	4a94      	ldr	r2, [pc, #592]	; (8000564 <Display_event+0x344>)
 8000314:	6293      	str	r3, [r2, #40]	; 0x28
                      GPIOB->BRR  = (E[LED1]<<15)|(F[LED1]<<14)|(G[LED1]<<13);
 8000316:	4b99      	ldr	r3, [pc, #612]	; (800057c <Display_event+0x35c>)
 8000318:	5c1b      	ldrb	r3, [r3, r0]
 800031a:	03db      	lsls	r3, r3, #15
 800031c:	4a98      	ldr	r2, [pc, #608]	; (8000580 <Display_event+0x360>)
 800031e:	5c12      	ldrb	r2, [r2, r0]
 8000320:	0392      	lsls	r2, r2, #14
 8000322:	4313      	orrs	r3, r2
 8000324:	4a97      	ldr	r2, [pc, #604]	; (8000584 <Display_event+0x364>)
 8000326:	5c12      	ldrb	r2, [r2, r0]
 8000328:	0352      	lsls	r2, r2, #13
 800032a:	4313      	orrs	r3, r2
 800032c:	4a8e      	ldr	r2, [pc, #568]	; (8000568 <Display_event+0x348>)
 800032e:	6293      	str	r3, [r2, #40]	; 0x28
 8000330:	e023      	b.n	800037a <Display_event+0x15a>
                    	 if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8000332:	4b95      	ldr	r3, [pc, #596]	; (8000588 <Display_event+0x368>)
 8000334:	789b      	ldrb	r3, [r3, #2]
 8000336:	07db      	lsls	r3, r3, #31
 8000338:	d431      	bmi.n	800039e <Display_event+0x17e>
                    	GPIOA->BRR  = (A[LED1]<<15)|(D[LED1]<<12);
 800033a:	4b8c      	ldr	r3, [pc, #560]	; (800056c <Display_event+0x34c>)
 800033c:	5ddb      	ldrb	r3, [r3, r7]
 800033e:	03db      	lsls	r3, r3, #15
 8000340:	4a8b      	ldr	r2, [pc, #556]	; (8000570 <Display_event+0x350>)
 8000342:	5dd2      	ldrb	r2, [r2, r7]
 8000344:	0312      	lsls	r2, r2, #12
 8000346:	4313      	orrs	r3, r2
 8000348:	2290      	movs	r2, #144	; 0x90
 800034a:	05d2      	lsls	r2, r2, #23
 800034c:	6293      	str	r3, [r2, #40]	; 0x28
                    	GPIOF->BRR  = (B[LED1]<<7) |(C[LED1]<<6);
 800034e:	4b89      	ldr	r3, [pc, #548]	; (8000574 <Display_event+0x354>)
 8000350:	5ddb      	ldrb	r3, [r3, r7]
 8000352:	01db      	lsls	r3, r3, #7
 8000354:	4a88      	ldr	r2, [pc, #544]	; (8000578 <Display_event+0x358>)
 8000356:	5dd2      	ldrb	r2, [r2, r7]
 8000358:	0192      	lsls	r2, r2, #6
 800035a:	4313      	orrs	r3, r2
 800035c:	4a81      	ldr	r2, [pc, #516]	; (8000564 <Display_event+0x344>)
 800035e:	6293      	str	r3, [r2, #40]	; 0x28
                    	GPIOB->BRR  = (E[LED1]<<15)|(F[LED1]<<14)|(G[LED1]<<13);
 8000360:	4b86      	ldr	r3, [pc, #536]	; (800057c <Display_event+0x35c>)
 8000362:	5ddb      	ldrb	r3, [r3, r7]
 8000364:	03db      	lsls	r3, r3, #15
 8000366:	4a86      	ldr	r2, [pc, #536]	; (8000580 <Display_event+0x360>)
 8000368:	5dd2      	ldrb	r2, [r2, r7]
 800036a:	0392      	lsls	r2, r2, #14
 800036c:	4313      	orrs	r3, r2
 800036e:	4a85      	ldr	r2, [pc, #532]	; (8000584 <Display_event+0x364>)
 8000370:	5dd2      	ldrb	r2, [r2, r7]
 8000372:	0352      	lsls	r2, r2, #13
 8000374:	4313      	orrs	r3, r2
 8000376:	4a7c      	ldr	r2, [pc, #496]	; (8000568 <Display_event+0x348>)
 8000378:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR = (uint32_t)LED1_Pin ;
 800037a:	2280      	movs	r2, #128	; 0x80
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
			 	   }



			 	   }
			  Segment++;
 8000384:	4a76      	ldr	r2, [pc, #472]	; (8000560 <Display_event+0x340>)
 8000386:	7813      	ldrb	r3, [r2, #0]
 8000388:	3301      	adds	r3, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	7013      	strb	r3, [r2, #0]
			 	 	    if(Segment>4)
 800038e:	7813      	ldrb	r3, [r2, #0]
 8000390:	b2db      	uxtb	r3, r3
 8000392:	2b04      	cmp	r3, #4
 8000394:	d902      	bls.n	800039c <Display_event+0x17c>
			 	 	   {

			 	 	    Segment = 1;
 8000396:	2201      	movs	r2, #1
 8000398:	4b71      	ldr	r3, [pc, #452]	; (8000560 <Display_event+0x340>)
 800039a:	701a      	strb	r2, [r3, #0]





}
 800039c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    	 if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 800039e:	2110      	movs	r1, #16
 80003a0:	4871      	ldr	r0, [pc, #452]	; (8000568 <Display_event+0x348>)
 80003a2:	f000 ff5f 	bl	8001264 <HAL_GPIO_ReadPin>
 80003a6:	2800      	cmp	r0, #0
 80003a8:	d0c7      	beq.n	800033a <Display_event+0x11a>
 80003aa:	2108      	movs	r1, #8
 80003ac:	486e      	ldr	r0, [pc, #440]	; (8000568 <Display_event+0x348>)
 80003ae:	f000 ff59 	bl	8001264 <HAL_GPIO_ReadPin>
 80003b2:	2800      	cmp	r0, #0
 80003b4:	d1e1      	bne.n	800037a <Display_event+0x15a>
 80003b6:	e7c0      	b.n	800033a <Display_event+0x11a>
			 	  	 GPIOA->BSRR   =(uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 80003b8:	2390      	movs	r3, #144	; 0x90
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	21f0      	movs	r1, #240	; 0xf0
 80003be:	0109      	lsls	r1, r1, #4
 80003c0:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 80003c2:	2190      	movs	r1, #144	; 0x90
 80003c4:	0209      	lsls	r1, r1, #8
 80003c6:	6199      	str	r1, [r3, #24]
			 	  	 GPIOF->BSRR = B_Pin|C_Pin;
 80003c8:	21c0      	movs	r1, #192	; 0xc0
 80003ca:	4b66      	ldr	r3, [pc, #408]	; (8000564 <Display_event+0x344>)
 80003cc:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 80003ce:	21f0      	movs	r1, #240	; 0xf0
 80003d0:	0209      	lsls	r1, r1, #8
 80003d2:	4b65      	ldr	r3, [pc, #404]	; (8000568 <Display_event+0x348>)
 80003d4:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==8||Blink==9||Blink==0)
 80003d6:	0013      	movs	r3, r2
 80003d8:	3b08      	subs	r3, #8
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d901      	bls.n	80003e4 <Display_event+0x1c4>
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	d10e      	bne.n	8000402 <Display_event+0x1e2>
			 	  		 if((Blink==0)&&(gTime.Seconds%2)==0)
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	d108      	bne.n	80003fa <Display_event+0x1da>
 80003e8:	4b67      	ldr	r3, [pc, #412]	; (8000588 <Display_event+0x368>)
 80003ea:	789b      	ldrb	r3, [r3, #2]
 80003ec:	07db      	lsls	r3, r3, #31
 80003ee:	d404      	bmi.n	80003fa <Display_event+0x1da>
			 	  		   GPIOB->BSRR  = DB_Pin;
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	0149      	lsls	r1, r1, #5
 80003f4:	4b5c      	ldr	r3, [pc, #368]	; (8000568 <Display_event+0x348>)
 80003f6:	6199      	str	r1, [r3, #24]
 80003f8:	e003      	b.n	8000402 <Display_event+0x1e2>
			 	  	     GPIOB->BRR  = DB_Pin;
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	0149      	lsls	r1, r1, #5
 80003fe:	4b5a      	ldr	r3, [pc, #360]	; (8000568 <Display_event+0x348>)
 8000400:	6299      	str	r1, [r3, #40]	; 0x28
			 	  	 if(Blink==2||Blink==5||Blink==6||Blink==8)
 8000402:	2a02      	cmp	r2, #2
 8000404:	d026      	beq.n	8000454 <Display_event+0x234>
 8000406:	2a05      	cmp	r2, #5
 8000408:	d024      	beq.n	8000454 <Display_event+0x234>
 800040a:	2a06      	cmp	r2, #6
 800040c:	d022      	beq.n	8000454 <Display_event+0x234>
 800040e:	2a08      	cmp	r2, #8
 8000410:	d020      	beq.n	8000454 <Display_event+0x234>
			 	  	 GPIOA->BRR  = (A[LED2]<<15)|(D[LED2]<<12);
 8000412:	4b56      	ldr	r3, [pc, #344]	; (800056c <Display_event+0x34c>)
 8000414:	5d9b      	ldrb	r3, [r3, r6]
 8000416:	03db      	lsls	r3, r3, #15
 8000418:	4a55      	ldr	r2, [pc, #340]	; (8000570 <Display_event+0x350>)
 800041a:	5d92      	ldrb	r2, [r2, r6]
 800041c:	0312      	lsls	r2, r2, #12
 800041e:	4313      	orrs	r3, r2
 8000420:	2290      	movs	r2, #144	; 0x90
 8000422:	05d2      	lsls	r2, r2, #23
 8000424:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOF->BRR  = (B[LED2]<<7) |(C[LED2]<<6);
 8000426:	4b53      	ldr	r3, [pc, #332]	; (8000574 <Display_event+0x354>)
 8000428:	5d9b      	ldrb	r3, [r3, r6]
 800042a:	01db      	lsls	r3, r3, #7
 800042c:	4a52      	ldr	r2, [pc, #328]	; (8000578 <Display_event+0x358>)
 800042e:	5d92      	ldrb	r2, [r2, r6]
 8000430:	0192      	lsls	r2, r2, #6
 8000432:	4313      	orrs	r3, r2
 8000434:	4a4b      	ldr	r2, [pc, #300]	; (8000564 <Display_event+0x344>)
 8000436:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOB->BRR  = (E[LED2]<<15)|(F[LED2]<<14)|(G[LED2]<<13);
 8000438:	4b50      	ldr	r3, [pc, #320]	; (800057c <Display_event+0x35c>)
 800043a:	5d9b      	ldrb	r3, [r3, r6]
 800043c:	03db      	lsls	r3, r3, #15
 800043e:	4a50      	ldr	r2, [pc, #320]	; (8000580 <Display_event+0x360>)
 8000440:	5d92      	ldrb	r2, [r2, r6]
 8000442:	0392      	lsls	r2, r2, #14
 8000444:	4313      	orrs	r3, r2
 8000446:	4a4f      	ldr	r2, [pc, #316]	; (8000584 <Display_event+0x364>)
 8000448:	5d92      	ldrb	r2, [r2, r6]
 800044a:	0352      	lsls	r2, r2, #13
 800044c:	4313      	orrs	r3, r2
 800044e:	4a46      	ldr	r2, [pc, #280]	; (8000568 <Display_event+0x348>)
 8000450:	6293      	str	r3, [r2, #40]	; 0x28
 8000452:	e023      	b.n	800049c <Display_event+0x27c>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 8000454:	4b4c      	ldr	r3, [pc, #304]	; (8000588 <Display_event+0x368>)
 8000456:	789b      	ldrb	r3, [r3, #2]
 8000458:	07db      	lsls	r3, r3, #31
 800045a:	d425      	bmi.n	80004a8 <Display_event+0x288>
			 	  			GPIOA->BRR  = (A[LED2]<<15)|(D[LED2]<<12);
 800045c:	4b43      	ldr	r3, [pc, #268]	; (800056c <Display_event+0x34c>)
 800045e:	5d9b      	ldrb	r3, [r3, r6]
 8000460:	03db      	lsls	r3, r3, #15
 8000462:	4a43      	ldr	r2, [pc, #268]	; (8000570 <Display_event+0x350>)
 8000464:	5d92      	ldrb	r2, [r2, r6]
 8000466:	0312      	lsls	r2, r2, #12
 8000468:	4313      	orrs	r3, r2
 800046a:	2290      	movs	r2, #144	; 0x90
 800046c:	05d2      	lsls	r2, r2, #23
 800046e:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOF->BRR  = (B[LED2]<<7) |(C[LED2]<<6);
 8000470:	4b40      	ldr	r3, [pc, #256]	; (8000574 <Display_event+0x354>)
 8000472:	5d9b      	ldrb	r3, [r3, r6]
 8000474:	01db      	lsls	r3, r3, #7
 8000476:	4a40      	ldr	r2, [pc, #256]	; (8000578 <Display_event+0x358>)
 8000478:	5d92      	ldrb	r2, [r2, r6]
 800047a:	0192      	lsls	r2, r2, #6
 800047c:	4313      	orrs	r3, r2
 800047e:	4a39      	ldr	r2, [pc, #228]	; (8000564 <Display_event+0x344>)
 8000480:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	        GPIOB->BRR  = (E[LED2]<<15)|(F[LED2]<<14)|(G[LED2]<<13);
 8000482:	4b3e      	ldr	r3, [pc, #248]	; (800057c <Display_event+0x35c>)
 8000484:	5d9b      	ldrb	r3, [r3, r6]
 8000486:	03db      	lsls	r3, r3, #15
 8000488:	4a3d      	ldr	r2, [pc, #244]	; (8000580 <Display_event+0x360>)
 800048a:	5d92      	ldrb	r2, [r2, r6]
 800048c:	0392      	lsls	r2, r2, #14
 800048e:	4313      	orrs	r3, r2
 8000490:	4a3c      	ldr	r2, [pc, #240]	; (8000584 <Display_event+0x364>)
 8000492:	5d92      	ldrb	r2, [r2, r6]
 8000494:	0352      	lsls	r2, r2, #13
 8000496:	4313      	orrs	r3, r2
 8000498:	4a33      	ldr	r2, [pc, #204]	; (8000568 <Display_event+0x348>)
 800049a:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOA->BRR  =(uint32_t)LED2_Pin ;
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	2390      	movs	r3, #144	; 0x90
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 80004a6:	e76d      	b.n	8000384 <Display_event+0x164>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 80004a8:	2110      	movs	r1, #16
 80004aa:	482f      	ldr	r0, [pc, #188]	; (8000568 <Display_event+0x348>)
 80004ac:	f000 feda 	bl	8001264 <HAL_GPIO_ReadPin>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d0d3      	beq.n	800045c <Display_event+0x23c>
 80004b4:	2108      	movs	r1, #8
 80004b6:	482c      	ldr	r0, [pc, #176]	; (8000568 <Display_event+0x348>)
 80004b8:	f000 fed4 	bl	8001264 <HAL_GPIO_ReadPin>
 80004bc:	2800      	cmp	r0, #0
 80004be:	d1ed      	bne.n	800049c <Display_event+0x27c>
 80004c0:	e7cc      	b.n	800045c <Display_event+0x23c>
			 	  	 GPIOA->BSRR =  (uint32_t)(LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	21f0      	movs	r1, #240	; 0xf0
 80004c8:	0109      	lsls	r1, r1, #4
 80004ca:	6199      	str	r1, [r3, #24]
			 	  	 GPIOA->BSRR = A_Pin|D_Pin;
 80004cc:	2190      	movs	r1, #144	; 0x90
 80004ce:	0209      	lsls	r1, r1, #8
 80004d0:	6199      	str	r1, [r3, #24]
			 	     GPIOF->BSRR = B_Pin|C_Pin;
 80004d2:	21c0      	movs	r1, #192	; 0xc0
 80004d4:	4b23      	ldr	r3, [pc, #140]	; (8000564 <Display_event+0x344>)
 80004d6:	6199      	str	r1, [r3, #24]
			 	  	 GPIOB->BSRR = E_Pin|F_Pin|G_Pin|DB_Pin;
 80004d8:	21f0      	movs	r1, #240	; 0xf0
 80004da:	0209      	lsls	r1, r1, #8
 80004dc:	4b22      	ldr	r3, [pc, #136]	; (8000568 <Display_event+0x348>)
 80004de:	6199      	str	r1, [r3, #24]
			 	  	 if(Blink==8||Blink==9||Blink==0)
 80004e0:	0013      	movs	r3, r2
 80004e2:	3b08      	subs	r3, #8
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d901      	bls.n	80004ee <Display_event+0x2ce>
 80004ea:	2a00      	cmp	r2, #0
 80004ec:	d10e      	bne.n	800050c <Display_event+0x2ec>
			 	  		 if((Blink==0)&&(gTime.Seconds%2)==0)
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	d108      	bne.n	8000504 <Display_event+0x2e4>
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <Display_event+0x368>)
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	07db      	lsls	r3, r3, #31
 80004f8:	d404      	bmi.n	8000504 <Display_event+0x2e4>
			 	  		   GPIOB->BSRR  = G_Pin;
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0189      	lsls	r1, r1, #6
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <Display_event+0x348>)
 8000500:	6199      	str	r1, [r3, #24]
 8000502:	e003      	b.n	800050c <Display_event+0x2ec>
			 	  	     GPIOB->BRR  = G_Pin;
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0189      	lsls	r1, r1, #6
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <Display_event+0x348>)
 800050a:	6299      	str	r1, [r3, #40]	; 0x28
			 	  	 if(Blink==3||Blink==5||Blink==7||Blink==9)
 800050c:	2a03      	cmp	r2, #3
 800050e:	d03d      	beq.n	800058c <Display_event+0x36c>
 8000510:	2a05      	cmp	r2, #5
 8000512:	d03b      	beq.n	800058c <Display_event+0x36c>
 8000514:	2a07      	cmp	r2, #7
 8000516:	d039      	beq.n	800058c <Display_event+0x36c>
 8000518:	2a09      	cmp	r2, #9
 800051a:	d037      	beq.n	800058c <Display_event+0x36c>
			 	  	 GPIOA->BRR  = (A[LED3]<<15)|(D[LED3]<<12);
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <Display_event+0x34c>)
 800051e:	5d5b      	ldrb	r3, [r3, r5]
 8000520:	03db      	lsls	r3, r3, #15
 8000522:	4a13      	ldr	r2, [pc, #76]	; (8000570 <Display_event+0x350>)
 8000524:	5d52      	ldrb	r2, [r2, r5]
 8000526:	0312      	lsls	r2, r2, #12
 8000528:	4313      	orrs	r3, r2
 800052a:	2290      	movs	r2, #144	; 0x90
 800052c:	05d2      	lsls	r2, r2, #23
 800052e:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOF->BRR  = (B[LED3]<<7) |(C[LED3]<<6);
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <Display_event+0x354>)
 8000532:	5d5b      	ldrb	r3, [r3, r5]
 8000534:	01db      	lsls	r3, r3, #7
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <Display_event+0x358>)
 8000538:	5d52      	ldrb	r2, [r2, r5]
 800053a:	0192      	lsls	r2, r2, #6
 800053c:	4313      	orrs	r3, r2
 800053e:	4a09      	ldr	r2, [pc, #36]	; (8000564 <Display_event+0x344>)
 8000540:	6293      	str	r3, [r2, #40]	; 0x28
			 	     GPIOB->BRR  = (E[LED3]<<15)|(F[LED3]<<14)|(G[LED3]<<12);
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <Display_event+0x35c>)
 8000544:	5d5b      	ldrb	r3, [r3, r5]
 8000546:	03db      	lsls	r3, r3, #15
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <Display_event+0x360>)
 800054a:	5d52      	ldrb	r2, [r2, r5]
 800054c:	0392      	lsls	r2, r2, #14
 800054e:	4313      	orrs	r3, r2
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <Display_event+0x364>)
 8000552:	5d52      	ldrb	r2, [r2, r5]
 8000554:	0312      	lsls	r2, r2, #12
 8000556:	4313      	orrs	r3, r2
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <Display_event+0x348>)
 800055a:	6293      	str	r3, [r2, #40]	; 0x28
 800055c:	e03a      	b.n	80005d4 <Display_event+0x3b4>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	20000000 	.word	0x20000000
 8000564:	48001400 	.word	0x48001400
 8000568:	48000400 	.word	0x48000400
 800056c:	08002cec 	.word	0x08002cec
 8000570:	08002d70 	.word	0x08002d70
 8000574:	08002d18 	.word	0x08002d18
 8000578:	08002d44 	.word	0x08002d44
 800057c:	08002d9c 	.word	0x08002d9c
 8000580:	08002dc8 	.word	0x08002dc8
 8000584:	08002df4 	.word	0x08002df4
 8000588:	200000f8 	.word	0x200000f8
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 800058c:	4b36      	ldr	r3, [pc, #216]	; (8000668 <Display_event+0x448>)
 800058e:	789b      	ldrb	r3, [r3, #2]
 8000590:	07db      	lsls	r3, r3, #31
 8000592:	d425      	bmi.n	80005e0 <Display_event+0x3c0>
			 	  			GPIOA->BRR  = (A[LED3]<<15)|(D[LED3]<<12);
 8000594:	4b35      	ldr	r3, [pc, #212]	; (800066c <Display_event+0x44c>)
 8000596:	5d5b      	ldrb	r3, [r3, r5]
 8000598:	03db      	lsls	r3, r3, #15
 800059a:	4a35      	ldr	r2, [pc, #212]	; (8000670 <Display_event+0x450>)
 800059c:	5d52      	ldrb	r2, [r2, r5]
 800059e:	0312      	lsls	r2, r2, #12
 80005a0:	4313      	orrs	r3, r2
 80005a2:	2290      	movs	r2, #144	; 0x90
 80005a4:	05d2      	lsls	r2, r2, #23
 80005a6:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOF->BRR  = (B[LED3]<<7) |(C[LED3]<<6);
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <Display_event+0x454>)
 80005aa:	5d5b      	ldrb	r3, [r3, r5]
 80005ac:	01db      	lsls	r3, r3, #7
 80005ae:	4a32      	ldr	r2, [pc, #200]	; (8000678 <Display_event+0x458>)
 80005b0:	5d52      	ldrb	r2, [r2, r5]
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	4313      	orrs	r3, r2
 80005b6:	4a31      	ldr	r2, [pc, #196]	; (800067c <Display_event+0x45c>)
 80005b8:	6293      	str	r3, [r2, #40]	; 0x28
			 	  			GPIOB->BRR  = (E[LED3]<<15)|(F[LED3]<<14)|(G[LED3]<<12);
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <Display_event+0x460>)
 80005bc:	5d5b      	ldrb	r3, [r3, r5]
 80005be:	03db      	lsls	r3, r3, #15
 80005c0:	4a30      	ldr	r2, [pc, #192]	; (8000684 <Display_event+0x464>)
 80005c2:	5d52      	ldrb	r2, [r2, r5]
 80005c4:	0392      	lsls	r2, r2, #14
 80005c6:	4313      	orrs	r3, r2
 80005c8:	4a2f      	ldr	r2, [pc, #188]	; (8000688 <Display_event+0x468>)
 80005ca:	5d52      	ldrb	r2, [r2, r5]
 80005cc:	0312      	lsls	r2, r2, #12
 80005ce:	4313      	orrs	r3, r2
 80005d0:	4a2e      	ldr	r2, [pc, #184]	; (800068c <Display_event+0x46c>)
 80005d2:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR = (uint32_t)LED3_Pin;
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	2390      	movs	r3, #144	; 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 80005de:	e6d1      	b.n	8000384 <Display_event+0x164>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 80005e0:	2110      	movs	r1, #16
 80005e2:	482a      	ldr	r0, [pc, #168]	; (800068c <Display_event+0x46c>)
 80005e4:	f000 fe3e 	bl	8001264 <HAL_GPIO_ReadPin>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	d0d3      	beq.n	8000594 <Display_event+0x374>
 80005ec:	2108      	movs	r1, #8
 80005ee:	4827      	ldr	r0, [pc, #156]	; (800068c <Display_event+0x46c>)
 80005f0:	f000 fe38 	bl	8001264 <HAL_GPIO_ReadPin>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d1ed      	bne.n	80005d4 <Display_event+0x3b4>
 80005f8:	e7cc      	b.n	8000594 <Display_event+0x374>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <Display_event+0x448>)
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	07db      	lsls	r3, r3, #31
 8000600:	d425      	bmi.n	800064e <Display_event+0x42e>
			 	  		 GPIOA->BRR  = (A[LED4]<<15)|(D[LED4]<<12);
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <Display_event+0x44c>)
 8000604:	5d1b      	ldrb	r3, [r3, r4]
 8000606:	03db      	lsls	r3, r3, #15
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <Display_event+0x450>)
 800060a:	5d12      	ldrb	r2, [r2, r4]
 800060c:	0312      	lsls	r2, r2, #12
 800060e:	4313      	orrs	r3, r2
 8000610:	2290      	movs	r2, #144	; 0x90
 8000612:	05d2      	lsls	r2, r2, #23
 8000614:	6293      	str	r3, [r2, #40]	; 0x28
			 	  		 GPIOF->BRR  = (B[LED4]<<7) |(C[LED4]<<6);
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <Display_event+0x454>)
 8000618:	5d1b      	ldrb	r3, [r3, r4]
 800061a:	01db      	lsls	r3, r3, #7
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <Display_event+0x458>)
 800061e:	5d12      	ldrb	r2, [r2, r4]
 8000620:	0192      	lsls	r2, r2, #6
 8000622:	4313      	orrs	r3, r2
 8000624:	4a15      	ldr	r2, [pc, #84]	; (800067c <Display_event+0x45c>)
 8000626:	6293      	str	r3, [r2, #40]	; 0x28
			 	  		 GPIOB->BRR  = (E[LED4]<<15)|(F[LED4]<<14)|(G[LED4]<<13);
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <Display_event+0x460>)
 800062a:	5d1b      	ldrb	r3, [r3, r4]
 800062c:	03db      	lsls	r3, r3, #15
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <Display_event+0x464>)
 8000630:	5d12      	ldrb	r2, [r2, r4]
 8000632:	0392      	lsls	r2, r2, #14
 8000634:	4313      	orrs	r3, r2
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <Display_event+0x468>)
 8000638:	5d12      	ldrb	r2, [r2, r4]
 800063a:	0352      	lsls	r2, r2, #13
 800063c:	4313      	orrs	r3, r2
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <Display_event+0x46c>)
 8000640:	6293      	str	r3, [r2, #40]	; 0x28
			 	  	 GPIOA->BRR  =(uint32_t)LED4_Pin ;
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	0052      	lsls	r2, r2, #1
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
			 	  	 break;
 800064c:	e69a      	b.n	8000384 <Display_event+0x164>
			 	  		if(((gTime.Seconds%2)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_up_Pin)==0)||(HAL_GPIO_ReadPin(GPIOB,SW_down_Pin)==0))
 800064e:	2110      	movs	r1, #16
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <Display_event+0x46c>)
 8000652:	f000 fe07 	bl	8001264 <HAL_GPIO_ReadPin>
 8000656:	2800      	cmp	r0, #0
 8000658:	d0d3      	beq.n	8000602 <Display_event+0x3e2>
 800065a:	2108      	movs	r1, #8
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <Display_event+0x46c>)
 800065e:	f000 fe01 	bl	8001264 <HAL_GPIO_ReadPin>
 8000662:	2800      	cmp	r0, #0
 8000664:	d1ed      	bne.n	8000642 <Display_event+0x422>
 8000666:	e7cc      	b.n	8000602 <Display_event+0x3e2>
 8000668:	200000f8 	.word	0x200000f8
 800066c:	08002cec 	.word	0x08002cec
 8000670:	08002d70 	.word	0x08002d70
 8000674:	08002d18 	.word	0x08002d18
 8000678:	08002d44 	.word	0x08002d44
 800067c:	48001400 	.word	0x48001400
 8000680:	08002d9c 	.word	0x08002d9c
 8000684:	08002dc8 	.word	0x08002dc8
 8000688:	08002df4 	.word	0x08002df4
 800068c:	48000400 	.word	0x48000400

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b510      	push	{r4, lr}
 8000692:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000694:	f001 f8fe 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 8000698:	21fa      	movs	r1, #250	; 0xfa
 800069a:	0089      	lsls	r1, r1, #2
 800069c:	f7ff fd34 	bl	8000108 <__udivsi3>
 80006a0:	f000 fad0 	bl	8000c44 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80006a4:	2200      	movs	r2, #0
 80006a6:	0021      	movs	r1, r4
 80006a8:	2001      	movs	r0, #1
 80006aa:	4240      	negs	r0, r0
 80006ac:	f000 fa8e 	bl	8000bcc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80006b0:	2000      	movs	r0, #0
 80006b2:	bd10      	pop	{r4, pc}

080006b4 <HAL_Init>:
{
 80006b4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_Init+0x1c>)
 80006b8:	6813      	ldr	r3, [r2, #0]
 80006ba:	2110      	movs	r1, #16
 80006bc:	430b      	orrs	r3, r1
 80006be:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff ffe5 	bl	8000690 <HAL_InitTick>
  HAL_MspInit();
 80006c6:	f002 f9bf 	bl	8002a48 <HAL_MspInit>
}
 80006ca:	2000      	movs	r0, #0
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	40022000 	.word	0x40022000

080006d4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80006d4:	4a02      	ldr	r2, [pc, #8]	; (80006e0 <HAL_IncTick+0xc>)
 80006d6:	6813      	ldr	r3, [r2, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	4770      	bx	lr
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	20000068 	.word	0x20000068

080006e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <HAL_GetTick+0x8>)
 80006e6:	6818      	ldr	r0, [r3, #0]
}
 80006e8:	4770      	bx	lr
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000068 	.word	0x20000068

080006f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80006f0:	b530      	push	{r4, r5, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f6:	f7ff fff5 	bl	80006e4 <HAL_GetTick>
 80006fa:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 80006fc:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fe:	1c63      	adds	r3, r4, #1
 8000700:	d000      	beq.n	8000704 <HAL_Delay+0x14>
  {
     wait++;
 8000702:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000704:	f7ff ffee 	bl	80006e4 <HAL_GetTick>
 8000708:	1b40      	subs	r0, r0, r5
 800070a:	42a0      	cmp	r0, r4
 800070c:	d3fa      	bcc.n	8000704 <HAL_Delay+0x14>
  {
  }
}
 800070e:	b003      	add	sp, #12
 8000710:	bd30      	pop	{r4, r5, pc}
	...

08000714 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000714:	b530      	push	{r4, r5, lr}
 8000716:	b083      	sub	sp, #12
 8000718:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800071a:	2300      	movs	r3, #0
 800071c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800071e:	6802      	ldr	r2, [r0, #0]
 8000720:	6891      	ldr	r1, [r2, #8]
 8000722:	3303      	adds	r3, #3
 8000724:	400b      	ands	r3, r1
 8000726:	2b01      	cmp	r3, #1
 8000728:	d011      	beq.n	800074e <ADC_Enable+0x3a>
 800072a:	2300      	movs	r3, #0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d142      	bne.n	80007b6 <ADC_Enable+0xa2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000730:	6891      	ldr	r1, [r2, #8]
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <ADC_Enable+0xa8>)
 8000734:	4219      	tst	r1, r3
 8000736:	d116      	bne.n	8000766 <ADC_Enable+0x52>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000738:	6893      	ldr	r3, [r2, #8]
 800073a:	2101      	movs	r1, #1
 800073c:	430b      	orrs	r3, r1
 800073e:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <ADC_Enable+0xac>)
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	491f      	ldr	r1, [pc, #124]	; (80007c4 <ADC_Enable+0xb0>)
 8000746:	f7ff fcdf 	bl	8000108 <__udivsi3>
 800074a:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800074c:	e018      	b.n	8000780 <ADC_Enable+0x6c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800074e:	6813      	ldr	r3, [r2, #0]
 8000750:	07db      	lsls	r3, r3, #31
 8000752:	d404      	bmi.n	800075e <ADC_Enable+0x4a>
 8000754:	68d3      	ldr	r3, [r2, #12]
 8000756:	041b      	lsls	r3, r3, #16
 8000758:	d403      	bmi.n	8000762 <ADC_Enable+0x4e>
 800075a:	2300      	movs	r3, #0
 800075c:	e7e6      	b.n	800072c <ADC_Enable+0x18>
 800075e:	2301      	movs	r3, #1
 8000760:	e7e4      	b.n	800072c <ADC_Enable+0x18>
 8000762:	2301      	movs	r3, #1
 8000764:	e7e2      	b.n	800072c <ADC_Enable+0x18>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000766:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000768:	2210      	movs	r2, #16
 800076a:	4313      	orrs	r3, r2
 800076c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800076e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000770:	3a0f      	subs	r2, #15
 8000772:	4313      	orrs	r3, r2
 8000774:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000776:	2001      	movs	r0, #1
 8000778:	e01e      	b.n	80007b8 <ADC_Enable+0xa4>
    {
      wait_loop_index--;
 800077a:	9b01      	ldr	r3, [sp, #4]
 800077c:	3b01      	subs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000780:	9b01      	ldr	r3, [sp, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f9      	bne.n	800077a <ADC_Enable+0x66>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000786:	f7ff ffad 	bl	80006e4 <HAL_GetTick>
 800078a:	0005      	movs	r5, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	07db      	lsls	r3, r3, #31
 8000792:	d40e      	bmi.n	80007b2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000794:	f7ff ffa6 	bl	80006e4 <HAL_GetTick>
 8000798:	1b40      	subs	r0, r0, r5
 800079a:	2802      	cmp	r0, #2
 800079c:	d9f6      	bls.n	800078c <ADC_Enable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800079e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007a0:	2210      	movs	r2, #16
 80007a2:	4313      	orrs	r3, r2
 80007a4:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80007a8:	3a0f      	subs	r2, #15
 80007aa:	4313      	orrs	r3, r2
 80007ac:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 80007ae:	2001      	movs	r0, #1
 80007b0:	e002      	b.n	80007b8 <ADC_Enable+0xa4>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80007b2:	2000      	movs	r0, #0
 80007b4:	e000      	b.n	80007b8 <ADC_Enable+0xa4>
 80007b6:	2000      	movs	r0, #0
}
 80007b8:	b003      	add	sp, #12
 80007ba:	bd30      	pop	{r4, r5, pc}
 80007bc:	80000017 	.word	0x80000017
 80007c0:	20000044 	.word	0x20000044
 80007c4:	000f4240 	.word	0x000f4240

080007c8 <HAL_ADC_Init>:
{
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80007cc:	d100      	bne.n	80007d0 <HAL_ADC_Init+0x8>
 80007ce:	e0b9      	b.n	8000944 <HAL_ADC_Init+0x17c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d100      	bne.n	80007d8 <HAL_ADC_Init+0x10>
 80007d6:	e080      	b.n	80008da <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007da:	06db      	lsls	r3, r3, #27
 80007dc:	d500      	bpl.n	80007e0 <HAL_ADC_Init+0x18>
 80007de:	e0ab      	b.n	8000938 <HAL_ADC_Init+0x170>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80007e0:	6822      	ldr	r2, [r4, #0]
 80007e2:	6893      	ldr	r3, [r2, #8]
 80007e4:	2104      	movs	r1, #4
 80007e6:	400b      	ands	r3, r1
      (tmp_hal_status == HAL_OK)                                &&
 80007e8:	d000      	beq.n	80007ec <HAL_ADC_Init+0x24>
 80007ea:	e0a5      	b.n	8000938 <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 80007ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80007ee:	4856      	ldr	r0, [pc, #344]	; (8000948 <HAL_ADC_Init+0x180>)
 80007f0:	4001      	ands	r1, r0
 80007f2:	3006      	adds	r0, #6
 80007f4:	30ff      	adds	r0, #255	; 0xff
 80007f6:	4301      	orrs	r1, r0
 80007f8:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80007fa:	6890      	ldr	r0, [r2, #8]
 80007fc:	2103      	movs	r1, #3
 80007fe:	4001      	ands	r1, r0
 8000800:	2901      	cmp	r1, #1
 8000802:	d070      	beq.n	80008e6 <HAL_ADC_Init+0x11e>
 8000804:	2100      	movs	r1, #0
 8000806:	2900      	cmp	r1, #0
 8000808:	d10c      	bne.n	8000824 <HAL_ADC_Init+0x5c>
      MODIFY_REG(hadc->Instance->CFGR1,
 800080a:	68d1      	ldr	r1, [r2, #12]
 800080c:	2018      	movs	r0, #24
 800080e:	4381      	bics	r1, r0
 8000810:	68a0      	ldr	r0, [r4, #8]
 8000812:	4301      	orrs	r1, r0
 8000814:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000816:	6821      	ldr	r1, [r4, #0]
 8000818:	690a      	ldr	r2, [r1, #16]
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	0892      	lsrs	r2, r2, #2
 800081e:	6860      	ldr	r0, [r4, #4]
 8000820:	4302      	orrs	r2, r0
 8000822:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000824:	6821      	ldr	r1, [r4, #0]
 8000826:	68ca      	ldr	r2, [r1, #12]
 8000828:	4848      	ldr	r0, [pc, #288]	; (800094c <HAL_ADC_Init+0x184>)
 800082a:	4002      	ands	r2, r0
 800082c:	60ca      	str	r2, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800082e:	69a2      	ldr	r2, [r4, #24]
 8000830:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000832:	69e1      	ldr	r1, [r4, #28]
 8000834:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000836:	430a      	orrs	r2, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000838:	6a20      	ldr	r0, [r4, #32]
 800083a:	0341      	lsls	r1, r0, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800083c:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800083e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000840:	2901      	cmp	r1, #1
 8000842:	d05c      	beq.n	80008fe <HAL_ADC_Init+0x136>
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0149      	lsls	r1, r1, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000848:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800084a:	68e1      	ldr	r1, [r4, #12]
 800084c:	430a      	orrs	r2, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800084e:	6921      	ldr	r1, [r4, #16]
 8000850:	2902      	cmp	r1, #2
 8000852:	d056      	beq.n	8000902 <HAL_ADC_Init+0x13a>
                 hadc->Init.DataAlign                                   |
 8000854:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000856:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000858:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800085a:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800085c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800085e:	2a01      	cmp	r2, #1
 8000860:	d051      	beq.n	8000906 <HAL_ADC_Init+0x13e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000862:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000864:	21c2      	movs	r1, #194	; 0xc2
 8000866:	31ff      	adds	r1, #255	; 0xff
 8000868:	428a      	cmp	r2, r1
 800086a:	d002      	beq.n	8000872 <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800086c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800086e:	430a      	orrs	r2, r1
 8000870:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000872:	6821      	ldr	r1, [r4, #0]
 8000874:	68ca      	ldr	r2, [r1, #12]
 8000876:	431a      	orrs	r2, r3
 8000878:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800087a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0549      	lsls	r1, r1, #21
 8000880:	428a      	cmp	r2, r1
 8000882:	d00d      	beq.n	80008a0 <HAL_ADC_Init+0xd8>
 8000884:	2a01      	cmp	r2, #1
 8000886:	d00b      	beq.n	80008a0 <HAL_ADC_Init+0xd8>
 8000888:	2a02      	cmp	r2, #2
 800088a:	d009      	beq.n	80008a0 <HAL_ADC_Init+0xd8>
 800088c:	2a03      	cmp	r2, #3
 800088e:	d007      	beq.n	80008a0 <HAL_ADC_Init+0xd8>
 8000890:	2a04      	cmp	r2, #4
 8000892:	d005      	beq.n	80008a0 <HAL_ADC_Init+0xd8>
 8000894:	2a05      	cmp	r2, #5
 8000896:	d003      	beq.n	80008a0 <HAL_ADC_Init+0xd8>
 8000898:	2a06      	cmp	r2, #6
 800089a:	d001      	beq.n	80008a0 <HAL_ADC_Init+0xd8>
 800089c:	2a07      	cmp	r2, #7
 800089e:	d10a      	bne.n	80008b6 <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80008a0:	6820      	ldr	r0, [r4, #0]
 80008a2:	6941      	ldr	r1, [r0, #20]
 80008a4:	2207      	movs	r2, #7
 80008a6:	4391      	bics	r1, r2
 80008a8:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80008aa:	6820      	ldr	r0, [r4, #0]
 80008ac:	6941      	ldr	r1, [r0, #20]
 80008ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80008b0:	402a      	ands	r2, r5
 80008b2:	430a      	orrs	r2, r1
 80008b4:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80008b6:	6822      	ldr	r2, [r4, #0]
 80008b8:	68d2      	ldr	r2, [r2, #12]
 80008ba:	4925      	ldr	r1, [pc, #148]	; (8000950 <HAL_ADC_Init+0x188>)
 80008bc:	400a      	ands	r2, r1
 80008be:	4293      	cmp	r3, r2
 80008c0:	d030      	beq.n	8000924 <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 80008c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008c4:	2212      	movs	r2, #18
 80008c6:	4393      	bics	r3, r2
 80008c8:	3a02      	subs	r2, #2
 80008ca:	4313      	orrs	r3, r2
 80008cc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80008d0:	3a0f      	subs	r2, #15
 80008d2:	4313      	orrs	r3, r2
 80008d4:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80008d6:	2001      	movs	r0, #1
 80008d8:	e033      	b.n	8000942 <HAL_ADC_Init+0x17a>
    ADC_CLEAR_ERRORCODE(hadc);
 80008da:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80008dc:	2240      	movs	r2, #64	; 0x40
 80008de:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80008e0:	f002 f8dc 	bl	8002a9c <HAL_ADC_MspInit>
 80008e4:	e778      	b.n	80007d8 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80008e6:	6811      	ldr	r1, [r2, #0]
 80008e8:	07c9      	lsls	r1, r1, #31
 80008ea:	d404      	bmi.n	80008f6 <HAL_ADC_Init+0x12e>
 80008ec:	68d1      	ldr	r1, [r2, #12]
 80008ee:	0409      	lsls	r1, r1, #16
 80008f0:	d403      	bmi.n	80008fa <HAL_ADC_Init+0x132>
 80008f2:	2100      	movs	r1, #0
 80008f4:	e787      	b.n	8000806 <HAL_ADC_Init+0x3e>
 80008f6:	2101      	movs	r1, #1
 80008f8:	e785      	b.n	8000806 <HAL_ADC_Init+0x3e>
 80008fa:	2101      	movs	r1, #1
 80008fc:	e783      	b.n	8000806 <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80008fe:	0019      	movs	r1, r3
 8000900:	e7a2      	b.n	8000848 <HAL_ADC_Init+0x80>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000902:	2304      	movs	r3, #4
 8000904:	e7a6      	b.n	8000854 <HAL_ADC_Init+0x8c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000906:	2800      	cmp	r0, #0
 8000908:	d103      	bne.n	8000912 <HAL_ADC_Init+0x14a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	0252      	lsls	r2, r2, #9
 800090e:	4313      	orrs	r3, r2
 8000910:	e7a7      	b.n	8000862 <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000912:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000914:	2120      	movs	r1, #32
 8000916:	430a      	orrs	r2, r1
 8000918:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800091a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800091c:	391f      	subs	r1, #31
 800091e:	430a      	orrs	r2, r1
 8000920:	64a2      	str	r2, [r4, #72]	; 0x48
 8000922:	e79e      	b.n	8000862 <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 8000924:	2300      	movs	r3, #0
 8000926:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000928:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800092a:	2203      	movs	r2, #3
 800092c:	4393      	bics	r3, r2
 800092e:	3a02      	subs	r2, #2
 8000930:	4313      	orrs	r3, r2
 8000932:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000934:	2000      	movs	r0, #0
 8000936:	e004      	b.n	8000942 <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000938:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800093a:	2210      	movs	r2, #16
 800093c:	4313      	orrs	r3, r2
 800093e:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000940:	2001      	movs	r0, #1
}
 8000942:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000944:	2001      	movs	r0, #1
 8000946:	e7fc      	b.n	8000942 <HAL_ADC_Init+0x17a>
 8000948:	fffffefd 	.word	0xfffffefd
 800094c:	fffe0219 	.word	0xfffe0219
 8000950:	833fffe7 	.word	0x833fffe7

08000954 <HAL_ADC_Start_DMA>:
{
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	0004      	movs	r4, r0
 8000958:	000e      	movs	r6, r1
 800095a:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800095c:	6803      	ldr	r3, [r0, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	075b      	lsls	r3, r3, #29
 8000962:	d502      	bpl.n	800096a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 8000964:	2502      	movs	r5, #2
}
 8000966:	0028      	movs	r0, r5
 8000968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	5cc3      	ldrb	r3, [r0, r3]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d03a      	beq.n	80009e8 <HAL_ADC_Start_DMA+0x94>
 8000972:	2201      	movs	r2, #1
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000978:	69c3      	ldr	r3, [r0, #28]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d032      	beq.n	80009e4 <HAL_ADC_Start_DMA+0x90>
      tmp_hal_status = ADC_Enable(hadc);
 800097e:	f7ff fec9 	bl	8000714 <ADC_Enable>
 8000982:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 8000984:	2d00      	cmp	r5, #0
 8000986:	d1ee      	bne.n	8000966 <HAL_ADC_Start_DMA+0x12>
      ADC_STATE_CLR_SET(hadc->State,
 8000988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <HAL_ADC_Start_DMA+0x98>)
 800098c:	401a      	ands	r2, r3
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4313      	orrs	r3, r2
 8000994:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8000996:	2300      	movs	r3, #0
 8000998:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800099a:	2240      	movs	r2, #64	; 0x40
 800099c:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800099e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_ADC_Start_DMA+0x9c>)
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80009a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <HAL_ADC_Start_DMA+0xa0>)
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80009aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <HAL_ADC_Start_DMA+0xa4>)
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	221c      	movs	r2, #28
 80009b4:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80009b6:	6822      	ldr	r2, [r4, #0]
 80009b8:	6853      	ldr	r3, [r2, #4]
 80009ba:	2110      	movs	r1, #16
 80009bc:	430b      	orrs	r3, r1
 80009be:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80009c0:	6822      	ldr	r2, [r4, #0]
 80009c2:	68d3      	ldr	r3, [r2, #12]
 80009c4:	390f      	subs	r1, #15
 80009c6:	430b      	orrs	r3, r1
 80009c8:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80009ca:	6821      	ldr	r1, [r4, #0]
 80009cc:	3140      	adds	r1, #64	; 0x40
 80009ce:	003b      	movs	r3, r7
 80009d0:	0032      	movs	r2, r6
 80009d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80009d4:	f000 f9bc 	bl	8000d50 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80009d8:	6822      	ldr	r2, [r4, #0]
 80009da:	6893      	ldr	r3, [r2, #8]
 80009dc:	2104      	movs	r1, #4
 80009de:	430b      	orrs	r3, r1
 80009e0:	6093      	str	r3, [r2, #8]
 80009e2:	e7c0      	b.n	8000966 <HAL_ADC_Start_DMA+0x12>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e4:	2500      	movs	r5, #0
 80009e6:	e7cd      	b.n	8000984 <HAL_ADC_Start_DMA+0x30>
    __HAL_LOCK(hadc);
 80009e8:	2502      	movs	r5, #2
 80009ea:	e7bc      	b.n	8000966 <HAL_ADC_Start_DMA+0x12>
 80009ec:	fffff0fe 	.word	0xfffff0fe
 80009f0:	08000a01 	.word	0x08000a01
 80009f4:	08000a73 	.word	0x08000a73
 80009f8:	08000a7f 	.word	0x08000a7f

080009fc <HAL_ADC_ConvCpltCallback>:
}
 80009fc:	4770      	bx	lr
	...

08000a00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000a00:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a02:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a06:	2150      	movs	r1, #80	; 0x50
 8000a08:	4211      	tst	r1, r2
 8000a0a:	d12b      	bne.n	8000a64 <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	430a      	orrs	r2, r1
 8000a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	68d0      	ldr	r0, [r2, #12]
 8000a1a:	21c0      	movs	r1, #192	; 0xc0
 8000a1c:	0109      	lsls	r1, r1, #4
 8000a1e:	4208      	tst	r0, r1
 8000a20:	d113      	bne.n	8000a4a <ADC_DMAConvCplt+0x4a>
 8000a22:	6a19      	ldr	r1, [r3, #32]
 8000a24:	2900      	cmp	r1, #0
 8000a26:	d110      	bne.n	8000a4a <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000a28:	6811      	ldr	r1, [r2, #0]
 8000a2a:	0709      	lsls	r1, r1, #28
 8000a2c:	d50d      	bpl.n	8000a4a <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a2e:	6891      	ldr	r1, [r2, #8]
 8000a30:	0749      	lsls	r1, r1, #29
 8000a32:	d40e      	bmi.n	8000a52 <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000a34:	6851      	ldr	r1, [r2, #4]
 8000a36:	200c      	movs	r0, #12
 8000a38:	4381      	bics	r1, r0
 8000a3a:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a3e:	490b      	ldr	r1, [pc, #44]	; (8000a6c <ADC_DMAConvCplt+0x6c>)
 8000a40:	400a      	ands	r2, r1
 8000a42:	3104      	adds	r1, #4
 8000a44:	31ff      	adds	r1, #255	; 0xff
 8000a46:	430a      	orrs	r2, r1
 8000a48:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff ffd6 	bl	80009fc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000a50:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a54:	2120      	movs	r1, #32
 8000a56:	430a      	orrs	r2, r1
 8000a58:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a5c:	391f      	subs	r1, #31
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	649a      	str	r2, [r3, #72]	; 0x48
 8000a62:	e7f2      	b.n	8000a4a <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4798      	blx	r3
}
 8000a6a:	e7f1      	b.n	8000a50 <ADC_DMAConvCplt+0x50>
 8000a6c:	fffffefe 	.word	0xfffffefe

08000a70 <HAL_ADC_ConvHalfCpltCallback>:
}
 8000a70:	4770      	bx	lr

08000a72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000a72:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a74:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000a76:	f7ff fffb 	bl	8000a70 <HAL_ADC_ConvHalfCpltCallback>
}
 8000a7a:	bd10      	pop	{r4, pc}

08000a7c <HAL_ADC_ErrorCallback>:
}
 8000a7c:	4770      	bx	lr

08000a7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000a7e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a80:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000a82:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000a84:	2240      	movs	r2, #64	; 0x40
 8000a86:	4313      	orrs	r3, r2
 8000a88:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000a8a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000a8c:	3a3c      	subs	r2, #60	; 0x3c
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000a92:	f7ff fff3 	bl	8000a7c <HAL_ADC_ErrorCallback>
}
 8000a96:	bd10      	pop	{r4, pc}

08000a98 <HAL_ADC_ConfigChannel>:
{
 8000a98:	b530      	push	{r4, r5, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000aa2:	3340      	adds	r3, #64	; 0x40
 8000aa4:	5cc3      	ldrb	r3, [r0, r3]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d100      	bne.n	8000aac <HAL_ADC_ConfigChannel+0x14>
 8000aaa:	e081      	b.n	8000bb0 <HAL_ADC_ConfigChannel+0x118>
 8000aac:	2201      	movs	r2, #1
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ab2:	6803      	ldr	r3, [r0, #0]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	0752      	lsls	r2, r2, #29
 8000ab8:	d470      	bmi.n	8000b9c <HAL_ADC_ConfigChannel+0x104>
    if (sConfig->Rank != ADC_RANK_NONE)
 8000aba:	4a3e      	ldr	r2, [pc, #248]	; (8000bb4 <HAL_ADC_ConfigChannel+0x11c>)
 8000abc:	6848      	ldr	r0, [r1, #4]
 8000abe:	4290      	cmp	r0, r2
 8000ac0:	d053      	beq.n	8000b6a <HAL_ADC_ConfigChannel+0xd2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	680d      	ldr	r5, [r1, #0]
 8000ac8:	40a8      	lsls	r0, r5
 8000aca:	4302      	orrs	r2, r0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0552      	lsls	r2, r2, #21
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d01e      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d01c      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d01a      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d018      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d016      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
 8000ae8:	2b05      	cmp	r3, #5
 8000aea:	d014      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d012      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
 8000af0:	2b07      	cmp	r3, #7
 8000af2:	d010      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000af4:	6822      	ldr	r2, [r4, #0]
 8000af6:	6950      	ldr	r0, [r2, #20]
 8000af8:	2307      	movs	r3, #7
 8000afa:	4003      	ands	r3, r0
 8000afc:	6888      	ldr	r0, [r1, #8]
 8000afe:	4298      	cmp	r0, r3
 8000b00:	d009      	beq.n	8000b16 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000b02:	6950      	ldr	r0, [r2, #20]
 8000b04:	2307      	movs	r3, #7
 8000b06:	4398      	bics	r0, r3
 8000b08:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000b0a:	6820      	ldr	r0, [r4, #0]
 8000b0c:	6942      	ldr	r2, [r0, #20]
 8000b0e:	688d      	ldr	r5, [r1, #8]
 8000b10:	402b      	ands	r3, r5
 8000b12:	4313      	orrs	r3, r2
 8000b14:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000b16:	680b      	ldr	r3, [r1, #0]
 8000b18:	001a      	movs	r2, r3
 8000b1a:	3a10      	subs	r2, #16
 8000b1c:	2a01      	cmp	r2, #1
 8000b1e:	d901      	bls.n	8000b24 <HAL_ADC_ConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b20:	2000      	movs	r0, #0
 8000b22:	e040      	b.n	8000ba6 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b24:	4a24      	ldr	r2, [pc, #144]	; (8000bb8 <HAL_ADC_ConfigChannel+0x120>)
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	2b10      	cmp	r3, #16
 8000b2a:	d009      	beq.n	8000b40 <HAL_ADC_ConfigChannel+0xa8>
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	03db      	lsls	r3, r3, #15
 8000b30:	4313      	orrs	r3, r2
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <HAL_ADC_ConfigChannel+0x120>)
 8000b34:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b36:	680b      	ldr	r3, [r1, #0]
 8000b38:	2b10      	cmp	r3, #16
 8000b3a:	d004      	beq.n	8000b46 <HAL_ADC_ConfigChannel+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e032      	b.n	8000ba6 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	e7f4      	b.n	8000b30 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <HAL_ADC_ConfigChannel+0x124>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	491d      	ldr	r1, [pc, #116]	; (8000bc0 <HAL_ADC_ConfigChannel+0x128>)
 8000b4c:	f7ff fadc 	bl	8000108 <__udivsi3>
 8000b50:	0083      	lsls	r3, r0, #2
 8000b52:	1818      	adds	r0, r3, r0
 8000b54:	0043      	lsls	r3, r0, #1
 8000b56:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000b58:	e002      	b.n	8000b60 <HAL_ADC_ConfigChannel+0xc8>
            wait_loop_index--;
 8000b5a:	9b01      	ldr	r3, [sp, #4]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1f9      	bne.n	8000b5a <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b66:	2000      	movs	r0, #0
 8000b68:	e01d      	b.n	8000ba6 <HAL_ADC_ConfigChannel+0x10e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	680d      	ldr	r5, [r1, #0]
 8000b70:	40a8      	lsls	r0, r5
 8000b72:	4382      	bics	r2, r0
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000b76:	680b      	ldr	r3, [r1, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	3a10      	subs	r2, #16
 8000b7c:	2a01      	cmp	r2, #1
 8000b7e:	d901      	bls.n	8000b84 <HAL_ADC_ConfigChannel+0xec>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b80:	2000      	movs	r0, #0
 8000b82:	e010      	b.n	8000ba6 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b84:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <HAL_ADC_ConfigChannel+0x120>)
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	2b10      	cmp	r3, #16
 8000b8a:	d005      	beq.n	8000b98 <HAL_ADC_ConfigChannel+0x100>
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_ADC_ConfigChannel+0x12c>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <HAL_ADC_ConfigChannel+0x120>)
 8000b92:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b94:	2000      	movs	r0, #0
 8000b96:	e006      	b.n	8000ba6 <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_ADC_ConfigChannel+0x130>)
 8000b9a:	e7f8      	b.n	8000b8e <HAL_ADC_ConfigChannel+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000ba4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	54e2      	strb	r2, [r4, r3]
}
 8000bac:	b003      	add	sp, #12
 8000bae:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	e7fb      	b.n	8000bac <HAL_ADC_ConfigChannel+0x114>
 8000bb4:	00001001 	.word	0x00001001
 8000bb8:	40012708 	.word	0x40012708
 8000bbc:	20000044 	.word	0x20000044
 8000bc0:	000f4240 	.word	0x000f4240
 8000bc4:	ffbfffff 	.word	0xffbfffff
 8000bc8:	ff7fffff 	.word	0xff7fffff

08000bcc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bcc:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	db11      	blt.n	8000bf6 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd2:	0883      	lsrs	r3, r0, #2
 8000bd4:	4d14      	ldr	r5, [pc, #80]	; (8000c28 <HAL_NVIC_SetPriority+0x5c>)
 8000bd6:	33c0      	adds	r3, #192	; 0xc0
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	595c      	ldr	r4, [r3, r5]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4010      	ands	r0, r2
 8000be0:	00c0      	lsls	r0, r0, #3
 8000be2:	32fc      	adds	r2, #252	; 0xfc
 8000be4:	0016      	movs	r6, r2
 8000be6:	4086      	lsls	r6, r0
 8000be8:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bea:	0189      	lsls	r1, r1, #6
 8000bec:	400a      	ands	r2, r1
 8000bee:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf0:	4322      	orrs	r2, r4
 8000bf2:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000bf4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	b2c0      	uxtb	r0, r0
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	4003      	ands	r3, r0
 8000bfc:	3b08      	subs	r3, #8
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	3306      	adds	r3, #6
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <HAL_NVIC_SetPriority+0x60>)
 8000c06:	4694      	mov	ip, r2
 8000c08:	4463      	add	r3, ip
 8000c0a:	685d      	ldr	r5, [r3, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4010      	ands	r0, r2
 8000c10:	00c0      	lsls	r0, r0, #3
 8000c12:	24ff      	movs	r4, #255	; 0xff
 8000c14:	0022      	movs	r2, r4
 8000c16:	4082      	lsls	r2, r0
 8000c18:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1a:	0189      	lsls	r1, r1, #6
 8000c1c:	400c      	ands	r4, r1
 8000c1e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c20:	432c      	orrs	r4, r5
 8000c22:	605c      	str	r4, [r3, #4]
 8000c24:	e7e6      	b.n	8000bf4 <HAL_NVIC_SetPriority+0x28>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c30:	231f      	movs	r3, #31
 8000c32:	4018      	ands	r0, r3
 8000c34:	3b1e      	subs	r3, #30
 8000c36:	4083      	lsls	r3, r0
 8000c38:	4a01      	ldr	r2, [pc, #4]	; (8000c40 <HAL_NVIC_EnableIRQ+0x10>)
 8000c3a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c3c:	4770      	bx	lr
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	3801      	subs	r0, #1
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_SYSTICK_Config+0x2c>)
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	d80f      	bhi.n	8000c6c <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <HAL_SYSTICK_Config+0x30>)
 8000c4e:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <HAL_SYSTICK_Config+0x34>)
 8000c52:	6a03      	ldr	r3, [r0, #32]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	21c0      	movs	r1, #192	; 0xc0
 8000c5a:	0609      	lsls	r1, r1, #24
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	2300      	movs	r3, #0
 8000c62:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c64:	3307      	adds	r3, #7
 8000c66:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c6a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c6c:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000c6e:	e7fc      	b.n	8000c6a <HAL_SYSTICK_Config+0x26>
 8000c70:	00ffffff 	.word	0x00ffffff
 8000c74:	e000e010 	.word	0xe000e010
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c7c:	2804      	cmp	r0, #4
 8000c7e:	d005      	beq.n	8000c8c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c80:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000c82:	6813      	ldr	r3, [r2, #0]
 8000c84:	2104      	movs	r1, #4
 8000c86:	438b      	bics	r3, r1
 8000c88:	6013      	str	r3, [r2, #0]
  }
}
 8000c8a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c8c:	4a02      	ldr	r2, [pc, #8]	; (8000c98 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000c8e:	6813      	ldr	r3, [r2, #0]
 8000c90:	2104      	movs	r1, #4
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e7f8      	b.n	8000c8a <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c9c:	4770      	bx	lr

08000c9e <HAL_SYSTICK_IRQHandler>:
{
 8000c9e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000ca0:	f7ff fffc 	bl	8000c9c <HAL_SYSTICK_Callback>
}
 8000ca4:	bd10      	pop	{r4, pc}

08000ca6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ca6:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ca8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000caa:	2401      	movs	r4, #1
 8000cac:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000cae:	40b4      	lsls	r4, r6
 8000cb0:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000cb2:	6804      	ldr	r4, [r0, #0]
 8000cb4:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cb6:	6843      	ldr	r3, [r0, #4]
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	d004      	beq.n	8000cc6 <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000cbc:	6803      	ldr	r3, [r0, #0]
 8000cbe:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000cc0:	6803      	ldr	r3, [r0, #0]
 8000cc2:	60da      	str	r2, [r3, #12]
  }
}
 8000cc4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8000cc6:	6803      	ldr	r3, [r0, #0]
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000cca:	6803      	ldr	r3, [r0, #0]
 8000ccc:	60d9      	str	r1, [r3, #12]
 8000cce:	e7f9      	b.n	8000cc4 <DMA_SetConfig+0x1e>

08000cd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cd4:	6803      	ldr	r3, [r0, #0]
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <DMA_CalcBaseAndBitshift+0x20>)
 8000cd8:	4694      	mov	ip, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2114      	movs	r1, #20
 8000ce0:	f7ff fa12 	bl	8000108 <__udivsi3>
 8000ce4:	0080      	lsls	r0, r0, #2
 8000ce6:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <DMA_CalcBaseAndBitshift+0x24>)
 8000cea:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 8000cec:	bd10      	pop	{r4, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	bffdfff8 	.word	0xbffdfff8
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_DMA_Init>:
{ 
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 8000cfc:	d024      	beq.n	8000d48 <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cfe:	2521      	movs	r5, #33	; 0x21
 8000d00:	2302      	movs	r3, #2
 8000d02:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 8000d04:	6801      	ldr	r1, [r0, #0]
 8000d06:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_DMA_Init+0x54>)
 8000d0a:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000d0c:	6843      	ldr	r3, [r0, #4]
 8000d0e:	6880      	ldr	r0, [r0, #8]
 8000d10:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d12:	68e0      	ldr	r0, [r4, #12]
 8000d14:	4303      	orrs	r3, r0
 8000d16:	6920      	ldr	r0, [r4, #16]
 8000d18:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d1a:	6960      	ldr	r0, [r4, #20]
 8000d1c:	4303      	orrs	r3, r0
 8000d1e:	69a0      	ldr	r0, [r4, #24]
 8000d20:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d22:	69e0      	ldr	r0, [r4, #28]
 8000d24:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000d26:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000d28:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000d2a:	0020      	movs	r0, r4
 8000d2c:	f7ff ffd0 	bl	8000cd0 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000d34:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000d36:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000d38:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d3a:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8000d40:	321f      	adds	r2, #31
 8000d42:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000d44:	2000      	movs	r0, #0
}  
 8000d46:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000d48:	2001      	movs	r0, #1
 8000d4a:	e7fc      	b.n	8000d46 <HAL_DMA_Init+0x4e>
 8000d4c:	ffffc00f 	.word	0xffffc00f

08000d50 <HAL_DMA_Start_IT>:
{
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000d54:	2020      	movs	r0, #32
 8000d56:	5c20      	ldrb	r0, [r4, r0]
 8000d58:	2801      	cmp	r0, #1
 8000d5a:	d032      	beq.n	8000dc2 <HAL_DMA_Start_IT+0x72>
 8000d5c:	2501      	movs	r5, #1
 8000d5e:	2020      	movs	r0, #32
 8000d60:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d62:	3001      	adds	r0, #1
 8000d64:	5c20      	ldrb	r0, [r4, r0]
 8000d66:	2801      	cmp	r0, #1
 8000d68:	d004      	beq.n	8000d74 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8000d70:	2002      	movs	r0, #2
} 
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000d74:	3501      	adds	r5, #1
 8000d76:	3020      	adds	r0, #32
 8000d78:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d7e:	6825      	ldr	r5, [r4, #0]
 8000d80:	6828      	ldr	r0, [r5, #0]
 8000d82:	2601      	movs	r6, #1
 8000d84:	43b0      	bics	r0, r6
 8000d86:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d88:	0020      	movs	r0, r4
 8000d8a:	f7ff ff8c 	bl	8000ca6 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8000d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00b      	beq.n	8000dac <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d94:	6822      	ldr	r2, [r4, #0]
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	210e      	movs	r1, #14
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000d9e:	6822      	ldr	r2, [r4, #0]
 8000da0:	6813      	ldr	r3, [r2, #0]
 8000da2:	2101      	movs	r1, #1
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000da8:	2000      	movs	r0, #0
 8000daa:	e7e2      	b.n	8000d72 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000dac:	6822      	ldr	r2, [r4, #0]
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	210a      	movs	r1, #10
 8000db2:	430b      	orrs	r3, r1
 8000db4:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000db6:	6822      	ldr	r2, [r4, #0]
 8000db8:	6813      	ldr	r3, [r2, #0]
 8000dba:	3906      	subs	r1, #6
 8000dbc:	438b      	bics	r3, r1
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e7ed      	b.n	8000d9e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	e7d5      	b.n	8000d72 <HAL_DMA_Start_IT+0x22>

08000dc6 <HAL_DMA_IRQHandler>:
{
 8000dc6:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dc8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000dca:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000dcc:	6804      	ldr	r4, [r0, #0]
 8000dce:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000dd0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	4213      	tst	r3, r2
 8000dd8:	d012      	beq.n	8000e00 <HAL_DMA_IRQHandler+0x3a>
 8000dda:	076b      	lsls	r3, r5, #29
 8000ddc:	d510      	bpl.n	8000e00 <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	069b      	lsls	r3, r3, #26
 8000de2:	d403      	bmi.n	8000dec <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	2204      	movs	r2, #4
 8000de8:	4393      	bics	r3, r2
 8000dea:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000dec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000dee:	2304      	movs	r3, #4
 8000df0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000df2:	408b      	lsls	r3, r1
 8000df4:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000df6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d000      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8000dfc:	4798      	blx	r3
}  
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e00:	2302      	movs	r3, #2
 8000e02:	408b      	lsls	r3, r1
 8000e04:	4213      	tst	r3, r2
 8000e06:	d018      	beq.n	8000e3a <HAL_DMA_IRQHandler+0x74>
 8000e08:	07ab      	lsls	r3, r5, #30
 8000e0a:	d516      	bpl.n	8000e3a <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	069b      	lsls	r3, r3, #26
 8000e10:	d406      	bmi.n	8000e20 <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	220a      	movs	r2, #10
 8000e16:	4393      	bics	r3, r2
 8000e18:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	3a09      	subs	r2, #9
 8000e1c:	2321      	movs	r3, #33	; 0x21
 8000e1e:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000e22:	2302      	movs	r3, #2
 8000e24:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000e26:	408b      	lsls	r3, r1
 8000e28:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2320      	movs	r3, #32
 8000e2e:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000e30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0e3      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8000e36:	4798      	blx	r3
 8000e38:	e7e1      	b.n	8000dfe <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	4213      	tst	r3, r2
 8000e40:	d0dd      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x38>
 8000e42:	072b      	lsls	r3, r5, #28
 8000e44:	d5db      	bpl.n	8000dfe <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	220e      	movs	r2, #14
 8000e4a:	4393      	bics	r3, r2
 8000e4c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e4e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000e50:	2301      	movs	r3, #1
 8000e52:	0019      	movs	r1, r3
 8000e54:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000e56:	40a1      	lsls	r1, r4
 8000e58:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e5a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000e5c:	2221      	movs	r2, #33	; 0x21
 8000e5e:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 8000e60:	2200      	movs	r2, #0
 8000e62:	331f      	adds	r3, #31
 8000e64:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000e66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0c8      	beq.n	8000dfe <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8000e6c:	4798      	blx	r3
}  
 8000e6e:	e7c6      	b.n	8000dfe <HAL_DMA_IRQHandler+0x38>

08000e70 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e70:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e72:	2200      	movs	r2, #0
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <FLASH_Program_HalfWord+0x18>)
 8000e76:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <FLASH_Program_HalfWord+0x1c>)
 8000e7a:	6913      	ldr	r3, [r2, #16]
 8000e7c:	2401      	movs	r4, #1
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000e82:	8001      	strh	r1, [r0, #0]
}
 8000e84:	bd10      	pop	{r4, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	20000070 	.word	0x20000070
 8000e8c:	40022000 	.word	0x40022000

08000e90 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <FLASH_SetErrorCode+0x34>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	06db      	lsls	r3, r3, #27
 8000e96:	d513      	bpl.n	8000ec0 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <FLASH_SetErrorCode+0x38>)
 8000e9a:	69d3      	ldr	r3, [r2, #28]
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000ea2:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <FLASH_SetErrorCode+0x34>)
 8000ea6:	68d2      	ldr	r2, [r2, #12]
 8000ea8:	0752      	lsls	r2, r2, #29
 8000eaa:	d506      	bpl.n	8000eba <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000eac:	4906      	ldr	r1, [pc, #24]	; (8000ec8 <FLASH_SetErrorCode+0x38>)
 8000eae:	69ca      	ldr	r2, [r1, #28]
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	4302      	orrs	r2, r0
 8000eb4:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000eba:	4a02      	ldr	r2, [pc, #8]	; (8000ec4 <FLASH_SetErrorCode+0x34>)
 8000ebc:	60d3      	str	r3, [r2, #12]
}  
 8000ebe:	4770      	bx	lr
  uint32_t flags = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e7ef      	b.n	8000ea4 <FLASH_SetErrorCode+0x14>
 8000ec4:	40022000 	.word	0x40022000
 8000ec8:	20000070 	.word	0x20000070

08000ecc <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_FLASH_Unlock+0x1c>)
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	061b      	lsls	r3, r3, #24
 8000ed2:	d506      	bpl.n	8000ee2 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_FLASH_Unlock+0x1c>)
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <HAL_FLASH_Unlock+0x20>)
 8000ed8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <HAL_FLASH_Unlock+0x24>)
 8000edc:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8000ede:	2000      	movs	r0, #0
}
 8000ee0:	4770      	bx	lr
    return HAL_ERROR;
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	e7fc      	b.n	8000ee0 <HAL_FLASH_Unlock+0x14>
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	40022000 	.word	0x40022000
 8000eec:	45670123 	.word	0x45670123
 8000ef0:	cdef89ab 	.word	0xcdef89ab

08000ef4 <FLASH_WaitForLastOperation>:
{
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fbf4 	bl	80006e4 <HAL_GetTick>
 8000efc:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <FLASH_WaitForLastOperation+0x58>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	07db      	lsls	r3, r3, #31
 8000f04:	d50a      	bpl.n	8000f1c <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8000f06:	1c63      	adds	r3, r4, #1
 8000f08:	d0f9      	beq.n	8000efe <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f0a:	2c00      	cmp	r4, #0
 8000f0c:	d019      	beq.n	8000f42 <FLASH_WaitForLastOperation+0x4e>
 8000f0e:	f7ff fbe9 	bl	80006e4 <HAL_GetTick>
 8000f12:	1b40      	subs	r0, r0, r5
 8000f14:	4284      	cmp	r4, r0
 8000f16:	d2f2      	bcs.n	8000efe <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000f18:	2003      	movs	r0, #3
 8000f1a:	e011      	b.n	8000f40 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <FLASH_WaitForLastOperation+0x58>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	069b      	lsls	r3, r3, #26
 8000f22:	d502      	bpl.n	8000f2a <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f24:	2220      	movs	r2, #32
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <FLASH_WaitForLastOperation+0x58>)
 8000f28:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <FLASH_WaitForLastOperation+0x58>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	06db      	lsls	r3, r3, #27
 8000f30:	d403      	bmi.n	8000f3a <FLASH_WaitForLastOperation+0x46>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <FLASH_WaitForLastOperation+0x58>)
 8000f34:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f36:	075b      	lsls	r3, r3, #29
 8000f38:	d505      	bpl.n	8000f46 <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8000f3a:	f7ff ffa9 	bl	8000e90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f3e:	2001      	movs	r0, #1
}
 8000f40:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 8000f42:	2003      	movs	r0, #3
 8000f44:	e7fc      	b.n	8000f40 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8000f46:	2000      	movs	r0, #0
 8000f48:	e7fa      	b.n	8000f40 <FLASH_WaitForLastOperation+0x4c>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_FLASH_Program>:
{
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	0004      	movs	r4, r0
 8000f56:	000e      	movs	r6, r1
 8000f58:	9201      	str	r2, [sp, #4]
 8000f5a:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HAL_FLASH_Program+0x90>)
 8000f5e:	7e1b      	ldrb	r3, [r3, #24]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d102      	bne.n	8000f6a <HAL_FLASH_Program+0x1a>
 8000f64:	2002      	movs	r0, #2
}
 8000f66:	b003      	add	sp, #12
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_FLASH_Program+0x90>)
 8000f6e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f70:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <HAL_FLASH_Program+0x94>)
 8000f72:	f7ff ffbf 	bl	8000ef4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d12d      	bne.n	8000fd6 <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f7a:	2c01      	cmp	r4, #1
 8000f7c:	d006      	beq.n	8000f8c <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f7e:	2c02      	cmp	r4, #2
 8000f80:	d002      	beq.n	8000f88 <HAL_FLASH_Program+0x38>
      nbiterations = 4U;
 8000f82:	2504      	movs	r5, #4
    for (index = 0U; index < nbiterations; index++)
 8000f84:	2400      	movs	r4, #0
 8000f86:	e01b      	b.n	8000fc0 <HAL_FLASH_Program+0x70>
      nbiterations = 2U;
 8000f88:	2502      	movs	r5, #2
 8000f8a:	e7fb      	b.n	8000f84 <HAL_FLASH_Program+0x34>
      nbiterations = 1U;
 8000f8c:	2501      	movs	r5, #1
 8000f8e:	e7f9      	b.n	8000f84 <HAL_FLASH_Program+0x34>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f90:	2220      	movs	r2, #32
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	0039      	movs	r1, r7
 8000f96:	4091      	lsls	r1, r2
 8000f98:	000a      	movs	r2, r1
 8000f9a:	9901      	ldr	r1, [sp, #4]
 8000f9c:	40d9      	lsrs	r1, r3
 8000f9e:	4311      	orrs	r1, r2
 8000fa0:	b289      	uxth	r1, r1
 8000fa2:	1980      	adds	r0, r0, r6
 8000fa4:	f7ff ff64 	bl	8000e70 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fa8:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <HAL_FLASH_Program+0x94>)
 8000faa:	f7ff ffa3 	bl	8000ef4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_FLASH_Program+0x98>)
 8000fb0:	6913      	ldr	r3, [r2, #16]
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	438b      	bics	r3, r1
 8000fb6:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d10c      	bne.n	8000fd6 <HAL_FLASH_Program+0x86>
    for (index = 0U; index < nbiterations; index++)
 8000fbc:	3401      	adds	r4, #1
 8000fbe:	b2e4      	uxtb	r4, r4
 8000fc0:	42ac      	cmp	r4, r5
 8000fc2:	d208      	bcs.n	8000fd6 <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000fc4:	0060      	lsls	r0, r4, #1
 8000fc6:	0123      	lsls	r3, r4, #4
 8000fc8:	2220      	movs	r2, #32
 8000fca:	4252      	negs	r2, r2
 8000fcc:	189a      	adds	r2, r3, r2
 8000fce:	d4df      	bmi.n	8000f90 <HAL_FLASH_Program+0x40>
 8000fd0:	0039      	movs	r1, r7
 8000fd2:	40d1      	lsrs	r1, r2
 8000fd4:	e7e4      	b.n	8000fa0 <HAL_FLASH_Program+0x50>
  __HAL_UNLOCK(&pFlash);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4b01      	ldr	r3, [pc, #4]	; (8000fe0 <HAL_FLASH_Program+0x90>)
 8000fda:	761a      	strb	r2, [r3, #24]
  return status;
 8000fdc:	e7c3      	b.n	8000f66 <HAL_FLASH_Program+0x16>
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	20000070 	.word	0x20000070
 8000fe4:	0000c350 	.word	0x0000c350
 8000fe8:	40022000 	.word	0x40022000

08000fec <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fec:	2200      	movs	r2, #0
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <FLASH_MassErase+0x1c>)
 8000ff0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <FLASH_MassErase+0x20>)
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	313c      	adds	r1, #60	; 0x3c
 8001000:	430a      	orrs	r2, r1
 8001002:	611a      	str	r2, [r3, #16]
}
 8001004:	4770      	bx	lr
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	20000070 	.word	0x20000070
 800100c:	40022000 	.word	0x40022000

08001010 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001010:	2200      	movs	r2, #0
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <FLASH_PageErase+0x1c>)
 8001014:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <FLASH_PageErase+0x20>)
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	2102      	movs	r1, #2
 800101c:	430a      	orrs	r2, r1
 800101e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001020:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	313e      	adds	r1, #62	; 0x3e
 8001026:	430a      	orrs	r2, r1
 8001028:	611a      	str	r2, [r3, #16]
}
 800102a:	4770      	bx	lr
 800102c:	20000070 	.word	0x20000070
 8001030:	40022000 	.word	0x40022000

08001034 <HAL_FLASHEx_Erase>:
{
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	0005      	movs	r5, r0
 8001038:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_FLASHEx_Erase+0x98>)
 800103c:	7e1b      	ldrb	r3, [r3, #24]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d041      	beq.n	80010c6 <HAL_FLASHEx_Erase+0x92>
 8001042:	2201      	movs	r2, #1
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_FLASHEx_Erase+0x98>)
 8001046:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001048:	6803      	ldr	r3, [r0, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d022      	beq.n	8001094 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800104e:	4820      	ldr	r0, [pc, #128]	; (80010d0 <HAL_FLASHEx_Erase+0x9c>)
 8001050:	f7ff ff50 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8001054:	2800      	cmp	r0, #0
 8001056:	d131      	bne.n	80010bc <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8001058:	2301      	movs	r3, #1
 800105a:	425b      	negs	r3, r3
 800105c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 800105e:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001060:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001062:	68ab      	ldr	r3, [r5, #8]
 8001064:	029b      	lsls	r3, r3, #10
 8001066:	686a      	ldr	r2, [r5, #4]
 8001068:	4694      	mov	ip, r2
 800106a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 800106c:	429c      	cmp	r4, r3
 800106e:	d226      	bcs.n	80010be <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8001070:	0020      	movs	r0, r4
 8001072:	f7ff ffcd 	bl	8001010 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001076:	4816      	ldr	r0, [pc, #88]	; (80010d0 <HAL_FLASHEx_Erase+0x9c>)
 8001078:	f7ff ff3c 	bl	8000ef4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800107c:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <HAL_FLASHEx_Erase+0xa0>)
 800107e:	6913      	ldr	r3, [r2, #16]
 8001080:	2102      	movs	r1, #2
 8001082:	438b      	bics	r3, r1
 8001084:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8001086:	2800      	cmp	r0, #0
 8001088:	d116      	bne.n	80010b8 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	469c      	mov	ip, r3
 8001090:	4464      	add	r4, ip
 8001092:	e7e6      	b.n	8001062 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001094:	480e      	ldr	r0, [pc, #56]	; (80010d0 <HAL_FLASHEx_Erase+0x9c>)
 8001096:	f7ff ff2d 	bl	8000ef4 <FLASH_WaitForLastOperation>
 800109a:	2800      	cmp	r0, #0
 800109c:	d001      	beq.n	80010a2 <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800109e:	2001      	movs	r0, #1
 80010a0:	e00d      	b.n	80010be <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 80010a2:	f7ff ffa3 	bl	8000fec <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <HAL_FLASHEx_Erase+0x9c>)
 80010a8:	f7ff ff24 	bl	8000ef4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_FLASHEx_Erase+0xa0>)
 80010ae:	6913      	ldr	r3, [r2, #16]
 80010b0:	2104      	movs	r1, #4
 80010b2:	438b      	bics	r3, r1
 80010b4:	6113      	str	r3, [r2, #16]
 80010b6:	e002      	b.n	80010be <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 80010b8:	6034      	str	r4, [r6, #0]
            break;
 80010ba:	e000      	b.n	80010be <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80010be:	2200      	movs	r2, #0
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <HAL_FLASHEx_Erase+0x98>)
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80010c6:	2002      	movs	r0, #2
 80010c8:	e7fc      	b.n	80010c4 <HAL_FLASHEx_Erase+0x90>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	20000070 	.word	0x20000070
 80010d0:	0000c350 	.word	0x0000c350
 80010d4:	40022000 	.word	0x40022000

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	46c6      	mov	lr, r8
 80010dc:	b500      	push	{lr}
 80010de:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 80010e0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010e2:	e07e      	b.n	80011e2 <HAL_GPIO_Init+0x10a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80010e4:	08df      	lsrs	r7, r3, #3
 80010e6:	3708      	adds	r7, #8
 80010e8:	00bf      	lsls	r7, r7, #2
 80010ea:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80010ec:	2507      	movs	r5, #7
 80010ee:	401d      	ands	r5, r3
 80010f0:	00ad      	lsls	r5, r5, #2
 80010f2:	240f      	movs	r4, #15
 80010f4:	40ac      	lsls	r4, r5
 80010f6:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80010f8:	690c      	ldr	r4, [r1, #16]
 80010fa:	40ac      	lsls	r4, r5
 80010fc:	0025      	movs	r5, r4
 80010fe:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001100:	503d      	str	r5, [r7, r0]
 8001102:	e07e      	b.n	8001202 <HAL_GPIO_Init+0x12a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001104:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001106:	4664      	mov	r4, ip
 8001108:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800110a:	68ce      	ldr	r6, [r1, #12]
 800110c:	40be      	lsls	r6, r7
 800110e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001110:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001114:	002c      	movs	r4, r5
 8001116:	4645      	mov	r5, r8
 8001118:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111a:	684d      	ldr	r5, [r1, #4]
 800111c:	092e      	lsrs	r6, r5, #4
 800111e:	2501      	movs	r5, #1
 8001120:	4035      	ands	r5, r6
 8001122:	409d      	lsls	r5, r3
 8001124:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001126:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001128:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	4665      	mov	r5, ip
 800112c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800112e:	688d      	ldr	r5, [r1, #8]
 8001130:	40bd      	lsls	r5, r7
 8001132:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001134:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001136:	684c      	ldr	r4, [r1, #4]
 8001138:	00e4      	lsls	r4, r4, #3
 800113a:	d551      	bpl.n	80011e0 <HAL_GPIO_Init+0x108>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113c:	4d43      	ldr	r5, [pc, #268]	; (800124c <HAL_GPIO_Init+0x174>)
 800113e:	69ae      	ldr	r6, [r5, #24]
 8001140:	2401      	movs	r4, #1
 8001142:	4326      	orrs	r6, r4
 8001144:	61ae      	str	r6, [r5, #24]
 8001146:	69ad      	ldr	r5, [r5, #24]
 8001148:	402c      	ands	r4, r5
 800114a:	9401      	str	r4, [sp, #4]
 800114c:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800114e:	089c      	lsrs	r4, r3, #2
 8001150:	1ca5      	adds	r5, r4, #2
 8001152:	00ad      	lsls	r5, r5, #2
 8001154:	4e3e      	ldr	r6, [pc, #248]	; (8001250 <HAL_GPIO_Init+0x178>)
 8001156:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001158:	2503      	movs	r5, #3
 800115a:	401d      	ands	r5, r3
 800115c:	00ad      	lsls	r5, r5, #2
 800115e:	270f      	movs	r7, #15
 8001160:	40af      	lsls	r7, r5
 8001162:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001164:	2790      	movs	r7, #144	; 0x90
 8001166:	05ff      	lsls	r7, r7, #23
 8001168:	42b8      	cmp	r0, r7
 800116a:	d065      	beq.n	8001238 <HAL_GPIO_Init+0x160>
 800116c:	4f39      	ldr	r7, [pc, #228]	; (8001254 <HAL_GPIO_Init+0x17c>)
 800116e:	42b8      	cmp	r0, r7
 8001170:	d064      	beq.n	800123c <HAL_GPIO_Init+0x164>
 8001172:	4f39      	ldr	r7, [pc, #228]	; (8001258 <HAL_GPIO_Init+0x180>)
 8001174:	42b8      	cmp	r0, r7
 8001176:	d063      	beq.n	8001240 <HAL_GPIO_Init+0x168>
 8001178:	4f38      	ldr	r7, [pc, #224]	; (800125c <HAL_GPIO_Init+0x184>)
 800117a:	42b8      	cmp	r0, r7
 800117c:	d05a      	beq.n	8001234 <HAL_GPIO_Init+0x15c>
 800117e:	2705      	movs	r7, #5
 8001180:	40af      	lsls	r7, r5
 8001182:	003d      	movs	r5, r7
 8001184:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001186:	3402      	adds	r4, #2
 8001188:	00a4      	lsls	r4, r4, #2
 800118a:	4e31      	ldr	r6, [pc, #196]	; (8001250 <HAL_GPIO_Init+0x178>)
 800118c:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118e:	4c34      	ldr	r4, [pc, #208]	; (8001260 <HAL_GPIO_Init+0x188>)
 8001190:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001192:	43d4      	mvns	r4, r2
 8001194:	0026      	movs	r6, r4
 8001196:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001198:	684f      	ldr	r7, [r1, #4]
 800119a:	03ff      	lsls	r7, r7, #15
 800119c:	d501      	bpl.n	80011a2 <HAL_GPIO_Init+0xca>
        {
          SET_BIT(temp, iocurrent); 
 800119e:	4315      	orrs	r5, r2
 80011a0:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80011a2:	4d2f      	ldr	r5, [pc, #188]	; (8001260 <HAL_GPIO_Init+0x188>)
 80011a4:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80011a6:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80011a8:	002e      	movs	r6, r5
 80011aa:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ac:	684f      	ldr	r7, [r1, #4]
 80011ae:	03bf      	lsls	r7, r7, #14
 80011b0:	d501      	bpl.n	80011b6 <HAL_GPIO_Init+0xde>
        { 
          SET_BIT(temp, iocurrent); 
 80011b2:	4315      	orrs	r5, r2
 80011b4:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80011b6:	4d2a      	ldr	r5, [pc, #168]	; (8001260 <HAL_GPIO_Init+0x188>)
 80011b8:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ba:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011bc:	002e      	movs	r6, r5
 80011be:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c0:	684f      	ldr	r7, [r1, #4]
 80011c2:	02ff      	lsls	r7, r7, #11
 80011c4:	d501      	bpl.n	80011ca <HAL_GPIO_Init+0xf2>
        {
          SET_BIT(temp, iocurrent); 
 80011c6:	4315      	orrs	r5, r2
 80011c8:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80011ca:	4d25      	ldr	r5, [pc, #148]	; (8001260 <HAL_GPIO_Init+0x188>)
 80011cc:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80011ce:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011d0:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d2:	684e      	ldr	r6, [r1, #4]
 80011d4:	02b6      	lsls	r6, r6, #10
 80011d6:	d501      	bpl.n	80011dc <HAL_GPIO_Init+0x104>
        {
          SET_BIT(temp, iocurrent); 
 80011d8:	432a      	orrs	r2, r5
 80011da:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <HAL_GPIO_Init+0x188>)
 80011de:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80011e0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011e2:	680a      	ldr	r2, [r1, #0]
 80011e4:	0014      	movs	r4, r2
 80011e6:	40dc      	lsrs	r4, r3
 80011e8:	d02c      	beq.n	8001244 <HAL_GPIO_Init+0x16c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011ea:	2401      	movs	r4, #1
 80011ec:	409c      	lsls	r4, r3
 80011ee:	46a0      	mov	r8, r4
 80011f0:	4022      	ands	r2, r4
    if(iocurrent)
 80011f2:	d0f5      	beq.n	80011e0 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80011f4:	684d      	ldr	r5, [r1, #4]
 80011f6:	2d02      	cmp	r5, #2
 80011f8:	d100      	bne.n	80011fc <HAL_GPIO_Init+0x124>
 80011fa:	e773      	b.n	80010e4 <HAL_GPIO_Init+0xc>
 80011fc:	2d12      	cmp	r5, #18
 80011fe:	d100      	bne.n	8001202 <HAL_GPIO_Init+0x12a>
 8001200:	e770      	b.n	80010e4 <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 8001202:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001204:	005f      	lsls	r7, r3, #1
 8001206:	2503      	movs	r5, #3
 8001208:	002c      	movs	r4, r5
 800120a:	40bc      	lsls	r4, r7
 800120c:	43e4      	mvns	r4, r4
 800120e:	46a4      	mov	ip, r4
 8001210:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001212:	684c      	ldr	r4, [r1, #4]
 8001214:	4025      	ands	r5, r4
 8001216:	40bd      	lsls	r5, r7
 8001218:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 800121a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121c:	684d      	ldr	r5, [r1, #4]
 800121e:	1e6e      	subs	r6, r5, #1
 8001220:	2e01      	cmp	r6, #1
 8001222:	d800      	bhi.n	8001226 <HAL_GPIO_Init+0x14e>
 8001224:	e76e      	b.n	8001104 <HAL_GPIO_Init+0x2c>
 8001226:	2d11      	cmp	r5, #17
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x154>
 800122a:	e76b      	b.n	8001104 <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122c:	2d12      	cmp	r5, #18
 800122e:	d000      	beq.n	8001232 <HAL_GPIO_Init+0x15a>
 8001230:	e77a      	b.n	8001128 <HAL_GPIO_Init+0x50>
 8001232:	e767      	b.n	8001104 <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001234:	2703      	movs	r7, #3
 8001236:	e7a3      	b.n	8001180 <HAL_GPIO_Init+0xa8>
 8001238:	2700      	movs	r7, #0
 800123a:	e7a1      	b.n	8001180 <HAL_GPIO_Init+0xa8>
 800123c:	2701      	movs	r7, #1
 800123e:	e79f      	b.n	8001180 <HAL_GPIO_Init+0xa8>
 8001240:	2702      	movs	r7, #2
 8001242:	e79d      	b.n	8001180 <HAL_GPIO_Init+0xa8>
  } 
}
 8001244:	b002      	add	sp, #8
 8001246:	bc04      	pop	{r2}
 8001248:	4690      	mov	r8, r2
 800124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	48000400 	.word	0x48000400
 8001258:	48000800 	.word	0x48000800
 800125c:	48000c00 	.word	0x48000c00
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001264:	6903      	ldr	r3, [r0, #16]
 8001266:	420b      	tst	r3, r1
 8001268:	d101      	bne.n	800126e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800126a:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 800126c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800126e:	2001      	movs	r0, #1
 8001270:	e7fc      	b.n	800126c <HAL_GPIO_ReadPin+0x8>

08001272 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001272:	2a00      	cmp	r2, #0
 8001274:	d101      	bne.n	800127a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001278:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127a:	6181      	str	r1, [r0, #24]
 800127c:	e7fc      	b.n	8001278 <HAL_GPIO_WritePin+0x6>

0800127e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800127e:	6943      	ldr	r3, [r0, #20]
 8001280:	4059      	eors	r1, r3
 8001282:	6141      	str	r1, [r0, #20]
}
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b570      	push	{r4, r5, r6, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	6803      	ldr	r3, [r0, #0]
 8001290:	07db      	lsls	r3, r3, #31
 8001292:	d536      	bpl.n	8001302 <HAL_RCC_OscConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001294:	4bc1      	ldr	r3, [pc, #772]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	230c      	movs	r3, #12
 800129a:	4013      	ands	r3, r2
 800129c:	2b04      	cmp	r3, #4
 800129e:	d028      	beq.n	80012f2 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a0:	4bbe      	ldr	r3, [pc, #760]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	230c      	movs	r3, #12
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d01e      	beq.n	80012ea <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d04b      	beq.n	800134a <HAL_RCC_OscConfig+0xc2>
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d150      	bne.n	8001358 <HAL_RCC_OscConfig+0xd0>
 80012b6:	4bb9      	ldr	r3, [pc, #740]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	49b9      	ldr	r1, [pc, #740]	; (80015a0 <HAL_RCC_OscConfig+0x318>)
 80012bc:	400a      	ands	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	49b8      	ldr	r1, [pc, #736]	; (80015a4 <HAL_RCC_OscConfig+0x31c>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c8:	6863      	ldr	r3, [r4, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d05c      	beq.n	8001388 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fa09 	bl	80006e4 <HAL_GetTick>
 80012d2:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d4:	4bb1      	ldr	r3, [pc, #708]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	039b      	lsls	r3, r3, #14
 80012da:	d412      	bmi.n	8001302 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fa02 	bl	80006e4 <HAL_GetTick>
 80012e0:	1b40      	subs	r0, r0, r5
 80012e2:	2864      	cmp	r0, #100	; 0x64
 80012e4:	d9f6      	bls.n	80012d4 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 80012e6:	2003      	movs	r0, #3
 80012e8:	e1ea      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ea:	4bac      	ldr	r3, [pc, #688]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	03db      	lsls	r3, r3, #15
 80012f0:	d5dc      	bpl.n	80012ac <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f2:	4baa      	ldr	r3, [pc, #680]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	039b      	lsls	r3, r3, #14
 80012f8:	d503      	bpl.n	8001302 <HAL_RCC_OscConfig+0x7a>
 80012fa:	6863      	ldr	r3, [r4, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d100      	bne.n	8001302 <HAL_RCC_OscConfig+0x7a>
 8001300:	e1db      	b.n	80016ba <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	079b      	lsls	r3, r3, #30
 8001306:	d562      	bpl.n	80013ce <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001308:	4ba4      	ldr	r3, [pc, #656]	; (800159c <HAL_RCC_OscConfig+0x314>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	220c      	movs	r2, #12
 800130e:	421a      	tst	r2, r3
 8001310:	d04c      	beq.n	80013ac <HAL_RCC_OscConfig+0x124>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001312:	4ba2      	ldr	r3, [pc, #648]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	230c      	movs	r3, #12
 8001318:	4013      	ands	r3, r2
 800131a:	2b08      	cmp	r3, #8
 800131c:	d042      	beq.n	80013a4 <HAL_RCC_OscConfig+0x11c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131e:	68e3      	ldr	r3, [r4, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d076      	beq.n	8001412 <HAL_RCC_OscConfig+0x18a>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	4a9d      	ldr	r2, [pc, #628]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	430b      	orrs	r3, r1
 800132c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff f9d9 	bl	80006e4 <HAL_GetTick>
 8001332:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	4b99      	ldr	r3, [pc, #612]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	079b      	lsls	r3, r3, #30
 800133a:	d461      	bmi.n	8001400 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff f9d2 	bl	80006e4 <HAL_GetTick>
 8001340:	1b40      	subs	r0, r0, r5
 8001342:	2802      	cmp	r0, #2
 8001344:	d9f6      	bls.n	8001334 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8001346:	2003      	movs	r0, #3
 8001348:	e1ba      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134a:	4a94      	ldr	r2, [pc, #592]	; (800159c <HAL_RCC_OscConfig+0x314>)
 800134c:	6811      	ldr	r1, [r2, #0]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	430b      	orrs	r3, r1
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e7b7      	b.n	80012c8 <HAL_RCC_OscConfig+0x40>
 8001358:	2b05      	cmp	r3, #5
 800135a:	d009      	beq.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800135c:	4b8f      	ldr	r3, [pc, #572]	; (800159c <HAL_RCC_OscConfig+0x314>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	498f      	ldr	r1, [pc, #572]	; (80015a0 <HAL_RCC_OscConfig+0x318>)
 8001362:	400a      	ands	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	498e      	ldr	r1, [pc, #568]	; (80015a4 <HAL_RCC_OscConfig+0x31c>)
 800136a:	400a      	ands	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e7ab      	b.n	80012c8 <HAL_RCC_OscConfig+0x40>
 8001370:	4b8a      	ldr	r3, [pc, #552]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	02d2      	lsls	r2, r2, #11
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	0252      	lsls	r2, r2, #9
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e79f      	b.n	80012c8 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8001388:	f7ff f9ac 	bl	80006e4 <HAL_GetTick>
 800138c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b83      	ldr	r3, [pc, #524]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	039b      	lsls	r3, r3, #14
 8001394:	d5b5      	bpl.n	8001302 <HAL_RCC_OscConfig+0x7a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff f9a5 	bl	80006e4 <HAL_GetTick>
 800139a:	1b40      	subs	r0, r0, r5
 800139c:	2864      	cmp	r0, #100	; 0x64
 800139e:	d9f6      	bls.n	800138e <HAL_RCC_OscConfig+0x106>
            return HAL_TIMEOUT;
 80013a0:	2003      	movs	r0, #3
 80013a2:	e18d      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013a4:	4b7d      	ldr	r3, [pc, #500]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	03db      	lsls	r3, r3, #15
 80013aa:	d4b8      	bmi.n	800131e <HAL_RCC_OscConfig+0x96>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ac:	4b7b      	ldr	r3, [pc, #492]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	079b      	lsls	r3, r3, #30
 80013b2:	d504      	bpl.n	80013be <HAL_RCC_OscConfig+0x136>
 80013b4:	68e3      	ldr	r3, [r4, #12]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x136>
        return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e180      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4977      	ldr	r1, [pc, #476]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80013c0:	680b      	ldr	r3, [r1, #0]
 80013c2:	22f8      	movs	r2, #248	; 0xf8
 80013c4:	4393      	bics	r3, r2
 80013c6:	6922      	ldr	r2, [r4, #16]
 80013c8:	00d2      	lsls	r2, r2, #3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	071b      	lsls	r3, r3, #28
 80013d2:	d544      	bpl.n	800145e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d4:	69e3      	ldr	r3, [r4, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d02e      	beq.n	8001438 <HAL_RCC_OscConfig+0x1b0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013da:	4a70      	ldr	r2, [pc, #448]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80013dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013de:	2101      	movs	r1, #1
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff f97e 	bl	80006e4 <HAL_GetTick>
 80013e8:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b6c      	ldr	r3, [pc, #432]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	079b      	lsls	r3, r3, #30
 80013f0:	d435      	bmi.n	800145e <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f2:	f7ff f977 	bl	80006e4 <HAL_GetTick>
 80013f6:	1b40      	subs	r0, r0, r5
 80013f8:	2802      	cmp	r0, #2
 80013fa:	d9f6      	bls.n	80013ea <HAL_RCC_OscConfig+0x162>
        {
          return HAL_TIMEOUT;
 80013fc:	2003      	movs	r0, #3
 80013fe:	e15f      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4966      	ldr	r1, [pc, #408]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001402:	680b      	ldr	r3, [r1, #0]
 8001404:	22f8      	movs	r2, #248	; 0xf8
 8001406:	4393      	bics	r3, r2
 8001408:	6922      	ldr	r2, [r4, #16]
 800140a:	00d2      	lsls	r2, r2, #3
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e7dd      	b.n	80013ce <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8001412:	4a62      	ldr	r2, [pc, #392]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001414:	6813      	ldr	r3, [r2, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	438b      	bics	r3, r1
 800141a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800141c:	f7ff f962 	bl	80006e4 <HAL_GetTick>
 8001420:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b5e      	ldr	r3, [pc, #376]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	079b      	lsls	r3, r3, #30
 8001428:	d5d1      	bpl.n	80013ce <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff f95b 	bl	80006e4 <HAL_GetTick>
 800142e:	1b40      	subs	r0, r0, r5
 8001430:	2802      	cmp	r0, #2
 8001432:	d9f6      	bls.n	8001422 <HAL_RCC_OscConfig+0x19a>
            return HAL_TIMEOUT;
 8001434:	2003      	movs	r0, #3
 8001436:	e143      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	4a58      	ldr	r2, [pc, #352]	; (800159c <HAL_RCC_OscConfig+0x314>)
 800143a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800143c:	2101      	movs	r1, #1
 800143e:	438b      	bics	r3, r1
 8001440:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff f94f 	bl	80006e4 <HAL_GetTick>
 8001446:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b54      	ldr	r3, [pc, #336]	; (800159c <HAL_RCC_OscConfig+0x314>)
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	079b      	lsls	r3, r3, #30
 800144e:	d506      	bpl.n	800145e <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff f948 	bl	80006e4 <HAL_GetTick>
 8001454:	1b40      	subs	r0, r0, r5
 8001456:	2802      	cmp	r0, #2
 8001458:	d9f6      	bls.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        {
          return HAL_TIMEOUT;
 800145a:	2003      	movs	r0, #3
 800145c:	e130      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	075b      	lsls	r3, r3, #29
 8001462:	d575      	bpl.n	8001550 <HAL_RCC_OscConfig+0x2c8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001464:	4b4d      	ldr	r3, [pc, #308]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	d42e      	bmi.n	80014ca <HAL_RCC_OscConfig+0x242>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_RCC_OscConfig+0x314>)
 800146e:	69d1      	ldr	r1, [r2, #28]
 8001470:	2080      	movs	r0, #128	; 0x80
 8001472:	0540      	lsls	r0, r0, #21
 8001474:	4301      	orrs	r1, r0
 8001476:	61d1      	str	r1, [r2, #28]
 8001478:	69d3      	ldr	r3, [r2, #28]
 800147a:	4003      	ands	r3, r0
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001480:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <HAL_RCC_OscConfig+0x320>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	d521      	bpl.n	80014ce <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148a:	68a3      	ldr	r3, [r4, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d032      	beq.n	80014f6 <HAL_RCC_OscConfig+0x26e>
 8001490:	2b00      	cmp	r3, #0
 8001492:	d136      	bne.n	8001502 <HAL_RCC_OscConfig+0x27a>
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	2101      	movs	r1, #1
 800149a:	438a      	bics	r2, r1
 800149c:	621a      	str	r2, [r3, #32]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	3103      	adds	r1, #3
 80014a2:	438a      	bics	r2, r1
 80014a4:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a6:	68a3      	ldr	r3, [r4, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d040      	beq.n	800152e <HAL_RCC_OscConfig+0x2a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff f91a 	bl	80006e4 <HAL_GetTick>
 80014b0:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	079b      	lsls	r3, r3, #30
 80014b8:	d448      	bmi.n	800154c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff f913 	bl	80006e4 <HAL_GetTick>
 80014be:	1b80      	subs	r0, r0, r6
 80014c0:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <HAL_RCC_OscConfig+0x324>)
 80014c2:	4298      	cmp	r0, r3
 80014c4:	d9f5      	bls.n	80014b2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80014c6:	2003      	movs	r0, #3
 80014c8:	e0fa      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
    FlagStatus       pwrclkchanged = RESET;
 80014ca:	2500      	movs	r5, #0
 80014cc:	e7d9      	b.n	8001482 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4a36      	ldr	r2, [pc, #216]	; (80015a8 <HAL_RCC_OscConfig+0x320>)
 80014d0:	6811      	ldr	r1, [r2, #0]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	430b      	orrs	r3, r1
 80014d8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80014da:	f7ff f903 	bl	80006e4 <HAL_GetTick>
 80014de:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_RCC_OscConfig+0x320>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	05db      	lsls	r3, r3, #23
 80014e6:	d4d0      	bmi.n	800148a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff f8fc 	bl	80006e4 <HAL_GetTick>
 80014ec:	1b80      	subs	r0, r0, r6
 80014ee:	2864      	cmp	r0, #100	; 0x64
 80014f0:	d9f6      	bls.n	80014e0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80014f2:	2003      	movs	r0, #3
 80014f4:	e0e4      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f6:	4a29      	ldr	r2, [pc, #164]	; (800159c <HAL_RCC_OscConfig+0x314>)
 80014f8:	6a13      	ldr	r3, [r2, #32]
 80014fa:	2101      	movs	r1, #1
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6213      	str	r3, [r2, #32]
 8001500:	e7d1      	b.n	80014a6 <HAL_RCC_OscConfig+0x21e>
 8001502:	2b05      	cmp	r3, #5
 8001504:	d009      	beq.n	800151a <HAL_RCC_OscConfig+0x292>
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001508:	6a1a      	ldr	r2, [r3, #32]
 800150a:	2101      	movs	r1, #1
 800150c:	438a      	bics	r2, r1
 800150e:	621a      	str	r2, [r3, #32]
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	3103      	adds	r1, #3
 8001514:	438a      	bics	r2, r1
 8001516:	621a      	str	r2, [r3, #32]
 8001518:	e7c5      	b.n	80014a6 <HAL_RCC_OscConfig+0x21e>
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x314>)
 800151c:	6a1a      	ldr	r2, [r3, #32]
 800151e:	2104      	movs	r1, #4
 8001520:	430a      	orrs	r2, r1
 8001522:	621a      	str	r2, [r3, #32]
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	3903      	subs	r1, #3
 8001528:	430a      	orrs	r2, r1
 800152a:	621a      	str	r2, [r3, #32]
 800152c:	e7bb      	b.n	80014a6 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152e:	f7ff f8d9 	bl	80006e4 <HAL_GetTick>
 8001532:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	079b      	lsls	r3, r3, #30
 800153a:	d507      	bpl.n	800154c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff f8d2 	bl	80006e4 <HAL_GetTick>
 8001540:	1b80      	subs	r0, r0, r6
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_RCC_OscConfig+0x324>)
 8001544:	4298      	cmp	r0, r3
 8001546:	d9f5      	bls.n	8001534 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8001548:	2003      	movs	r0, #3
 800154a:	e0b9      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800154c:	2d01      	cmp	r5, #1
 800154e:	d01e      	beq.n	800158e <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	06db      	lsls	r3, r3, #27
 8001554:	d55a      	bpl.n	800160c <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001556:	6963      	ldr	r3, [r4, #20]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d02b      	beq.n	80015b4 <HAL_RCC_OscConfig+0x32c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800155c:	3305      	adds	r3, #5
 800155e:	d049      	beq.n	80015f4 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001564:	2104      	movs	r1, #4
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800156a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156c:	3903      	subs	r1, #3
 800156e:	438a      	bics	r2, r1
 8001570:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff f8b7 	bl	80006e4 <HAL_GetTick>
 8001576:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_RCC_OscConfig+0x314>)
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	079b      	lsls	r3, r3, #30
 800157e:	d545      	bpl.n	800160c <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001580:	f7ff f8b0 	bl	80006e4 <HAL_GetTick>
 8001584:	1b40      	subs	r0, r0, r5
 8001586:	2802      	cmp	r0, #2
 8001588:	d9f6      	bls.n	8001578 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800158a:	2003      	movs	r0, #3
 800158c:	e098      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_PWR_CLK_DISABLE();
 800158e:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_RCC_OscConfig+0x314>)
 8001590:	69d3      	ldr	r3, [r2, #28]
 8001592:	4907      	ldr	r1, [pc, #28]	; (80015b0 <HAL_RCC_OscConfig+0x328>)
 8001594:	400b      	ands	r3, r1
 8001596:	61d3      	str	r3, [r2, #28]
 8001598:	e7da      	b.n	8001550 <HAL_RCC_OscConfig+0x2c8>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40021000 	.word	0x40021000
 80015a0:	fffeffff 	.word	0xfffeffff
 80015a4:	fffbffff 	.word	0xfffbffff
 80015a8:	40007000 	.word	0x40007000
 80015ac:	00001388 	.word	0x00001388
 80015b0:	efffffff 	.word	0xefffffff
      __HAL_RCC_HSI14ADC_DISABLE();
 80015b4:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 80015b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b8:	2104      	movs	r1, #4
 80015ba:	430a      	orrs	r2, r1
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80015be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c0:	3903      	subs	r1, #3
 80015c2:	430a      	orrs	r2, r1
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80015c6:	f7ff f88d 	bl	80006e4 <HAL_GetTick>
 80015ca:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015cc:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 80015ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d0:	079b      	lsls	r3, r3, #30
 80015d2:	d406      	bmi.n	80015e2 <HAL_RCC_OscConfig+0x35a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015d4:	f7ff f886 	bl	80006e4 <HAL_GetTick>
 80015d8:	1b40      	subs	r0, r0, r5
 80015da:	2802      	cmp	r0, #2
 80015dc:	d9f6      	bls.n	80015cc <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
 80015de:	2003      	movs	r0, #3
 80015e0:	e06e      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015e2:	4939      	ldr	r1, [pc, #228]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 80015e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80015e6:	22f8      	movs	r2, #248	; 0xf8
 80015e8:	4393      	bics	r3, r2
 80015ea:	69a2      	ldr	r2, [r4, #24]
 80015ec:	00d2      	lsls	r2, r2, #3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	634b      	str	r3, [r1, #52]	; 0x34
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSI14ADC_ENABLE();
 80015f4:	4a34      	ldr	r2, [pc, #208]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 80015f6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015f8:	2104      	movs	r1, #4
 80015fa:	438b      	bics	r3, r1
 80015fc:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001600:	31f4      	adds	r1, #244	; 0xf4
 8001602:	438b      	bics	r3, r1
 8001604:	69a1      	ldr	r1, [r4, #24]
 8001606:	00c9      	lsls	r1, r1, #3
 8001608:	430b      	orrs	r3, r1
 800160a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160c:	6a23      	ldr	r3, [r4, #32]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d055      	beq.n	80016be <HAL_RCC_OscConfig+0x436>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001612:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 8001614:	6851      	ldr	r1, [r2, #4]
 8001616:	220c      	movs	r2, #12
 8001618:	400a      	ands	r2, r1
 800161a:	2a08      	cmp	r2, #8
 800161c:	d052      	beq.n	80016c4 <HAL_RCC_OscConfig+0x43c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161e:	2b02      	cmp	r3, #2
 8001620:	d012      	beq.n	8001648 <HAL_RCC_OscConfig+0x3c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001622:	4a29      	ldr	r2, [pc, #164]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	4929      	ldr	r1, [pc, #164]	; (80016cc <HAL_RCC_OscConfig+0x444>)
 8001628:	400b      	ands	r3, r1
 800162a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff f85a 	bl	80006e4 <HAL_GetTick>
 8001630:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	d53d      	bpl.n	80016b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff f853 	bl	80006e4 <HAL_GetTick>
 800163e:	1b00      	subs	r0, r0, r4
 8001640:	2802      	cmp	r0, #2
 8001642:	d9f6      	bls.n	8001632 <HAL_RCC_OscConfig+0x3aa>
          {
            return HAL_TIMEOUT;
 8001644:	2003      	movs	r0, #3
 8001646:	e03b      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_DISABLE();
 8001648:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	491f      	ldr	r1, [pc, #124]	; (80016cc <HAL_RCC_OscConfig+0x444>)
 800164e:	400b      	ands	r3, r1
 8001650:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001652:	f7ff f847 	bl	80006e4 <HAL_GetTick>
 8001656:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	d506      	bpl.n	800166e <HAL_RCC_OscConfig+0x3e6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff f840 	bl	80006e4 <HAL_GetTick>
 8001664:	1b40      	subs	r0, r0, r5
 8001666:	2802      	cmp	r0, #2
 8001668:	d9f6      	bls.n	8001658 <HAL_RCC_OscConfig+0x3d0>
            return HAL_TIMEOUT;
 800166a:	2003      	movs	r0, #3
 800166c:	e028      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 8001670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001672:	210f      	movs	r1, #15
 8001674:	438a      	bics	r2, r1
 8001676:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001678:	430a      	orrs	r2, r1
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4914      	ldr	r1, [pc, #80]	; (80016d0 <HAL_RCC_OscConfig+0x448>)
 8001680:	400a      	ands	r2, r1
 8001682:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001684:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001686:	4301      	orrs	r1, r0
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	0452      	lsls	r2, r2, #17
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001696:	f7ff f825 	bl	80006e4 <HAL_GetTick>
 800169a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_OscConfig+0x440>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	d406      	bmi.n	80016b2 <HAL_RCC_OscConfig+0x42a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff f81e 	bl	80006e4 <HAL_GetTick>
 80016a8:	1b00      	subs	r0, r0, r4
 80016aa:	2802      	cmp	r0, #2
 80016ac:	d9f6      	bls.n	800169c <HAL_RCC_OscConfig+0x414>
            return HAL_TIMEOUT;
 80016ae:	2003      	movs	r0, #3
 80016b0:	e006      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80016b2:	2000      	movs	r0, #0
 80016b4:	e004      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
 80016b6:	2000      	movs	r0, #0
 80016b8:	e002      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
        return HAL_ERROR;
 80016ba:	2001      	movs	r0, #1
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
  return HAL_OK;
 80016be:	2000      	movs	r0, #0
}
 80016c0:	b002      	add	sp, #8
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80016c4:	2001      	movs	r0, #1
 80016c6:	e7fb      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	feffffff 	.word	0xfeffffff
 80016d0:	ffc2ffff 	.word	0xffc2ffff

080016d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d4:	b530      	push	{r4, r5, lr}
 80016d6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016d8:	aa04      	add	r2, sp, #16
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_RCC_GetSysClockFreq+0x5c>)
 80016dc:	0018      	movs	r0, r3
 80016de:	c832      	ldmia	r0!, {r1, r4, r5}
 80016e0:	c232      	stmia	r2!, {r1, r4, r5}
 80016e2:	0011      	movs	r1, r2
 80016e4:	6802      	ldr	r2, [r0, #0]
 80016e6:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016e8:	466a      	mov	r2, sp
 80016ea:	3310      	adds	r3, #16
 80016ec:	cb13      	ldmia	r3!, {r0, r1, r4}
 80016ee:	c213      	stmia	r2!, {r0, r1, r4}
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_RCC_GetSysClockFreq+0x60>)
 80016f6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f8:	230c      	movs	r3, #12
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d113      	bne.n	8001728 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001700:	0c91      	lsrs	r1, r2, #18
 8001702:	3307      	adds	r3, #7
 8001704:	4019      	ands	r1, r3
 8001706:	a804      	add	r0, sp, #16
 8001708:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <HAL_RCC_GetSysClockFreq+0x60>)
 800170c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800170e:	400b      	ands	r3, r1
 8001710:	4669      	mov	r1, sp
 8001712:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001714:	03d3      	lsls	r3, r2, #15
 8001716:	d402      	bmi.n	800171e <HAL_RCC_GetSysClockFreq+0x4a>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <HAL_RCC_GetSysClockFreq+0x64>)
 800171a:	4360      	muls	r0, r4
 800171c:	e005      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <HAL_RCC_GetSysClockFreq+0x68>)
 8001720:	f7fe fcf2 	bl	8000108 <__udivsi3>
 8001724:	4360      	muls	r0, r4
 8001726:	e000      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800172a:	b009      	add	sp, #36	; 0x24
 800172c:	bd30      	pop	{r4, r5, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	08002ccc 	.word	0x08002ccc
 8001734:	40021000 	.word	0x40021000
 8001738:	003d0900 	.word	0x003d0900
 800173c:	007a1200 	.word	0x007a1200

08001740 <HAL_RCC_ClockConfig>:
{
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	0005      	movs	r5, r0
 8001744:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001746:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x13c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	4013      	ands	r3, r2
 800174e:	428b      	cmp	r3, r1
 8001750:	d20b      	bcs.n	800176a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	494a      	ldr	r1, [pc, #296]	; (800187c <HAL_RCC_ClockConfig+0x13c>)
 8001754:	680b      	ldr	r3, [r1, #0]
 8001756:	2201      	movs	r2, #1
 8001758:	4393      	bics	r3, r2
 800175a:	4323      	orrs	r3, r4
 800175c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800175e:	680b      	ldr	r3, [r1, #0]
 8001760:	401a      	ands	r2, r3
 8001762:	4294      	cmp	r4, r2
 8001764:	d001      	beq.n	800176a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001766:	2001      	movs	r0, #1
 8001768:	e085      	b.n	8001876 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	079b      	lsls	r3, r3, #30
 800176e:	d506      	bpl.n	800177e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4a43      	ldr	r2, [pc, #268]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 8001772:	6853      	ldr	r3, [r2, #4]
 8001774:	21f0      	movs	r1, #240	; 0xf0
 8001776:	438b      	bics	r3, r1
 8001778:	68a9      	ldr	r1, [r5, #8]
 800177a:	430b      	orrs	r3, r1
 800177c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	07db      	lsls	r3, r3, #31
 8001782:	d54c      	bpl.n	800181e <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001784:	686b      	ldr	r3, [r5, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d021      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178a:	2b02      	cmp	r3, #2
 800178c:	d025      	beq.n	80017da <HAL_RCC_ClockConfig+0x9a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4a3c      	ldr	r2, [pc, #240]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	0792      	lsls	r2, r2, #30
 8001794:	d400      	bmi.n	8001798 <HAL_RCC_ClockConfig+0x58>
 8001796:	e06f      	b.n	8001878 <HAL_RCC_ClockConfig+0x138>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001798:	4939      	ldr	r1, [pc, #228]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 800179a:	684a      	ldr	r2, [r1, #4]
 800179c:	2003      	movs	r0, #3
 800179e:	4382      	bics	r2, r0
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80017a4:	f7fe ff9e 	bl	80006e4 <HAL_GetTick>
 80017a8:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	686b      	ldr	r3, [r5, #4]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d01a      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d026      	beq.n	8001802 <HAL_RCC_ClockConfig+0xc2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b4:	4b32      	ldr	r3, [pc, #200]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	220c      	movs	r2, #12
 80017ba:	421a      	tst	r2, r3
 80017bc:	d02f      	beq.n	800181e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017be:	f7fe ff91 	bl	80006e4 <HAL_GetTick>
 80017c2:	1b80      	subs	r0, r0, r6
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_RCC_ClockConfig+0x144>)
 80017c6:	4298      	cmp	r0, r3
 80017c8:	d9f4      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x74>
          return HAL_TIMEOUT;
 80017ca:	2003      	movs	r0, #3
 80017cc:	e053      	b.n	8001876 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	0392      	lsls	r2, r2, #14
 80017d4:	d4e0      	bmi.n	8001798 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e04d      	b.n	8001876 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4a29      	ldr	r2, [pc, #164]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	0192      	lsls	r2, r2, #6
 80017e0:	d4da      	bmi.n	8001798 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
 80017e4:	e047      	b.n	8001876 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	230c      	movs	r3, #12
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d015      	beq.n	800181e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f2:	f7fe ff77 	bl	80006e4 <HAL_GetTick>
 80017f6:	1b80      	subs	r0, r0, r6
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x144>)
 80017fa:	4298      	cmp	r0, r3
 80017fc:	d9f3      	bls.n	80017e6 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 80017fe:	2003      	movs	r0, #3
 8001800:	e039      	b.n	8001876 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	230c      	movs	r3, #12
 8001808:	4013      	ands	r3, r2
 800180a:	2b08      	cmp	r3, #8
 800180c:	d007      	beq.n	800181e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180e:	f7fe ff69 	bl	80006e4 <HAL_GetTick>
 8001812:	1b80      	subs	r0, r0, r6
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_ClockConfig+0x144>)
 8001816:	4298      	cmp	r0, r3
 8001818:	d9f3      	bls.n	8001802 <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 800181a:	2003      	movs	r0, #3
 800181c:	e02b      	b.n	8001876 <HAL_RCC_ClockConfig+0x136>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_RCC_ClockConfig+0x13c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2301      	movs	r3, #1
 8001824:	4013      	ands	r3, r2
 8001826:	429c      	cmp	r4, r3
 8001828:	d20b      	bcs.n	8001842 <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4914      	ldr	r1, [pc, #80]	; (800187c <HAL_RCC_ClockConfig+0x13c>)
 800182c:	680b      	ldr	r3, [r1, #0]
 800182e:	2201      	movs	r2, #1
 8001830:	4393      	bics	r3, r2
 8001832:	4323      	orrs	r3, r4
 8001834:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001836:	680b      	ldr	r3, [r1, #0]
 8001838:	401a      	ands	r2, r3
 800183a:	4294      	cmp	r4, r2
 800183c:	d001      	beq.n	8001842 <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
 8001840:	e019      	b.n	8001876 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	075b      	lsls	r3, r3, #29
 8001846:	d506      	bpl.n	8001856 <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 800184a:	6853      	ldr	r3, [r2, #4]
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x148>)
 800184e:	400b      	ands	r3, r1
 8001850:	68e9      	ldr	r1, [r5, #12]
 8001852:	430b      	orrs	r3, r1
 8001854:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001856:	f7ff ff3d 	bl	80016d4 <HAL_RCC_GetSysClockFreq>
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x140>)
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	0912      	lsrs	r2, r2, #4
 8001860:	230f      	movs	r3, #15
 8001862:	4013      	ands	r3, r2
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x14c>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	40d8      	lsrs	r0, r3
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x150>)
 800186c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800186e:	2000      	movs	r0, #0
 8001870:	f7fe ff0e 	bl	8000690 <HAL_InitTick>
  return HAL_OK;
 8001874:	2000      	movs	r0, #0
}
 8001876:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
 800187a:	e7fc      	b.n	8001876 <HAL_RCC_ClockConfig+0x136>
 800187c:	40022000 	.word	0x40022000
 8001880:	40021000 	.word	0x40021000
 8001884:	00001388 	.word	0x00001388
 8001888:	fffff8ff 	.word	0xfffff8ff
 800188c:	08002e68 	.word	0x08002e68
 8001890:	20000044 	.word	0x20000044

08001894 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001894:	4b01      	ldr	r3, [pc, #4]	; (800189c <HAL_RCC_GetHCLKFreq+0x8>)
 8001896:	6818      	ldr	r0, [r3, #0]
}
 8001898:	4770      	bx	lr
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20000044 	.word	0x20000044

080018a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018a6:	6803      	ldr	r3, [r0, #0]
 80018a8:	03db      	lsls	r3, r3, #15
 80018aa:	d535      	bpl.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ac:	4b3c      	ldr	r3, [pc, #240]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	d448      	bmi.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	4a3a      	ldr	r2, [pc, #232]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80018b6:	69d1      	ldr	r1, [r2, #28]
 80018b8:	2080      	movs	r0, #128	; 0x80
 80018ba:	0540      	lsls	r0, r0, #21
 80018bc:	4301      	orrs	r1, r0
 80018be:	61d1      	str	r1, [r2, #28]
 80018c0:	69d3      	ldr	r3, [r2, #28]
 80018c2:	4003      	ands	r3, r0
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018c8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	05db      	lsls	r3, r3, #23
 80018d0:	d53b      	bpl.n	800194a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	22c0      	movs	r2, #192	; 0xc0
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018dc:	d013      	beq.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x66>
 80018de:	6861      	ldr	r1, [r4, #4]
 80018e0:	400a      	ands	r2, r1
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00f      	beq.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80018e8:	6a18      	ldr	r0, [r3, #32]
 80018ea:	4a2f      	ldr	r2, [pc, #188]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80018ec:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018ee:	6a1e      	ldr	r6, [r3, #32]
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0249      	lsls	r1, r1, #9
 80018f4:	4331      	orrs	r1, r6
 80018f6:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018f8:	6a19      	ldr	r1, [r3, #32]
 80018fa:	4e2c      	ldr	r6, [pc, #176]	; (80019ac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80018fc:	4031      	ands	r1, r6
 80018fe:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001900:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001902:	07c3      	lsls	r3, r0, #31
 8001904:	d435      	bmi.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001906:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001908:	6a13      	ldr	r3, [r2, #32]
 800190a:	4927      	ldr	r1, [pc, #156]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800190c:	400b      	ands	r3, r1
 800190e:	6861      	ldr	r1, [r4, #4]
 8001910:	430b      	orrs	r3, r1
 8001912:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001914:	2d01      	cmp	r5, #1
 8001916:	d03b      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	07db      	lsls	r3, r3, #31
 800191c:	d506      	bpl.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800191e:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001920:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001922:	2103      	movs	r1, #3
 8001924:	438b      	bics	r3, r1
 8001926:	68a1      	ldr	r1, [r4, #8]
 8001928:	430b      	orrs	r3, r1
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	069b      	lsls	r3, r3, #26
 8001930:	d533      	bpl.n	800199a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001932:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001934:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001936:	2110      	movs	r1, #16
 8001938:	438b      	bics	r3, r1
 800193a:	68e1      	ldr	r1, [r4, #12]
 800193c:	430b      	orrs	r3, r1
 800193e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001940:	2000      	movs	r0, #0
}
 8001942:	b002      	add	sp, #8
 8001944:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2500      	movs	r5, #0
 8001948:	e7bf      	b.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800194c:	6811      	ldr	r1, [r2, #0]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	430b      	orrs	r3, r1
 8001954:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001956:	f7fe fec5 	bl	80006e4 <HAL_GetTick>
 800195a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	05db      	lsls	r3, r3, #23
 8001962:	d4b6      	bmi.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001964:	f7fe febe 	bl	80006e4 <HAL_GetTick>
 8001968:	1b80      	subs	r0, r0, r6
 800196a:	2864      	cmp	r0, #100	; 0x64
 800196c:	d9f6      	bls.n	800195c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 800196e:	2003      	movs	r0, #3
 8001970:	e7e7      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8001972:	f7fe feb7 	bl	80006e4 <HAL_GetTick>
 8001976:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	079b      	lsls	r3, r3, #30
 800197e:	d4c2      	bmi.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7fe feb0 	bl	80006e4 <HAL_GetTick>
 8001984:	1b80      	subs	r0, r0, r6
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001988:	4298      	cmp	r0, r3
 800198a:	d9f5      	bls.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 800198c:	2003      	movs	r0, #3
 800198e:	e7d8      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001990:	69d3      	ldr	r3, [r2, #28]
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001994:	400b      	ands	r3, r1
 8001996:	61d3      	str	r3, [r2, #28]
 8001998:	e7be      	b.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 800199a:	2000      	movs	r0, #0
 800199c:	e7d1      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40007000 	.word	0x40007000
 80019a8:	fffffcff 	.word	0xfffffcff
 80019ac:	fffeffff 	.word	0xfffeffff
 80019b0:	00001388 	.word	0x00001388
 80019b4:	efffffff 	.word	0xefffffff

080019b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80019bc:	6802      	ldr	r2, [r0, #0]
 80019be:	68d3      	ldr	r3, [r2, #12]
 80019c0:	21a0      	movs	r1, #160	; 0xa0
 80019c2:	438b      	bics	r3, r1
 80019c4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80019c6:	f7fe fe8d 	bl	80006e4 <HAL_GetTick>
 80019ca:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	069b      	lsls	r3, r3, #26
 80019d2:	d408      	bmi.n	80019e6 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80019d4:	f7fe fe86 	bl	80006e4 <HAL_GetTick>
 80019d8:	1b40      	subs	r0, r0, r5
 80019da:	23fa      	movs	r3, #250	; 0xfa
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4298      	cmp	r0, r3
 80019e0:	d9f4      	bls.n	80019cc <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 80019e2:	2003      	movs	r0, #3
 80019e4:	e000      	b.n	80019e8 <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 80019e6:	2000      	movs	r0, #0
}
 80019e8:	bd70      	pop	{r4, r5, r6, pc}

080019ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80019ea:	b570      	push	{r4, r5, r6, lr}
 80019ec:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80019ee:	6803      	ldr	r3, [r0, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	0652      	lsls	r2, r2, #25
 80019f4:	d501      	bpl.n	80019fa <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80019f6:	2000      	movs	r0, #0
}
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80019fa:	2201      	movs	r2, #1
 80019fc:	4252      	negs	r2, r2
 80019fe:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001a00:	f7fe fe70 	bl	80006e4 <HAL_GetTick>
 8001a04:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	065b      	lsls	r3, r3, #25
 8001a0c:	d408      	bmi.n	8001a20 <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001a0e:	f7fe fe69 	bl	80006e4 <HAL_GetTick>
 8001a12:	1b40      	subs	r0, r0, r5
 8001a14:	23fa      	movs	r3, #250	; 0xfa
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4298      	cmp	r0, r3
 8001a1a:	d9f4      	bls.n	8001a06 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	e7eb      	b.n	80019f8 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8001a20:	2000      	movs	r0, #0
 8001a22:	e7e9      	b.n	80019f8 <RTC_EnterInitMode+0xe>

08001a24 <HAL_RTC_Init>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8001a28:	d057      	beq.n	8001ada <HAL_RTC_Init+0xb6>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001a2a:	7f43      	ldrb	r3, [r0, #29]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03d      	beq.n	8001aac <HAL_RTC_Init+0x88>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001a30:	2302      	movs	r3, #2
 8001a32:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	22ca      	movs	r2, #202	; 0xca
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	3a77      	subs	r2, #119	; 0x77
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a40:	0020      	movs	r0, r4
 8001a42:	f7ff ffd2 	bl	80019ea <RTC_EnterInitMode>
 8001a46:	1e05      	subs	r5, r0, #0
 8001a48:	d134      	bne.n	8001ab4 <HAL_RTC_Init+0x90>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001a4a:	6822      	ldr	r2, [r4, #0]
 8001a4c:	6893      	ldr	r3, [r2, #8]
 8001a4e:	4924      	ldr	r1, [pc, #144]	; (8001ae0 <HAL_RTC_Init+0xbc>)
 8001a50:	400b      	ands	r3, r1
 8001a52:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001a54:	6821      	ldr	r1, [r4, #0]
 8001a56:	688a      	ldr	r2, [r1, #8]
 8001a58:	6863      	ldr	r3, [r4, #4]
 8001a5a:	6920      	ldr	r0, [r4, #16]
 8001a5c:	4303      	orrs	r3, r0
 8001a5e:	6960      	ldr	r0, [r4, #20]
 8001a60:	4303      	orrs	r3, r0
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	68e2      	ldr	r2, [r4, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001a6c:	6821      	ldr	r1, [r4, #0]
 8001a6e:	690b      	ldr	r3, [r1, #16]
 8001a70:	68a2      	ldr	r2, [r4, #8]
 8001a72:	0412      	lsls	r2, r2, #16
 8001a74:	4313      	orrs	r3, r2
 8001a76:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001a78:	6822      	ldr	r2, [r4, #0]
 8001a7a:	68d3      	ldr	r3, [r2, #12]
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	438b      	bics	r3, r1
 8001a80:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	069b      	lsls	r3, r3, #26
 8001a88:	d51b      	bpl.n	8001ac2 <HAL_RTC_Init+0x9e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a8e:	4915      	ldr	r1, [pc, #84]	; (8001ae4 <HAL_RTC_Init+0xc0>)
 8001a90:	400b      	ands	r3, r1
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a98:	69a1      	ldr	r1, [r4, #24]
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	22ff      	movs	r2, #255	; 0xff
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	7763      	strb	r3, [r4, #29]
}
 8001aa8:	0028      	movs	r0, r5
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001aac:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001aae:	f001 f839 	bl	8002b24 <HAL_RTC_MspInit>
 8001ab2:	e7bd      	b.n	8001a30 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	22ff      	movs	r2, #255	; 0xff
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001aba:	2304      	movs	r3, #4
 8001abc:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8001abe:	2501      	movs	r5, #1
 8001ac0:	e7f2      	b.n	8001aa8 <HAL_RTC_Init+0x84>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	f7ff ff78 	bl	80019b8 <HAL_RTC_WaitForSynchro>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d0de      	beq.n	8001a8a <HAL_RTC_Init+0x66>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	22ff      	movs	r2, #255	; 0xff
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8001ad6:	2501      	movs	r5, #1
 8001ad8:	e7e6      	b.n	8001aa8 <HAL_RTC_Init+0x84>
     return HAL_ERROR;
 8001ada:	2501      	movs	r5, #1
 8001adc:	e7e4      	b.n	8001aa8 <HAL_RTC_Init+0x84>
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	ff8fffbf 	.word	0xff8fffbf
 8001ae4:	fffbffff 	.word	0xfffbffff

08001ae8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001ae8:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001aea:	e002      	b.n	8001af2 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8001aec:	3301      	adds	r3, #1
    Value -= 10U;
 8001aee:	380a      	subs	r0, #10
 8001af0:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8001af2:	2809      	cmp	r0, #9
 8001af4:	d8fa      	bhi.n	8001aec <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4318      	orrs	r0, r3
}
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RTC_SetTime>:
{
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	0004      	movs	r4, r0
 8001b04:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001b06:	7f03      	ldrb	r3, [r0, #28]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d06f      	beq.n	8001bec <HAL_RTC_SetTime+0xec>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b10:	3301      	adds	r3, #1
 8001b12:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d141      	bne.n	8001b9c <HAL_RTC_SetTime+0x9c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001b18:	6803      	ldr	r3, [r0, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	065b      	lsls	r3, r3, #25
 8001b1e:	d401      	bmi.n	8001b24 <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001b24:	7830      	ldrb	r0, [r6, #0]
 8001b26:	f7ff ffdf 	bl	8001ae8 <RTC_ByteToBcd2>
 8001b2a:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001b2c:	7870      	ldrb	r0, [r6, #1]
 8001b2e:	f7ff ffdb 	bl	8001ae8 <RTC_ByteToBcd2>
 8001b32:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001b34:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001b36:	78b0      	ldrb	r0, [r6, #2]
 8001b38:	f7ff ffd6 	bl	8001ae8 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001b3c:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001b3e:	78f0      	ldrb	r0, [r6, #3]
 8001b40:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001b42:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	22ca      	movs	r2, #202	; 0xca
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	3a77      	subs	r2, #119	; 0x77
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b50:	0020      	movs	r0, r4
 8001b52:	f7ff ff4a 	bl	80019ea <RTC_EnterInitMode>
 8001b56:	1e07      	subs	r7, r0, #0
 8001b58:	d131      	bne.n	8001bbe <HAL_RTC_SetTime+0xbe>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	4825      	ldr	r0, [pc, #148]	; (8001bf4 <HAL_RTC_SetTime+0xf4>)
 8001b5e:	4005      	ands	r5, r0
 8001b60:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001b62:	6822      	ldr	r2, [r4, #0]
 8001b64:	6893      	ldr	r3, [r2, #8]
 8001b66:	4924      	ldr	r1, [pc, #144]	; (8001bf8 <HAL_RTC_SetTime+0xf8>)
 8001b68:	400b      	ands	r3, r1
 8001b6a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001b6c:	6821      	ldr	r1, [r4, #0]
 8001b6e:	688b      	ldr	r3, [r1, #8]
 8001b70:	68f2      	ldr	r2, [r6, #12]
 8001b72:	6930      	ldr	r0, [r6, #16]
 8001b74:	4302      	orrs	r2, r0
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001b7a:	6822      	ldr	r2, [r4, #0]
 8001b7c:	68d3      	ldr	r3, [r2, #12]
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	438b      	bics	r3, r1
 8001b82:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	069b      	lsls	r3, r3, #26
 8001b8a:	d521      	bpl.n	8001bd0 <HAL_RTC_SetTime+0xd0>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	22ff      	movs	r2, #255	; 0xff
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001b92:	2301      	movs	r3, #1
 8001b94:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8001b96:	2300      	movs	r3, #0
 8001b98:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8001b9a:	e028      	b.n	8001bee <HAL_RTC_SetTime+0xee>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001b9c:	6803      	ldr	r3, [r0, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	065b      	lsls	r3, r3, #25
 8001ba2:	d401      	bmi.n	8001ba8 <HAL_RTC_SetTime+0xa8>
      sTime->TimeFormat = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001ba8:	7835      	ldrb	r5, [r6, #0]
 8001baa:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001bac:	7870      	ldrb	r0, [r6, #1]
 8001bae:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001bb0:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8001bb2:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001bb4:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001bb6:	78f0      	ldrb	r0, [r6, #3]
 8001bb8:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001bba:	4305      	orrs	r5, r0
 8001bbc:	e7c2      	b.n	8001b44 <HAL_RTC_SetTime+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	22ff      	movs	r2, #255	; 0xff
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8001bcc:	2701      	movs	r7, #1
 8001bce:	e00e      	b.n	8001bee <HAL_RTC_SetTime+0xee>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001bd0:	0020      	movs	r0, r4
 8001bd2:	f7ff fef1 	bl	80019b8 <HAL_RTC_WaitForSynchro>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d0d8      	beq.n	8001b8c <HAL_RTC_SetTime+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	22ff      	movs	r2, #255	; 0xff
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001be0:	2304      	movs	r3, #4
 8001be2:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001be4:	2300      	movs	r3, #0
 8001be6:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001be8:	2701      	movs	r7, #1
 8001bea:	e000      	b.n	8001bee <HAL_RTC_SetTime+0xee>
  __HAL_LOCK(hrtc);
 8001bec:	2702      	movs	r7, #2
}
 8001bee:	0038      	movs	r0, r7
 8001bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	007f7f7f 	.word	0x007f7f7f
 8001bf8:	fffbffff 	.word	0xfffbffff

08001bfc <HAL_RTC_SetDate>:
{
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	0004      	movs	r4, r0
 8001c00:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8001c02:	7f03      	ldrb	r3, [r0, #28]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d060      	beq.n	8001cca <HAL_RTC_SetDate+0xce>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001c10:	2a00      	cmp	r2, #0
 8001c12:	d106      	bne.n	8001c22 <HAL_RTC_SetDate+0x26>
 8001c14:	784b      	ldrb	r3, [r1, #1]
 8001c16:	06d9      	lsls	r1, r3, #27
 8001c18:	d503      	bpl.n	8001c22 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	438b      	bics	r3, r1
 8001c1e:	330a      	adds	r3, #10
 8001c20:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	d12f      	bne.n	8001c86 <HAL_RTC_SetDate+0x8a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c26:	78f0      	ldrb	r0, [r6, #3]
 8001c28:	f7ff ff5e 	bl	8001ae8 <RTC_ByteToBcd2>
 8001c2c:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001c2e:	7870      	ldrb	r0, [r6, #1]
 8001c30:	f7ff ff5a 	bl	8001ae8 <RTC_ByteToBcd2>
 8001c34:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c36:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001c38:	78b0      	ldrb	r0, [r6, #2]
 8001c3a:	f7ff ff55 	bl	8001ae8 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001c3e:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));   
 8001c40:	7830      	ldrb	r0, [r6, #0]
 8001c42:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c44:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	22ca      	movs	r2, #202	; 0xca
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	3a77      	subs	r2, #119	; 0x77
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c52:	0020      	movs	r0, r4
 8001c54:	f7ff fec9 	bl	80019ea <RTC_EnterInitMode>
 8001c58:	1e06      	subs	r6, r0, #0
 8001c5a:	d11f      	bne.n	8001c9c <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	481c      	ldr	r0, [pc, #112]	; (8001cd0 <HAL_RTC_SetDate+0xd4>)
 8001c60:	4005      	ands	r5, r0
 8001c62:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001c64:	6822      	ldr	r2, [r4, #0]
 8001c66:	68d3      	ldr	r3, [r2, #12]
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	438b      	bics	r3, r1
 8001c6c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	069b      	lsls	r3, r3, #26
 8001c74:	d51b      	bpl.n	8001cae <HAL_RTC_SetDate+0xb2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	22ff      	movs	r2, #255	; 0xff
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001c80:	2300      	movs	r3, #0
 8001c82:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8001c84:	e022      	b.n	8001ccc <HAL_RTC_SetDate+0xd0>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8001c86:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8001c88:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c8a:	78f5      	ldrb	r5, [r6, #3]
 8001c8c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c8e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c90:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c92:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8001c94:	7830      	ldrb	r0, [r6, #0]
 8001c96:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c98:	4305      	orrs	r5, r0
 8001c9a:	e7d4      	b.n	8001c46 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8001caa:	2601      	movs	r6, #1
 8001cac:	e00e      	b.n	8001ccc <HAL_RTC_SetDate+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cae:	0020      	movs	r0, r4
 8001cb0:	f7ff fe82 	bl	80019b8 <HAL_RTC_WaitForSynchro>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d0de      	beq.n	8001c76 <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	22ff      	movs	r2, #255	; 0xff
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001cc6:	2601      	movs	r6, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RTC_SetDate+0xd0>
 __HAL_LOCK(hrtc);
 8001cca:	2602      	movs	r6, #2
}
 8001ccc:	0030      	movs	r0, r6
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
 8001cd0:	00ffff3f 	.word	0x00ffff3f

08001cd4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8001cd4:	0902      	lsrs	r2, r0, #4
 8001cd6:	0093      	lsls	r3, r2, #2
 8001cd8:	189b      	adds	r3, r3, r2
 8001cda:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8001cdc:	230f      	movs	r3, #15
 8001cde:	4018      	ands	r0, r3
 8001ce0:	1880      	adds	r0, r0, r2
 8001ce2:	b2c0      	uxtb	r0, r0
}
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_RTC_GetTime>:
{
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001cf2:	6803      	ldr	r3, [r0, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	045b      	lsls	r3, r3, #17
 8001cf8:	0c5b      	lsrs	r3, r3, #17
 8001cfa:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8001cfc:	6803      	ldr	r3, [r0, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <HAL_RTC_GetTime+0x54>)
 8001d02:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001d04:	0c1e      	lsrs	r6, r3, #16
 8001d06:	203f      	movs	r0, #63	; 0x3f
 8001d08:	4030      	ands	r0, r6
 8001d0a:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8001d0c:	0a1d      	lsrs	r5, r3, #8
 8001d0e:	277f      	movs	r7, #127	; 0x7f
 8001d10:	403d      	ands	r5, r7
 8001d12:	7065      	strb	r5, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001d14:	401f      	ands	r7, r3
 8001d16:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001d18:	2140      	movs	r1, #64	; 0x40
 8001d1a:	4031      	ands	r1, r6
 8001d1c:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d10a      	bne.n	8001d38 <HAL_RTC_GetTime+0x50>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001d22:	f7ff ffd7 	bl	8001cd4 <RTC_Bcd2ToByte>
 8001d26:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001d28:	0028      	movs	r0, r5
 8001d2a:	f7ff ffd3 	bl	8001cd4 <RTC_Bcd2ToByte>
 8001d2e:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001d30:	0038      	movs	r0, r7
 8001d32:	f7ff ffcf 	bl	8001cd4 <RTC_Bcd2ToByte>
 8001d36:	70a0      	strb	r0, [r4, #2]
}
 8001d38:	2000      	movs	r0, #0
 8001d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d3c:	007f7f7f 	.word	0x007f7f7f

08001d40 <HAL_RTC_GetDate>:
{
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8001d44:	6803      	ldr	r3, [r0, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	490e      	ldr	r1, [pc, #56]	; (8001d84 <HAL_RTC_GetDate+0x44>)
 8001d4a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001d4c:	0c18      	lsrs	r0, r3, #16
 8001d4e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001d50:	0a19      	lsrs	r1, r3, #8
 8001d52:	261f      	movs	r6, #31
 8001d54:	400e      	ands	r6, r1
 8001d56:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001d58:	253f      	movs	r5, #63	; 0x3f
 8001d5a:	401d      	ands	r5, r3
 8001d5c:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001d5e:	0b5b      	lsrs	r3, r3, #13
 8001d60:	2107      	movs	r1, #7
 8001d62:	400b      	ands	r3, r1
 8001d64:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d10a      	bne.n	8001d80 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001d6a:	f7ff ffb3 	bl	8001cd4 <RTC_Bcd2ToByte>
 8001d6e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001d70:	0030      	movs	r0, r6
 8001d72:	f7ff ffaf 	bl	8001cd4 <RTC_Bcd2ToByte>
 8001d76:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8001d78:	0028      	movs	r0, r5
 8001d7a:	f7ff ffab 	bl	8001cd4 <RTC_Bcd2ToByte>
 8001d7e:	70a0      	strb	r0, [r4, #2]
}
 8001d80:	2000      	movs	r0, #0
 8001d82:	bd70      	pop	{r4, r5, r6, pc}
 8001d84:	00ffff3f 	.word	0x00ffff3f

08001d88 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d88:	6803      	ldr	r3, [r0, #0]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001d92:	6802      	ldr	r2, [r0, #0]
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	430b      	orrs	r3, r1
 8001d98:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001da0:	4770      	bx	lr

08001da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIM_IRQHandler>:
{
 8001da6:	b510      	push	{r4, lr}
 8001da8:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	0792      	lsls	r2, r2, #30
 8001db0:	d50f      	bpl.n	8001dd2 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	0792      	lsls	r2, r2, #30
 8001db6:	d50c      	bpl.n	8001dd2 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db8:	2203      	movs	r2, #3
 8001dba:	4252      	negs	r2, r2
 8001dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc2:	6803      	ldr	r3, [r0, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	079b      	lsls	r3, r3, #30
 8001dc8:	d063      	beq.n	8001e92 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	f7ff ffe9 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	0752      	lsls	r2, r2, #29
 8001dd8:	d512      	bpl.n	8001e00 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	0752      	lsls	r2, r2, #29
 8001dde:	d50f      	bpl.n	8001e00 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de0:	2205      	movs	r2, #5
 8001de2:	4252      	negs	r2, r2
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	23c0      	movs	r3, #192	; 0xc0
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	421a      	tst	r2, r3
 8001df4:	d053      	beq.n	8001e9e <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	0020      	movs	r0, r4
 8001df8:	f7ff ffd2 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	0712      	lsls	r2, r2, #28
 8001e06:	d510      	bpl.n	8001e2a <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	0712      	lsls	r2, r2, #28
 8001e0c:	d50d      	bpl.n	8001e2a <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e0e:	2209      	movs	r2, #9
 8001e10:	4252      	negs	r2, r2
 8001e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e14:	2304      	movs	r3, #4
 8001e16:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	079b      	lsls	r3, r3, #30
 8001e1e:	d045      	beq.n	8001eac <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e20:	0020      	movs	r0, r4
 8001e22:	f7ff ffbd 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	2300      	movs	r3, #0
 8001e28:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	06d2      	lsls	r2, r2, #27
 8001e30:	d512      	bpl.n	8001e58 <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	06d2      	lsls	r2, r2, #27
 8001e36:	d50f      	bpl.n	8001e58 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e38:	2211      	movs	r2, #17
 8001e3a:	4252      	negs	r2, r2
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e3e:	2308      	movs	r3, #8
 8001e40:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	69da      	ldr	r2, [r3, #28]
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	421a      	tst	r2, r3
 8001e4c:	d035      	beq.n	8001eba <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f7ff ffa6 	bl	8001da0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e54:	2300      	movs	r3, #0
 8001e56:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	07d2      	lsls	r2, r2, #31
 8001e5e:	d502      	bpl.n	8001e66 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	07d2      	lsls	r2, r2, #31
 8001e64:	d430      	bmi.n	8001ec8 <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	0612      	lsls	r2, r2, #24
 8001e6c:	d502      	bpl.n	8001e74 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	0612      	lsls	r2, r2, #24
 8001e72:	d430      	bmi.n	8001ed6 <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	0652      	lsls	r2, r2, #25
 8001e7a:	d502      	bpl.n	8001e82 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	0652      	lsls	r2, r2, #25
 8001e80:	d430      	bmi.n	8001ee4 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	0692      	lsls	r2, r2, #26
 8001e88:	d502      	bpl.n	8001e90 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	0692      	lsls	r2, r2, #26
 8001e8e:	d430      	bmi.n	8001ef2 <HAL_TIM_IRQHandler+0x14c>
}
 8001e90:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	f7ff ff84 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e96:	0020      	movs	r0, r4
 8001e98:	f7ff ff83 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e9c:	e797      	b.n	8001dce <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	0020      	movs	r0, r4
 8001ea0:	f7ff ff7d 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	0020      	movs	r0, r4
 8001ea6:	f7ff ff7c 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001eaa:	e7a7      	b.n	8001dfc <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eac:	0020      	movs	r0, r4
 8001eae:	f7ff ff76 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	f7ff ff75 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001eb8:	e7b5      	b.n	8001e26 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	0020      	movs	r0, r4
 8001ebc:	f7ff ff6f 	bl	8001d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	0020      	movs	r0, r4
 8001ec2:	f7ff ff6e 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ec6:	e7c5      	b.n	8001e54 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec8:	2202      	movs	r2, #2
 8001eca:	4252      	negs	r2, r2
 8001ecc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ece:	0020      	movs	r0, r4
 8001ed0:	f000 fc68 	bl	80027a4 <HAL_TIM_PeriodElapsedCallback>
 8001ed4:	e7c7      	b.n	8001e66 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed6:	2281      	movs	r2, #129	; 0x81
 8001ed8:	4252      	negs	r2, r2
 8001eda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001edc:	0020      	movs	r0, r4
 8001ede:	f000 f874 	bl	8001fca <HAL_TIMEx_BreakCallback>
 8001ee2:	e7c7      	b.n	8001e74 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ee4:	2241      	movs	r2, #65	; 0x41
 8001ee6:	4252      	negs	r2, r2
 8001ee8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001eea:	0020      	movs	r0, r4
 8001eec:	f7ff ff5a 	bl	8001da4 <HAL_TIM_TriggerCallback>
 8001ef0:	e7c7      	b.n	8001e82 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef2:	2221      	movs	r2, #33	; 0x21
 8001ef4:	4252      	negs	r2, r2
 8001ef6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001ef8:	0020      	movs	r0, r4
 8001efa:	f000 f865 	bl	8001fc8 <HAL_TIMEx_CommutationCallback>
}
 8001efe:	e7c7      	b.n	8001e90 <HAL_TIM_IRQHandler+0xea>

08001f00 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001f00:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f02:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <TIM_Base_SetConfig+0x78>)
 8001f04:	4290      	cmp	r0, r2
 8001f06:	d032      	beq.n	8001f6e <TIM_Base_SetConfig+0x6e>
 8001f08:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <TIM_Base_SetConfig+0x7c>)
 8001f0a:	4290      	cmp	r0, r2
 8001f0c:	d02f      	beq.n	8001f6e <TIM_Base_SetConfig+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0e:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <TIM_Base_SetConfig+0x78>)
 8001f10:	4290      	cmp	r0, r2
 8001f12:	d00e      	beq.n	8001f32 <TIM_Base_SetConfig+0x32>
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <TIM_Base_SetConfig+0x7c>)
 8001f16:	4290      	cmp	r0, r2
 8001f18:	d00b      	beq.n	8001f32 <TIM_Base_SetConfig+0x32>
 8001f1a:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <TIM_Base_SetConfig+0x80>)
 8001f1c:	4290      	cmp	r0, r2
 8001f1e:	d008      	beq.n	8001f32 <TIM_Base_SetConfig+0x32>
 8001f20:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <TIM_Base_SetConfig+0x84>)
 8001f22:	4290      	cmp	r0, r2
 8001f24:	d005      	beq.n	8001f32 <TIM_Base_SetConfig+0x32>
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <TIM_Base_SetConfig+0x88>)
 8001f28:	4290      	cmp	r0, r2
 8001f2a:	d002      	beq.n	8001f32 <TIM_Base_SetConfig+0x32>
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <TIM_Base_SetConfig+0x8c>)
 8001f2e:	4290      	cmp	r0, r2
 8001f30:	d103      	bne.n	8001f3a <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f32:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <TIM_Base_SetConfig+0x90>)
 8001f34:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f36:	68ca      	ldr	r2, [r1, #12]
 8001f38:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	694a      	ldr	r2, [r1, #20]
 8001f40:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001f42:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f44:	688b      	ldr	r3, [r1, #8]
 8001f46:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f48:	680b      	ldr	r3, [r1, #0]
 8001f4a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <TIM_Base_SetConfig+0x78>)
 8001f4e:	4298      	cmp	r0, r3
 8001f50:	d008      	beq.n	8001f64 <TIM_Base_SetConfig+0x64>
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <TIM_Base_SetConfig+0x84>)
 8001f54:	4298      	cmp	r0, r3
 8001f56:	d005      	beq.n	8001f64 <TIM_Base_SetConfig+0x64>
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <TIM_Base_SetConfig+0x88>)
 8001f5a:	4298      	cmp	r0, r3
 8001f5c:	d002      	beq.n	8001f64 <TIM_Base_SetConfig+0x64>
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <TIM_Base_SetConfig+0x8c>)
 8001f60:	4298      	cmp	r0, r3
 8001f62:	d101      	bne.n	8001f68 <TIM_Base_SetConfig+0x68>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f64:	690b      	ldr	r3, [r1, #16]
 8001f66:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	6143      	str	r3, [r0, #20]
}
 8001f6c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f6e:	2270      	movs	r2, #112	; 0x70
 8001f70:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001f72:	684a      	ldr	r2, [r1, #4]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	e7ca      	b.n	8001f0e <TIM_Base_SetConfig+0xe>
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40002000 	.word	0x40002000
 8001f84:	40014000 	.word	0x40014000
 8001f88:	40014400 	.word	0x40014400
 8001f8c:	40014800 	.word	0x40014800
 8001f90:	fffffcff 	.word	0xfffffcff

08001f94 <HAL_TIM_Base_Init>:
{
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001f98:	d014      	beq.n	8001fc4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f9a:	233d      	movs	r3, #61	; 0x3d
 8001f9c:	5cc3      	ldrb	r3, [r0, r3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001fa2:	253d      	movs	r5, #61	; 0x3d
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	1d21      	adds	r1, r4, #4
 8001faa:	6820      	ldr	r0, [r4, #0]
 8001fac:	f7ff ffa8 	bl	8001f00 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001fb4:	2000      	movs	r0, #0
}
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001fb8:	2200      	movs	r2, #0
 8001fba:	333c      	adds	r3, #60	; 0x3c
 8001fbc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001fbe:	f000 fdc1 	bl	8002b44 <HAL_TIM_Base_MspInit>
 8001fc2:	e7ee      	b.n	8001fa2 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	e7f6      	b.n	8001fb6 <HAL_TIM_Base_Init+0x22>

08001fc8 <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001fc8:	4770      	bx	lr

08001fca <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fca:	4770      	bx	lr

08001fcc <EE_VerifyPageFullyErased>:
{
  uint32_t readstatus = 1;
  uint16_t addressvalue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <EE_VerifyPageFullyErased+0x20>)
 8001fce:	4298      	cmp	r0, r3
 8001fd0:	d806      	bhi.n	8001fe0 <EE_VerifyPageFullyErased+0x14>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8001fd2:	8803      	ldrh	r3, [r0, #0]
 8001fd4:	b29b      	uxth	r3, r3

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8001fd6:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <EE_VerifyPageFullyErased+0x24>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d104      	bne.n	8001fe6 <EE_VerifyPageFullyErased+0x1a>
      readstatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 8001fdc:	3004      	adds	r0, #4
 8001fde:	e7f5      	b.n	8001fcc <EE_VerifyPageFullyErased>
  uint32_t readstatus = 1;
 8001fe0:	2001      	movs	r0, #1
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8001fe2:	b280      	uxth	r0, r0
}
 8001fe4:	4770      	bx	lr
      readstatus = 0;
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e7fb      	b.n	8001fe2 <EE_VerifyPageFullyErased+0x16>
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	0800f3ff 	.word	0x0800f3ff
 8001ff0:	0000ffff 	.word	0x0000ffff

08001ff4 <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t pagestatus0 = 6, pagestatus1 = 6;

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <EE_FindValidPage+0x50>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <EE_FindValidPage+0x54>)
 8001ffc:	8812      	ldrh	r2, [r2, #0]
 8001ffe:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 8002000:	2800      	cmp	r0, #0
 8002002:	d013      	beq.n	800202c <EE_FindValidPage+0x38>
 8002004:	2801      	cmp	r0, #1
 8002006:	d119      	bne.n	800203c <EE_FindValidPage+0x48>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8002008:	2a00      	cmp	r2, #0
 800200a:	d106      	bne.n	800201a <EE_FindValidPage+0x26>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <EE_FindValidPage+0x58>)
 800200e:	428b      	cmp	r3, r1
 8002010:	d001      	beq.n	8002016 <EE_FindValidPage+0x22>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8002012:	2301      	movs	r3, #1
 8002014:	e013      	b.n	800203e <EE_FindValidPage+0x4a>
          return PAGE0;         /* Page0 valid */
 8002016:	0013      	movs	r3, r2
 8002018:	e011      	b.n	800203e <EE_FindValidPage+0x4a>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <EE_FindValidPage+0x2e>
          return PAGE0;         /* Page0 valid */
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800201e:	23ab      	movs	r3, #171	; 0xab
 8002020:	e00d      	b.n	800203e <EE_FindValidPage+0x4a>
        if (pagestatus1 == RECEIVE_DATA)
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <EE_FindValidPage+0x58>)
 8002024:	428a      	cmp	r2, r1
 8002026:	d10a      	bne.n	800203e <EE_FindValidPage+0x4a>
          return PAGE1;         /* Page1 valid */
 8002028:	3301      	adds	r3, #1
 800202a:	e008      	b.n	800203e <EE_FindValidPage+0x4a>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <EE_FindValidPage+0x4a>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (pagestatus1 == VALID_PAGE)
 8002030:	2a00      	cmp	r2, #0
 8002032:	d001      	beq.n	8002038 <EE_FindValidPage+0x44>
      {
        return PAGE1;           /* Page1 valid */
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8002034:	23ab      	movs	r3, #171	; 0xab
 8002036:	e002      	b.n	800203e <EE_FindValidPage+0x4a>
        return PAGE1;           /* Page1 valid */
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <EE_FindValidPage+0x4a>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800203c:	2300      	movs	r3, #0
  }
}
 800203e:	0018      	movs	r0, r3
 8002040:	4770      	bx	lr
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	0800f000 	.word	0x0800f000
 8002048:	0800f400 	.word	0x0800f400
 800204c:	0000eeee 	.word	0x0000eeee

08002050 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	0005      	movs	r5, r0
 8002056:	000e      	movs	r6, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  __IO uint16_t validpage = PAGE0;
 8002058:	466b      	mov	r3, sp
 800205a:	1d9c      	adds	r4, r3, #6
 800205c:	2300      	movs	r3, #0
 800205e:	8023      	strh	r3, [r4, #0]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff ffc7 	bl	8001ff4 <EE_FindValidPage>
 8002066:	8020      	strh	r0, [r4, #0]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8002068:	8823      	ldrh	r3, [r4, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	2bab      	cmp	r3, #171	; 0xab
 800206e:	d026      	beq.n	80020be <EE_VerifyPageFullWriteVariable+0x6e>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8002070:	466b      	mov	r3, sp
 8002072:	88dc      	ldrh	r4, [r3, #6]
 8002074:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <EE_VerifyPageFullWriteVariable+0x74>)
 8002076:	4694      	mov	ip, r2
 8002078:	4464      	add	r4, ip
 800207a:	02a4      	lsls	r4, r4, #10

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 800207c:	88da      	ldrh	r2, [r3, #6]
 800207e:	3201      	adds	r2, #1
 8002080:	0292      	lsls	r2, r2, #10
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <EE_VerifyPageFullWriteVariable+0x78>)
 8002084:	469c      	mov	ip, r3
 8002086:	4462      	add	r2, ip

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 8002088:	4294      	cmp	r4, r2
 800208a:	d216      	bcs.n	80020ba <EE_VerifyPageFullWriteVariable+0x6a>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	d001      	beq.n	8002096 <EE_VerifyPageFullWriteVariable+0x46>
      return flashstatus;
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8002092:	3404      	adds	r4, #4
 8002094:	e7f8      	b.n	8002088 <EE_VerifyPageFullWriteVariable+0x38>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 8002096:	0032      	movs	r2, r6
 8002098:	2300      	movs	r3, #0
 800209a:	0021      	movs	r1, r4
 800209c:	2001      	movs	r0, #1
 800209e:	f7fe ff57 	bl	8000f50 <HAL_FLASH_Program>
      if (flashstatus != HAL_OK)
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d001      	beq.n	80020aa <EE_VerifyPageFullWriteVariable+0x5a>
        return flashstatus;
 80020a6:	b280      	uxth	r0, r0
 80020a8:	e00a      	b.n	80020c0 <EE_VerifyPageFullWriteVariable+0x70>
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 80020aa:	1ca1      	adds	r1, r4, #2
 80020ac:	002a      	movs	r2, r5
 80020ae:	2300      	movs	r3, #0
 80020b0:	2001      	movs	r0, #1
 80020b2:	f7fe ff4d 	bl	8000f50 <HAL_FLASH_Program>
      return flashstatus;
 80020b6:	b280      	uxth	r0, r0
 80020b8:	e002      	b.n	80020c0 <EE_VerifyPageFullWriteVariable+0x70>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80020ba:	2080      	movs	r0, #128	; 0x80
 80020bc:	e000      	b.n	80020c0 <EE_VerifyPageFullWriteVariable+0x70>
    return  NO_VALID_PAGE;
 80020be:	20ab      	movs	r0, #171	; 0xab
}
 80020c0:	b002      	add	sp, #8
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	0002003c 	.word	0x0002003c
 80020c8:	0800efff 	.word	0x0800efff

080020cc <EE_Format>:
{
 80020cc:	b510      	push	{r4, lr}
 80020ce:	b084      	sub	sp, #16
  uint32_t page_error = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	9303      	str	r3, [sp, #12]
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80020d4:	9300      	str	r3, [sp, #0]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80020d6:	4812      	ldr	r0, [pc, #72]	; (8002120 <EE_Format+0x54>)
 80020d8:	9001      	str	r0, [sp, #4]
  s_eraseinit.NbPages     = 1;
 80020da:	3301      	adds	r3, #1
 80020dc:	9302      	str	r3, [sp, #8]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80020de:	f7ff ff75 	bl	8001fcc <EE_VerifyPageFullyErased>
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d105      	bne.n	80020f2 <EE_Format+0x26>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 80020e6:	a903      	add	r1, sp, #12
 80020e8:	4668      	mov	r0, sp
 80020ea:	f7fe ffa3 	bl	8001034 <HAL_FLASHEx_Erase>
 80020ee:	1e04      	subs	r4, r0, #0
    if (flashstatus != HAL_OK)
 80020f0:	d107      	bne.n	8002102 <EE_Format+0x36>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80020f2:	2200      	movs	r2, #0
 80020f4:	2300      	movs	r3, #0
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <EE_Format+0x54>)
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe ff29 	bl	8000f50 <HAL_FLASH_Program>
 80020fe:	1e04      	subs	r4, r0, #0
  if (flashstatus != HAL_OK)
 8002100:	d002      	beq.n	8002108 <EE_Format+0x3c>
}
 8002102:	0020      	movs	r0, r4
 8002104:	b004      	add	sp, #16
 8002106:	bd10      	pop	{r4, pc}
  s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8002108:	4806      	ldr	r0, [pc, #24]	; (8002124 <EE_Format+0x58>)
 800210a:	9001      	str	r0, [sp, #4]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800210c:	f7ff ff5e 	bl	8001fcc <EE_VerifyPageFullyErased>
 8002110:	2800      	cmp	r0, #0
 8002112:	d1f6      	bne.n	8002102 <EE_Format+0x36>
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 8002114:	a903      	add	r1, sp, #12
 8002116:	4668      	mov	r0, sp
 8002118:	f7fe ff8c 	bl	8001034 <HAL_FLASHEx_Erase>
 800211c:	0004      	movs	r4, r0
 800211e:	e7f0      	b.n	8002102 <EE_Format+0x36>
 8002120:	0800f000 	.word	0x0800f000
 8002124:	0800f400 	.word	0x0800f400

08002128 <EE_ReadVariable>:
{
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	0005      	movs	r5, r0
 800212e:	000c      	movs	r4, r1
  __IO uint16_t validpage = PAGE0;
 8002130:	466b      	mov	r3, sp
 8002132:	1d9e      	adds	r6, r3, #6
 8002134:	2300      	movs	r3, #0
 8002136:	8033      	strh	r3, [r6, #0]
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff ff5b 	bl	8001ff4 <EE_FindValidPage>
 800213e:	8030      	strh	r0, [r6, #0]
  if (validpage == NO_VALID_PAGE)
 8002140:	8833      	ldrh	r3, [r6, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	2bab      	cmp	r3, #171	; 0xab
 8002146:	d01c      	beq.n	8002182 <EE_ReadVariable+0x5a>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 8002148:	466b      	mov	r3, sp
 800214a:	88d9      	ldrh	r1, [r3, #6]
 800214c:	3306      	adds	r3, #6
 800214e:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <EE_ReadVariable+0x60>)
 8002150:	4694      	mov	ip, r2
 8002152:	4461      	add	r1, ip
 8002154:	0289      	lsls	r1, r1, #10
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	029b      	lsls	r3, r3, #10
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <EE_ReadVariable+0x64>)
 800215e:	4694      	mov	ip, r2
 8002160:	4463      	add	r3, ip
  while (address > (PageStartAddress + 2))
 8002162:	1c8a      	adds	r2, r1, #2
 8002164:	4293      	cmp	r3, r2
 8002166:	d90a      	bls.n	800217e <EE_ReadVariable+0x56>
    addressvalue = (*(__IO uint16_t*)address);
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	b292      	uxth	r2, r2
    if (addressvalue == VirtAddress)
 800216c:	42aa      	cmp	r2, r5
 800216e:	d001      	beq.n	8002174 <EE_ReadVariable+0x4c>
      address = address - 4;
 8002170:	3b04      	subs	r3, #4
 8002172:	e7f6      	b.n	8002162 <EE_ReadVariable+0x3a>
      *Data = (*(__IO uint16_t*)(address - 2));
 8002174:	3b02      	subs	r3, #2
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	8023      	strh	r3, [r4, #0]
      readstatus = 0;
 800217a:	2000      	movs	r0, #0
      break;
 800217c:	e002      	b.n	8002184 <EE_ReadVariable+0x5c>
  uint16_t addressvalue = 0x5555, readstatus = 1;
 800217e:	2001      	movs	r0, #1
 8002180:	e000      	b.n	8002184 <EE_ReadVariable+0x5c>
    return  NO_VALID_PAGE;
 8002182:	20ab      	movs	r0, #171	; 0xab
}
 8002184:	b002      	add	sp, #8
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	0002003c 	.word	0x0002003c
 800218c:	0800effe 	.word	0x0800effe

08002190 <EE_Init>:
{
 8002190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002192:	b085      	sub	sp, #20
  uint32_t page_error = 0;
 8002194:	2200      	movs	r2, #0
 8002196:	9203      	str	r2, [sp, #12]
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8002198:	4b91      	ldr	r3, [pc, #580]	; (80023e0 <EE_Init+0x250>)
 800219a:	881e      	ldrh	r6, [r3, #0]
 800219c:	b2b6      	uxth	r6, r6
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800219e:	4991      	ldr	r1, [pc, #580]	; (80023e4 <EE_Init+0x254>)
 80021a0:	880d      	ldrh	r5, [r1, #0]
 80021a2:	b2ad      	uxth	r5, r5
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80021a4:	9200      	str	r2, [sp, #0]
  s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 80021a6:	9301      	str	r3, [sp, #4]
  s_eraseinit.NbPages     = 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	9302      	str	r3, [sp, #8]
  switch (pagestatus0)
 80021ac:	4b8e      	ldr	r3, [pc, #568]	; (80023e8 <EE_Init+0x258>)
 80021ae:	429e      	cmp	r6, r3
 80021b0:	d040      	beq.n	8002234 <EE_Init+0xa4>
 80021b2:	4b8e      	ldr	r3, [pc, #568]	; (80023ec <EE_Init+0x25c>)
 80021b4:	429e      	cmp	r6, r3
 80021b6:	d00b      	beq.n	80021d0 <EE_Init+0x40>
 80021b8:	2e00      	cmp	r6, #0
 80021ba:	d100      	bne.n	80021be <EE_Init+0x2e>
 80021bc:	e0a1      	b.n	8002302 <EE_Init+0x172>
      flashstatus = EE_Format();
 80021be:	f7ff ff85 	bl	80020cc <EE_Format>
      if (flashstatus != HAL_OK)
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d100      	bne.n	80021c8 <EE_Init+0x38>
 80021c6:	e108      	b.n	80023da <EE_Init+0x24a>
        return flashstatus;
 80021c8:	b285      	uxth	r5, r0
}
 80021ca:	0028      	movs	r0, r5
 80021cc:	b005      	add	sp, #20
 80021ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80021d0:	2d00      	cmp	r5, #0
 80021d2:	d009      	beq.n	80021e8 <EE_Init+0x58>
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80021d4:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <EE_Init+0x258>)
 80021d6:	429d      	cmp	r5, r3
 80021d8:	d014      	beq.n	8002204 <EE_Init+0x74>
        flashstatus = EE_Format();
 80021da:	f7ff ff77 	bl	80020cc <EE_Format>
        if (flashstatus != HAL_OK)
 80021de:	2800      	cmp	r0, #0
 80021e0:	d100      	bne.n	80021e4 <EE_Init+0x54>
 80021e2:	e0f2      	b.n	80023ca <EE_Init+0x23a>
          return flashstatus;
 80021e4:	b285      	uxth	r5, r0
 80021e6:	e7f0      	b.n	80021ca <EE_Init+0x3a>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80021e8:	487d      	ldr	r0, [pc, #500]	; (80023e0 <EE_Init+0x250>)
 80021ea:	f7ff feef 	bl	8001fcc <EE_VerifyPageFullyErased>
 80021ee:	1e04      	subs	r4, r0, #0
 80021f0:	d1eb      	bne.n	80021ca <EE_Init+0x3a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80021f2:	a903      	add	r1, sp, #12
 80021f4:	4668      	mov	r0, sp
 80021f6:	f7fe ff1d 	bl	8001034 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d100      	bne.n	8002200 <EE_Init+0x70>
 80021fe:	e0e0      	b.n	80023c2 <EE_Init+0x232>
            return flashstatus;
 8002200:	b285      	uxth	r5, r0
 8002202:	e7e2      	b.n	80021ca <EE_Init+0x3a>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002204:	4876      	ldr	r0, [pc, #472]	; (80023e0 <EE_Init+0x250>)
 8002206:	f7ff fee1 	bl	8001fcc <EE_VerifyPageFullyErased>
 800220a:	2800      	cmp	r0, #0
 800220c:	d105      	bne.n	800221a <EE_Init+0x8a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800220e:	a903      	add	r1, sp, #12
 8002210:	4668      	mov	r0, sp
 8002212:	f7fe ff0f 	bl	8001034 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 8002216:	2800      	cmp	r0, #0
 8002218:	d10a      	bne.n	8002230 <EE_Init+0xa0>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800221a:	2200      	movs	r2, #0
 800221c:	2300      	movs	r3, #0
 800221e:	4971      	ldr	r1, [pc, #452]	; (80023e4 <EE_Init+0x254>)
 8002220:	2001      	movs	r0, #1
 8002222:	f7fe fe95 	bl	8000f50 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002226:	2800      	cmp	r0, #0
 8002228:	d100      	bne.n	800222c <EE_Init+0x9c>
 800222a:	e0cc      	b.n	80023c6 <EE_Init+0x236>
          return flashstatus;
 800222c:	b285      	uxth	r5, r0
 800222e:	e7cc      	b.n	80021ca <EE_Init+0x3a>
            return flashstatus;
 8002230:	b285      	uxth	r5, r0
 8002232:	e7ca      	b.n	80021ca <EE_Init+0x3a>
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8002234:	2d00      	cmp	r5, #0
 8002236:	d02a      	beq.n	800228e <EE_Init+0xfe>
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002238:	4b6c      	ldr	r3, [pc, #432]	; (80023ec <EE_Init+0x25c>)
 800223a:	429d      	cmp	r5, r3
 800223c:	d049      	beq.n	80022d2 <EE_Init+0x142>
        flashstatus = EE_Format();
 800223e:	f7ff ff45 	bl	80020cc <EE_Format>
        if (flashstatus != HAL_OK)
 8002242:	2800      	cmp	r0, #0
 8002244:	d100      	bne.n	8002248 <EE_Init+0xb8>
 8002246:	e0c6      	b.n	80023d6 <EE_Init+0x246>
          return flashstatus;
 8002248:	b285      	uxth	r5, r0
 800224a:	e7be      	b.n	80021ca <EE_Init+0x3a>
            x = varidx;
 800224c:	b227      	sxth	r7, r4
 800224e:	e00c      	b.n	800226a <EE_Init+0xda>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002250:	3401      	adds	r4, #1
 8002252:	b2a4      	uxth	r4, r4
 8002254:	2c0f      	cmp	r4, #15
 8002256:	d81e      	bhi.n	8002296 <EE_Init+0x106>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002258:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <EE_Init+0x260>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	0026      	movs	r6, r4
 8002260:	0062      	lsls	r2, r4, #1
 8002262:	4964      	ldr	r1, [pc, #400]	; (80023f4 <EE_Init+0x264>)
 8002264:	5a50      	ldrh	r0, [r2, r1]
 8002266:	4283      	cmp	r3, r0
 8002268:	d0f0      	beq.n	800224c <EE_Init+0xbc>
          if (varidx != x)
 800226a:	42be      	cmp	r6, r7
 800226c:	d0f0      	beq.n	8002250 <EE_Init+0xc0>
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800226e:	4962      	ldr	r1, [pc, #392]	; (80023f8 <EE_Init+0x268>)
 8002270:	f7ff ff5a 	bl	8002128 <EE_ReadVariable>
            if (readstatus != 0x1)
 8002274:	2801      	cmp	r0, #1
 8002276:	d0eb      	beq.n	8002250 <EE_Init+0xc0>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8002278:	0076      	lsls	r6, r6, #1
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <EE_Init+0x264>)
 800227c:	5af0      	ldrh	r0, [r6, r3]
 800227e:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <EE_Init+0x268>)
 8002280:	8819      	ldrh	r1, [r3, #0]
 8002282:	f7ff fee5 	bl	8002050 <EE_VerifyPageFullWriteVariable>
              if (eepromstatus != HAL_OK)
 8002286:	2800      	cmp	r0, #0
 8002288:	d0e2      	beq.n	8002250 <EE_Init+0xc0>
                return eepromstatus;
 800228a:	0005      	movs	r5, r0
 800228c:	e79d      	b.n	80021ca <EE_Init+0x3a>
 800228e:	002c      	movs	r4, r5
 8002290:	2701      	movs	r7, #1
 8002292:	427f      	negs	r7, r7
 8002294:	e7de      	b.n	8002254 <EE_Init+0xc4>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002296:	2200      	movs	r2, #0
 8002298:	2300      	movs	r3, #0
 800229a:	4951      	ldr	r1, [pc, #324]	; (80023e0 <EE_Init+0x250>)
 800229c:	2001      	movs	r0, #1
 800229e:	f7fe fe57 	bl	8000f50 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d001      	beq.n	80022aa <EE_Init+0x11a>
          return flashstatus;
 80022a6:	b285      	uxth	r5, r0
 80022a8:	e78f      	b.n	80021ca <EE_Init+0x3a>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80022aa:	2300      	movs	r3, #0
 80022ac:	9300      	str	r3, [sp, #0]
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 80022ae:	484d      	ldr	r0, [pc, #308]	; (80023e4 <EE_Init+0x254>)
 80022b0:	9001      	str	r0, [sp, #4]
        s_eraseinit.NbPages     = 1;
 80022b2:	3301      	adds	r3, #1
 80022b4:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80022b6:	f7ff fe89 	bl	8001fcc <EE_VerifyPageFullyErased>
 80022ba:	1e04      	subs	r4, r0, #0
 80022bc:	d000      	beq.n	80022c0 <EE_Init+0x130>
 80022be:	e784      	b.n	80021ca <EE_Init+0x3a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80022c0:	a903      	add	r1, sp, #12
 80022c2:	4668      	mov	r0, sp
 80022c4:	f7fe feb6 	bl	8001034 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d100      	bne.n	80022ce <EE_Init+0x13e>
 80022cc:	e07f      	b.n	80023ce <EE_Init+0x23e>
            return flashstatus;
 80022ce:	b285      	uxth	r5, r0
 80022d0:	e77b      	b.n	80021ca <EE_Init+0x3a>
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 80022d2:	4844      	ldr	r0, [pc, #272]	; (80023e4 <EE_Init+0x254>)
 80022d4:	9001      	str	r0, [sp, #4]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80022d6:	f7ff fe79 	bl	8001fcc <EE_VerifyPageFullyErased>
 80022da:	2800      	cmp	r0, #0
 80022dc:	d105      	bne.n	80022ea <EE_Init+0x15a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80022de:	a903      	add	r1, sp, #12
 80022e0:	4668      	mov	r0, sp
 80022e2:	f7fe fea7 	bl	8001034 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d109      	bne.n	80022fe <EE_Init+0x16e>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2300      	movs	r3, #0
 80022ee:	493c      	ldr	r1, [pc, #240]	; (80023e0 <EE_Init+0x250>)
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7fe fe2d 	bl	8000f50 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d06b      	beq.n	80023d2 <EE_Init+0x242>
          return flashstatus;
 80022fa:	b285      	uxth	r5, r0
 80022fc:	e765      	b.n	80021ca <EE_Init+0x3a>
            return flashstatus;
 80022fe:	b285      	uxth	r5, r0
 8002300:	e763      	b.n	80021ca <EE_Init+0x3a>
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8002302:	2d00      	cmp	r5, #0
 8002304:	d006      	beq.n	8002314 <EE_Init+0x184>
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 8002306:	4b39      	ldr	r3, [pc, #228]	; (80023ec <EE_Init+0x25c>)
 8002308:	429d      	cmp	r5, r3
 800230a:	d00a      	beq.n	8002322 <EE_Init+0x192>
 800230c:	0034      	movs	r4, r6
 800230e:	2701      	movs	r7, #1
 8002310:	427f      	negs	r7, r7
 8002312:	e01b      	b.n	800234c <EE_Init+0x1bc>
        flashstatus = EE_Format();
 8002314:	f7ff feda 	bl	80020cc <EE_Format>
        if (flashstatus != HAL_OK)
 8002318:	2800      	cmp	r0, #0
 800231a:	d100      	bne.n	800231e <EE_Init+0x18e>
 800231c:	e755      	b.n	80021ca <EE_Init+0x3a>
          return flashstatus;
 800231e:	b285      	uxth	r5, r0
 8002320:	e753      	b.n	80021ca <EE_Init+0x3a>
        s_eraseinit.PageAddress = PAGE1_BASE_ADDRESS;
 8002322:	4830      	ldr	r0, [pc, #192]	; (80023e4 <EE_Init+0x254>)
 8002324:	9001      	str	r0, [sp, #4]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002326:	f7ff fe51 	bl	8001fcc <EE_VerifyPageFullyErased>
 800232a:	1e05      	subs	r5, r0, #0
 800232c:	d001      	beq.n	8002332 <EE_Init+0x1a2>
  return HAL_OK;
 800232e:	0035      	movs	r5, r6
 8002330:	e74b      	b.n	80021ca <EE_Init+0x3a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8002332:	a903      	add	r1, sp, #12
 8002334:	4668      	mov	r0, sp
 8002336:	f7fe fe7d 	bl	8001034 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 800233a:	2800      	cmp	r0, #0
 800233c:	d100      	bne.n	8002340 <EE_Init+0x1b0>
 800233e:	e744      	b.n	80021ca <EE_Init+0x3a>
            return flashstatus;
 8002340:	b285      	uxth	r5, r0
 8002342:	e742      	b.n	80021ca <EE_Init+0x3a>
            x = varidx;
 8002344:	b227      	sxth	r7, r4
 8002346:	e00c      	b.n	8002362 <EE_Init+0x1d2>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8002348:	3401      	adds	r4, #1
 800234a:	b2a4      	uxth	r4, r4
 800234c:	2c0f      	cmp	r4, #15
 800234e:	d819      	bhi.n	8002384 <EE_Init+0x1f4>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <EE_Init+0x26c>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	0025      	movs	r5, r4
 8002358:	0062      	lsls	r2, r4, #1
 800235a:	4926      	ldr	r1, [pc, #152]	; (80023f4 <EE_Init+0x264>)
 800235c:	5a50      	ldrh	r0, [r2, r1]
 800235e:	4283      	cmp	r3, r0
 8002360:	d0f0      	beq.n	8002344 <EE_Init+0x1b4>
          if (varidx != x)
 8002362:	42bd      	cmp	r5, r7
 8002364:	d0f0      	beq.n	8002348 <EE_Init+0x1b8>
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8002366:	4924      	ldr	r1, [pc, #144]	; (80023f8 <EE_Init+0x268>)
 8002368:	f7ff fede 	bl	8002128 <EE_ReadVariable>
            if (readstatus != 0x1)
 800236c:	2801      	cmp	r0, #1
 800236e:	d0eb      	beq.n	8002348 <EE_Init+0x1b8>
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8002370:	006d      	lsls	r5, r5, #1
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <EE_Init+0x264>)
 8002374:	5ae8      	ldrh	r0, [r5, r3]
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <EE_Init+0x268>)
 8002378:	8819      	ldrh	r1, [r3, #0]
 800237a:	f7ff fe69 	bl	8002050 <EE_VerifyPageFullWriteVariable>
 800237e:	1e05      	subs	r5, r0, #0
              if (eepromstatus != HAL_OK)
 8002380:	d0e2      	beq.n	8002348 <EE_Init+0x1b8>
 8002382:	e722      	b.n	80021ca <EE_Init+0x3a>
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8002384:	2200      	movs	r2, #0
 8002386:	2300      	movs	r3, #0
 8002388:	4916      	ldr	r1, [pc, #88]	; (80023e4 <EE_Init+0x254>)
 800238a:	2001      	movs	r0, #1
 800238c:	f7fe fde0 	bl	8000f50 <HAL_FLASH_Program>
        if (flashstatus != HAL_OK)
 8002390:	2800      	cmp	r0, #0
 8002392:	d001      	beq.n	8002398 <EE_Init+0x208>
          return flashstatus;
 8002394:	b285      	uxth	r5, r0
 8002396:	e718      	b.n	80021ca <EE_Init+0x3a>
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002398:	2300      	movs	r3, #0
 800239a:	9300      	str	r3, [sp, #0]
        s_eraseinit.PageAddress = PAGE0_BASE_ADDRESS;
 800239c:	4810      	ldr	r0, [pc, #64]	; (80023e0 <EE_Init+0x250>)
 800239e:	9001      	str	r0, [sp, #4]
        s_eraseinit.NbPages     = 1;
 80023a0:	3301      	adds	r3, #1
 80023a2:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80023a4:	f7ff fe12 	bl	8001fcc <EE_VerifyPageFullyErased>
 80023a8:	1e05      	subs	r5, r0, #0
 80023aa:	d001      	beq.n	80023b0 <EE_Init+0x220>
  return HAL_OK;
 80023ac:	0035      	movs	r5, r6
 80023ae:	e70c      	b.n	80021ca <EE_Init+0x3a>
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80023b0:	a903      	add	r1, sp, #12
 80023b2:	4668      	mov	r0, sp
 80023b4:	f7fe fe3e 	bl	8001034 <HAL_FLASHEx_Erase>
          if (flashstatus != HAL_OK)
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d100      	bne.n	80023be <EE_Init+0x22e>
 80023bc:	e705      	b.n	80021ca <EE_Init+0x3a>
            return flashstatus;
 80023be:	b285      	uxth	r5, r0
 80023c0:	e703      	b.n	80021ca <EE_Init+0x3a>
  return HAL_OK;
 80023c2:	0025      	movs	r5, r4
 80023c4:	e701      	b.n	80021ca <EE_Init+0x3a>
 80023c6:	2500      	movs	r5, #0
 80023c8:	e6ff      	b.n	80021ca <EE_Init+0x3a>
 80023ca:	2500      	movs	r5, #0
 80023cc:	e6fd      	b.n	80021ca <EE_Init+0x3a>
 80023ce:	0025      	movs	r5, r4
 80023d0:	e6fb      	b.n	80021ca <EE_Init+0x3a>
 80023d2:	2500      	movs	r5, #0
 80023d4:	e6f9      	b.n	80021ca <EE_Init+0x3a>
 80023d6:	2500      	movs	r5, #0
 80023d8:	e6f7      	b.n	80021ca <EE_Init+0x3a>
 80023da:	2500      	movs	r5, #0
 80023dc:	e6f5      	b.n	80021ca <EE_Init+0x3a>
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	0800f000 	.word	0x0800f000
 80023e4:	0800f400 	.word	0x0800f400
 80023e8:	0000eeee 	.word	0x0000eeee
 80023ec:	0000ffff 	.word	0x0000ffff
 80023f0:	0800f006 	.word	0x0800f006
 80023f4:	20000024 	.word	0x20000024
 80023f8:	20000064 	.word	0x20000064
 80023fc:	0800f406 	.word	0x0800f406

08002400 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8002400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002402:	46c6      	mov	lr, r8
 8002404:	b500      	push	{lr}
 8002406:	b084      	sub	sp, #16
 8002408:	0007      	movs	r7, r0
 800240a:	000d      	movs	r5, r1
  HAL_StatusTypeDef flashstatus = HAL_OK;
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
  uint32_t oldpageid = 0;
  uint16_t validpage = PAGE0, varidx = 0;
  uint16_t eepromstatus = 0, readstatus = 0;
  uint32_t page_error = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	9303      	str	r3, [sp, #12]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8002410:	2000      	movs	r0, #0
 8002412:	f7ff fdef 	bl	8001ff4 <EE_FindValidPage>

  if (validpage == PAGE1)       /* Page1 valid */
 8002416:	2801      	cmp	r0, #1
 8002418:	d014      	beq.n	8002444 <EE_PageTransfer+0x44>
    newpageaddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_BASE_ADDRESS;
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 800241a:	2800      	cmp	r0, #0
 800241c:	d005      	beq.n	800242a <EE_PageTransfer+0x2a>
    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800241e:	24ab      	movs	r4, #171	; 0xab
  
  

  /* Return last operation flash status */
  return flashstatus;
}
 8002420:	0020      	movs	r0, r4
 8002422:	b004      	add	sp, #16
 8002424:	bc04      	pop	{r2}
 8002426:	4690      	mov	r8, r2
 8002428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    oldpageid = PAGE0_BASE_ADDRESS;
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <EE_PageTransfer+0xc0>)
 800242c:	4698      	mov	r8, r3
    newpageaddress = PAGE1_BASE_ADDRESS;
 800242e:	4e25      	ldr	r6, [pc, #148]	; (80024c4 <EE_PageTransfer+0xc4>)
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 8002430:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <EE_PageTransfer+0xc8>)
 8002432:	2300      	movs	r3, #0
 8002434:	0031      	movs	r1, r6
 8002436:	2001      	movs	r0, #1
 8002438:	f7fe fd8a 	bl	8000f50 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 800243c:	2800      	cmp	r0, #0
 800243e:	d005      	beq.n	800244c <EE_PageTransfer+0x4c>
    return flashstatus;
 8002440:	b284      	uxth	r4, r0
 8002442:	e7ed      	b.n	8002420 <EE_PageTransfer+0x20>
    oldpageid = PAGE1_BASE_ADDRESS;
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <EE_PageTransfer+0xc4>)
 8002446:	4698      	mov	r8, r3
    newpageaddress = PAGE0_BASE_ADDRESS;
 8002448:	4e1d      	ldr	r6, [pc, #116]	; (80024c0 <EE_PageTransfer+0xc0>)
 800244a:	e7f1      	b.n	8002430 <EE_PageTransfer+0x30>
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800244c:	0029      	movs	r1, r5
 800244e:	0038      	movs	r0, r7
 8002450:	f7ff fdfe 	bl	8002050 <EE_VerifyPageFullWriteVariable>
 8002454:	1e04      	subs	r4, r0, #0
  if (eepromstatus != HAL_OK)
 8002456:	d002      	beq.n	800245e <EE_PageTransfer+0x5e>
 8002458:	e7e2      	b.n	8002420 <EE_PageTransfer+0x20>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800245a:	3401      	adds	r4, #1
 800245c:	b2a4      	uxth	r4, r4
 800245e:	2c0f      	cmp	r4, #15
 8002460:	d814      	bhi.n	800248c <EE_PageTransfer+0x8c>
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002462:	0063      	lsls	r3, r4, #1
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <EE_PageTransfer+0xcc>)
 8002466:	5a98      	ldrh	r0, [r3, r2]
 8002468:	4287      	cmp	r7, r0
 800246a:	d0f6      	beq.n	800245a <EE_PageTransfer+0x5a>
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 800246c:	4918      	ldr	r1, [pc, #96]	; (80024d0 <EE_PageTransfer+0xd0>)
 800246e:	f7ff fe5b 	bl	8002128 <EE_ReadVariable>
      if (readstatus != 0x1)
 8002472:	2801      	cmp	r0, #1
 8002474:	d0f1      	beq.n	800245a <EE_PageTransfer+0x5a>
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8002476:	0065      	lsls	r5, r4, #1
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <EE_PageTransfer+0xcc>)
 800247a:	5ae8      	ldrh	r0, [r5, r3]
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <EE_PageTransfer+0xd0>)
 800247e:	8819      	ldrh	r1, [r3, #0]
 8002480:	f7ff fde6 	bl	8002050 <EE_VerifyPageFullWriteVariable>
        if (eepromstatus != HAL_OK)
 8002484:	2800      	cmp	r0, #0
 8002486:	d0e8      	beq.n	800245a <EE_PageTransfer+0x5a>
          return eepromstatus;
 8002488:	0004      	movs	r4, r0
 800248a:	e7c9      	b.n	8002420 <EE_PageTransfer+0x20>
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
  s_eraseinit.PageAddress = oldpageid;
 8002490:	4643      	mov	r3, r8
 8002492:	9301      	str	r3, [sp, #4]
  s_eraseinit.NbPages     = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	9302      	str	r3, [sp, #8]
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8002498:	a903      	add	r1, sp, #12
 800249a:	4668      	mov	r0, sp
 800249c:	f7fe fdca 	bl	8001034 <HAL_FLASHEx_Erase>
  if (flashstatus != HAL_OK)
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d001      	beq.n	80024a8 <EE_PageTransfer+0xa8>
    return flashstatus;
 80024a4:	b284      	uxth	r4, r0
 80024a6:	e7bb      	b.n	8002420 <EE_PageTransfer+0x20>
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 80024a8:	2200      	movs	r2, #0
 80024aa:	2300      	movs	r3, #0
 80024ac:	0031      	movs	r1, r6
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7fe fd4e 	bl	8000f50 <HAL_FLASH_Program>
  if (flashstatus != HAL_OK)
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d101      	bne.n	80024bc <EE_PageTransfer+0xbc>
  return flashstatus;
 80024b8:	b284      	uxth	r4, r0
 80024ba:	e7b1      	b.n	8002420 <EE_PageTransfer+0x20>
    return flashstatus;
 80024bc:	b284      	uxth	r4, r0
 80024be:	e7af      	b.n	8002420 <EE_PageTransfer+0x20>
 80024c0:	0800f000 	.word	0x0800f000
 80024c4:	0800f400 	.word	0x0800f400
 80024c8:	0000eeee 	.word	0x0000eeee
 80024cc:	20000024 	.word	0x20000024
 80024d0:	20000064 	.word	0x20000064

080024d4 <EE_WriteVariable>:
{
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	0004      	movs	r4, r0
 80024d8:	000d      	movs	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80024da:	f7ff fdb9 	bl	8002050 <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 80024de:	2880      	cmp	r0, #128	; 0x80
 80024e0:	d000      	beq.n	80024e4 <EE_WriteVariable+0x10>
}
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 80024e4:	0029      	movs	r1, r5
 80024e6:	0020      	movs	r0, r4
 80024e8:	f7ff ff8a 	bl	8002400 <EE_PageTransfer>
 80024ec:	e7f9      	b.n	80024e2 <EE_WriteVariable+0xe>
	...

080024f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <MX_GPIO_Init+0xc4>)
 80024f6:	6959      	ldr	r1, [r3, #20]
 80024f8:	2080      	movs	r0, #128	; 0x80
 80024fa:	0280      	lsls	r0, r0, #10
 80024fc:	4301      	orrs	r1, r0
 80024fe:	6159      	str	r1, [r3, #20]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	4002      	ands	r2, r0
 8002504:	9200      	str	r2, [sp, #0]
 8002506:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	6959      	ldr	r1, [r3, #20]
 800250a:	2080      	movs	r0, #128	; 0x80
 800250c:	02c0      	lsls	r0, r0, #11
 800250e:	4301      	orrs	r1, r0
 8002510:	6159      	str	r1, [r3, #20]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	4002      	ands	r2, r0
 8002516:	9201      	str	r2, [sp, #4]
 8002518:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	03c9      	lsls	r1, r1, #15
 8002520:	430a      	orrs	r2, r1
 8002522:	615a      	str	r2, [r3, #20]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	400b      	ands	r3, r1
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin|BUZZER_Pin 
 800252c:	2200      	movs	r2, #0
 800252e:	4922      	ldr	r1, [pc, #136]	; (80025b8 <MX_GPIO_Init+0xc8>)
 8002530:	4822      	ldr	r0, [pc, #136]	; (80025bc <MX_GPIO_Init+0xcc>)
 8002532:	f7fe fe9e 	bl	8001272 <HAL_GPIO_WritePin>
                          |DB_Pin|G_Pin|F_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin 
 8002536:	259f      	movs	r5, #159	; 0x9f
 8002538:	022d      	lsls	r5, r5, #8
 800253a:	2200      	movs	r2, #0
 800253c:	0029      	movs	r1, r5
 800253e:	2090      	movs	r0, #144	; 0x90
 8002540:	05c0      	lsls	r0, r0, #23
 8002542:	f7fe fe96 	bl	8001272 <HAL_GPIO_WritePin>
                          |D_Pin|A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, C_Pin|B_Pin, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	21c0      	movs	r1, #192	; 0xc0
 800254a:	481d      	ldr	r0, [pc, #116]	; (80025c0 <MX_GPIO_Init+0xd0>)
 800254c:	f7fe fe91 	bl	8001272 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin */
  GPIO_InitStruct.Pin = RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin;
 8002550:	2307      	movs	r3, #7
 8002552:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002554:	2601      	movs	r6, #1
 8002556:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2400      	movs	r4, #0
 800255a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255e:	a903      	add	r1, sp, #12
 8002560:	4816      	ldr	r0, [pc, #88]	; (80025bc <MX_GPIO_Init+0xcc>)
 8002562:	f7fe fdb9 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin DB_Pin G_Pin F_Pin 
                           E_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|DB_Pin|G_Pin|F_Pin 
 8002566:	23f4      	movs	r3, #244	; 0xf4
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	9303      	str	r3, [sp, #12]
                          |E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800256c:	2711      	movs	r7, #17
 800256e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	a903      	add	r1, sp, #12
 8002576:	4811      	ldr	r0, [pc, #68]	; (80025bc <MX_GPIO_Init+0xcc>)
 8002578:	f7fe fdae 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin LED1_Pin 
                           D_Pin A_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin 
 800257c:	9503      	str	r5, [sp, #12]
                          |D_Pin|A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800257e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	a903      	add	r1, sp, #12
 8002586:	2090      	movs	r0, #144	; 0x90
 8002588:	05c0      	lsls	r0, r0, #23
 800258a:	f7fe fda5 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_Pin B_Pin */
  GPIO_InitStruct.Pin = C_Pin|B_Pin;
 800258e:	23c0      	movs	r3, #192	; 0xc0
 8002590:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002592:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002598:	a903      	add	r1, sp, #12
 800259a:	4809      	ldr	r0, [pc, #36]	; (80025c0 <MX_GPIO_Init+0xd0>)
 800259c:	f7fe fd9c 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_down_Pin SW_up_Pin SW_menu_Pin */
  GPIO_InitStruct.Pin = SW_down_Pin|SW_up_Pin|SW_menu_Pin;
 80025a0:	2338      	movs	r3, #56	; 0x38
 80025a2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a6:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a8:	a903      	add	r1, sp, #12
 80025aa:	4804      	ldr	r0, [pc, #16]	; (80025bc <MX_GPIO_Init+0xcc>)
 80025ac:	f7fe fd94 	bl	80010d8 <HAL_GPIO_Init>

}
 80025b0:	b009      	add	sp, #36	; 0x24
 80025b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	0000f407 	.word	0x0000f407
 80025bc:	48000400 	.word	0x48000400
 80025c0:	48001400 	.word	0x48001400

080025c4 <MX_DMA_Init>:
{
 80025c4:	b500      	push	{lr}
 80025c6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025c8:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <MX_DMA_Init+0x2c>)
 80025ca:	6951      	ldr	r1, [r2, #20]
 80025cc:	2301      	movs	r3, #1
 80025ce:	4319      	orrs	r1, r3
 80025d0:	6151      	str	r1, [r2, #20]
 80025d2:	6952      	ldr	r2, [r2, #20]
 80025d4:	4013      	ands	r3, r2
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2009      	movs	r0, #9
 80025e0:	f7fe faf4 	bl	8000bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025e4:	2009      	movs	r0, #9
 80025e6:	f7fe fb23 	bl	8000c30 <HAL_NVIC_EnableIRQ>
}
 80025ea:	b003      	add	sp, #12
 80025ec:	bd00      	pop	{pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	40021000 	.word	0x40021000

080025f4 <MX_ADC_Init>:
{
 80025f4:	b570      	push	{r4, r5, r6, lr}
 80025f6:	b084      	sub	sp, #16
  hadc.Instance = ADC1;
 80025f8:	4c25      	ldr	r4, [pc, #148]	; (8002690 <MX_ADC_Init+0x9c>)
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <MX_ADC_Init+0xa0>)
 80025fc:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025fe:	2500      	movs	r5, #0
 8002600:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002602:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002604:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002606:	2601      	movs	r6, #1
 8002608:	6126      	str	r6, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800260a:	2308      	movs	r3, #8
 800260c:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800260e:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002610:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002612:	6226      	str	r6, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002614:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002616:	23c2      	movs	r3, #194	; 0xc2
 8002618:	33ff      	adds	r3, #255	; 0xff
 800261a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800261c:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 800261e:	6326      	str	r6, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002620:	6365      	str	r5, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002622:	0020      	movs	r0, r4
 8002624:	f7fe f8d0 	bl	80007c8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_0;
 8002628:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	015b      	lsls	r3, r3, #5
 800262e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002630:	3507      	adds	r5, #7
 8002632:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002634:	a901      	add	r1, sp, #4
 8002636:	0020      	movs	r0, r4
 8002638:	f7fe fa2e 	bl	8000a98 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 800263c:	9601      	str	r6, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800263e:	a901      	add	r1, sp, #4
 8002640:	0020      	movs	r0, r4
 8002642:	f7fe fa29 	bl	8000a98 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8002646:	2302      	movs	r3, #2
 8002648:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800264a:	a901      	add	r1, sp, #4
 800264c:	0020      	movs	r0, r4
 800264e:	f7fe fa23 	bl	8000a98 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 8002652:	2303      	movs	r3, #3
 8002654:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002656:	a901      	add	r1, sp, #4
 8002658:	0020      	movs	r0, r4
 800265a:	f7fe fa1d 	bl	8000a98 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 800265e:	2304      	movs	r3, #4
 8002660:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002662:	a901      	add	r1, sp, #4
 8002664:	0020      	movs	r0, r4
 8002666:	f7fe fa17 	bl	8000a98 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 800266a:	2305      	movs	r3, #5
 800266c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800266e:	a901      	add	r1, sp, #4
 8002670:	0020      	movs	r0, r4
 8002672:	f7fe fa11 	bl	8000a98 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 8002676:	2306      	movs	r3, #6
 8002678:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800267a:	a901      	add	r1, sp, #4
 800267c:	0020      	movs	r0, r4
 800267e:	f7fe fa0b 	bl	8000a98 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 8002682:	9501      	str	r5, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002684:	a901      	add	r1, sp, #4
 8002686:	0020      	movs	r0, r4
 8002688:	f7fe fa06 	bl	8000a98 <HAL_ADC_ConfigChannel>
}
 800268c:	b004      	add	sp, #16
 800268e:	bd70      	pop	{r4, r5, r6, pc}
 8002690:	20000198 	.word	0x20000198
 8002694:	40012400 	.word	0x40012400

08002698 <MX_RTC_Init>:
{
 8002698:	b530      	push	{r4, r5, lr}
 800269a:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 800269c:	4c12      	ldr	r4, [pc, #72]	; (80026e8 <MX_RTC_Init+0x50>)
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <MX_RTC_Init+0x54>)
 80026a0:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026a2:	2500      	movs	r5, #0
 80026a4:	6065      	str	r5, [r4, #4]
  hrtc.Init.AsynchPrediv = 127;
 80026a6:	237f      	movs	r3, #127	; 0x7f
 80026a8:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 80026aa:	3380      	adds	r3, #128	; 0x80
 80026ac:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026ae:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026b0:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026b2:	61a5      	str	r5, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026b4:	0020      	movs	r0, r4
 80026b6:	f7ff f9b5 	bl	8001a24 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 80026ba:	a901      	add	r1, sp, #4
 80026bc:	700d      	strb	r5, [r1, #0]
  sTime.Minutes = 0x0;
 80026be:	704d      	strb	r5, [r1, #1]
  sTime.Seconds = 0x0;
 80026c0:	708d      	strb	r5, [r1, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026c2:	60cd      	str	r5, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026c4:	610d      	str	r5, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80026c6:	2201      	movs	r2, #1
 80026c8:	0020      	movs	r0, r4
 80026ca:	f7ff fa19 	bl	8001b00 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80026ce:	2301      	movs	r3, #1
 80026d0:	466a      	mov	r2, sp
 80026d2:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80026d4:	7053      	strb	r3, [r2, #1]
  sDate.Date = 0x1;
 80026d6:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0x0;
 80026d8:	70d5      	strb	r5, [r2, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80026da:	2201      	movs	r2, #1
 80026dc:	4669      	mov	r1, sp
 80026de:	0020      	movs	r0, r4
 80026e0:	f7ff fa8c 	bl	8001bfc <HAL_RTC_SetDate>
}
 80026e4:	b007      	add	sp, #28
 80026e6:	bd30      	pop	{r4, r5, pc}
 80026e8:	20000110 	.word	0x20000110
 80026ec:	40002800 	.word	0x40002800

080026f0 <MX_TIM17_Init>:
{
 80026f0:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 80026f2:	4809      	ldr	r0, [pc, #36]	; (8002718 <MX_TIM17_Init+0x28>)
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_TIM17_Init+0x2c>)
 80026f6:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 2;
 80026f8:	2302      	movs	r3, #2
 80026fa:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	2300      	movs	r3, #0
 80026fe:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <MX_TIM17_Init+0x30>)
 8002702:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0092      	lsls	r2, r2, #2
 8002708:	6102      	str	r2, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 800270a:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800270c:	3380      	adds	r3, #128	; 0x80
 800270e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002710:	f7ff fc40 	bl	8001f94 <HAL_TIM_Base_Init>
}
 8002714:	bd10      	pop	{r4, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	200000b8 	.word	0x200000b8
 800271c:	40014800 	.word	0x40014800
 8002720:	0000ffff 	.word	0x0000ffff

08002724 <Count>:
{
 8002724:	b570      	push	{r4, r5, r6, lr}
D1 = gTime.Minutes/10;
 8002726:	4c10      	ldr	r4, [pc, #64]	; (8002768 <Count+0x44>)
 8002728:	7865      	ldrb	r5, [r4, #1]
 800272a:	210a      	movs	r1, #10
 800272c:	0028      	movs	r0, r5
 800272e:	f7fd fceb 	bl	8000108 <__udivsi3>
 8002732:	b2c0      	uxtb	r0, r0
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <Count+0x48>)
 8002736:	7018      	strb	r0, [r3, #0]
D2 = gTime.Minutes%10;
 8002738:	210a      	movs	r1, #10
 800273a:	0028      	movs	r0, r5
 800273c:	f7fd fd6a 	bl	8000214 <__aeabi_uidivmod>
 8002740:	b2c9      	uxtb	r1, r1
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <Count+0x4c>)
 8002744:	7019      	strb	r1, [r3, #0]
D3 = gTime.Seconds/10;
 8002746:	78a4      	ldrb	r4, [r4, #2]
 8002748:	210a      	movs	r1, #10
 800274a:	0020      	movs	r0, r4
 800274c:	f7fd fcdc 	bl	8000108 <__udivsi3>
 8002750:	b2c0      	uxtb	r0, r0
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <Count+0x50>)
 8002754:	7018      	strb	r0, [r3, #0]
D4 = gTime.Seconds%10;
 8002756:	210a      	movs	r1, #10
 8002758:	0020      	movs	r0, r4
 800275a:	f7fd fd5b 	bl	8000214 <__aeabi_uidivmod>
 800275e:	b2c9      	uxtb	r1, r1
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <Count+0x54>)
 8002762:	7019      	strb	r1, [r3, #0]
}
 8002764:	bd70      	pop	{r4, r5, r6, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	200000f8 	.word	0x200000f8
 800276c:	200001e4 	.word	0x200001e4
 8002770:	2000010c 	.word	0x2000010c
 8002774:	200000b4 	.word	0x200000b4
 8002778:	20000130 	.word	0x20000130

0800277c <get_time>:
{
 800277c:	b510      	push	{r4, lr}
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800277e:	4c06      	ldr	r4, [pc, #24]	; (8002798 <get_time+0x1c>)
 8002780:	2200      	movs	r2, #0
 8002782:	4906      	ldr	r1, [pc, #24]	; (800279c <get_time+0x20>)
 8002784:	0020      	movs	r0, r4
 8002786:	f7ff faaf 	bl	8001ce8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800278a:	2200      	movs	r2, #0
 800278c:	4904      	ldr	r1, [pc, #16]	; (80027a0 <get_time+0x24>)
 800278e:	0020      	movs	r0, r4
 8002790:	f7ff fad6 	bl	8001d40 <HAL_RTC_GetDate>
}
 8002794:	bd10      	pop	{r4, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	20000110 	.word	0x20000110
 800279c:	200000f8 	.word	0x200000f8
 80027a0:	200000b0 	.word	0x200000b0

080027a4 <HAL_TIM_PeriodElapsedCallback>:
{
 80027a4:	b510      	push	{r4, lr}
 80027a6:	b082      	sub	sp, #8
if(htim->Instance == htim17.Instance)
 80027a8:	6802      	ldr	r2, [r0, #0]
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0x12>
}
 80027b2:	b002      	add	sp, #8
 80027b4:	bd10      	pop	{r4, pc}
 switch(MENU)
 80027b6:	4b36      	ldr	r3, [pc, #216]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b0a      	cmp	r3, #10
 80027be:	d8f8      	bhi.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80027c4:	58d3      	ldr	r3, [r2, r3]
 80027c6:	469f      	mov	pc, r3
	Display_event(D1,D2,D3,D4,Blink_1HZ);
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80027ca:	7818      	ldrb	r0, [r3, #0]
 80027cc:	b2c0      	uxtb	r0, r0
 80027ce:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80027d0:	7819      	ldrb	r1, [r3, #0]
 80027d2:	b2c9      	uxtb	r1, r1
 80027d4:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2400      	movs	r4, #0
 80027e2:	9400      	str	r4, [sp, #0]
 80027e4:	f7fd fd1c 	bl	8000220 <Display_event>
    break;
 80027e8:	e7e3      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	Display_event(CHAR_A,CHAR_B,CHAR_C,CHAR_D,Blink_1_Digit);
 80027ea:	2301      	movs	r3, #1
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	220c      	movs	r2, #12
 80027f2:	210b      	movs	r1, #11
 80027f4:	200a      	movs	r0, #10
 80027f6:	f7fd fd13 	bl	8000220 <Display_event>
	break;
 80027fa:	e7da      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
    Display_event(CHAR_F,CHAR_G,CHAR_h,CHAR__,Blink_ALL_Digit);
 80027fc:	2305      	movs	r3, #5
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	331f      	adds	r3, #31
 8002802:	2226      	movs	r2, #38	; 0x26
 8002804:	2110      	movs	r1, #16
 8002806:	200f      	movs	r0, #15
 8002808:	f7fd fd0a 	bl	8000220 <Display_event>
    break;
 800280c:	e7d1      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(9,10,11,12,3);
 800280e:	2303      	movs	r3, #3
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	3309      	adds	r3, #9
 8002814:	220b      	movs	r2, #11
 8002816:	210a      	movs	r1, #10
 8002818:	2009      	movs	r0, #9
 800281a:	f7fd fd01 	bl	8000220 <Display_event>
	 break;
 800281e:	e7c8      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(13,14,15,16,4);
 8002820:	2304      	movs	r3, #4
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	330c      	adds	r3, #12
 8002826:	220f      	movs	r2, #15
 8002828:	210e      	movs	r1, #14
 800282a:	200d      	movs	r0, #13
 800282c:	f7fd fcf8 	bl	8000220 <Display_event>
	 break;
 8002830:	e7bf      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	Display_event(17,18,19,20,5);
 8002832:	2305      	movs	r3, #5
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	330f      	adds	r3, #15
 8002838:	2213      	movs	r2, #19
 800283a:	2112      	movs	r1, #18
 800283c:	2011      	movs	r0, #17
 800283e:	f7fd fcef 	bl	8000220 <Display_event>
	break;
 8002842:	e7b6      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(21,22,23,24,6);
 8002844:	2306      	movs	r3, #6
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	3312      	adds	r3, #18
 800284a:	2217      	movs	r2, #23
 800284c:	2116      	movs	r1, #22
 800284e:	2015      	movs	r0, #21
 8002850:	f7fd fce6 	bl	8000220 <Display_event>
	 break;
 8002854:	e7ad      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(25,26,36,27,7);
 8002856:	2307      	movs	r3, #7
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	2224      	movs	r2, #36	; 0x24
 800285e:	211a      	movs	r1, #26
 8002860:	2019      	movs	r0, #25
 8002862:	f7fd fcdd 	bl	8000220 <Display_event>
	 break;
 8002866:	e7a4      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(28,29,30,32,8);
 8002868:	2308      	movs	r3, #8
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	3318      	adds	r3, #24
 800286e:	221e      	movs	r2, #30
 8002870:	211d      	movs	r1, #29
 8002872:	201c      	movs	r0, #28
 8002874:	f7fd fcd4 	bl	8000220 <Display_event>
	 break;
 8002878:	e79b      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
	 Display_event(37,38,39,40,9);
 800287a:	2309      	movs	r3, #9
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	331f      	adds	r3, #31
 8002880:	2227      	movs	r2, #39	; 0x27
 8002882:	2126      	movs	r1, #38	; 0x26
 8002884:	2025      	movs	r0, #37	; 0x25
 8002886:	f7fd fccb 	bl	8000220 <Display_event>
}
 800288a:	e792      	b.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe>
 800288c:	200000b8 	.word	0x200000b8
 8002890:	20000001 	.word	0x20000001
 8002894:	08002e20 	.word	0x08002e20
 8002898:	200001e4 	.word	0x200001e4
 800289c:	2000010c 	.word	0x2000010c
 80028a0:	200000b4 	.word	0x200000b4
 80028a4:	20000130 	.word	0x20000130

080028a8 <SystemClock_Config>:
{
 80028a8:	b530      	push	{r4, r5, lr}
 80028aa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80028ac:	231a      	movs	r3, #26
 80028ae:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028b0:	3b19      	subs	r3, #25
 80028b2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80028b4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80028b6:	2210      	movs	r2, #16
 80028b8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80028ba:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80028bc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028be:	2502      	movs	r5, #2
 80028c0:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028c2:	2400      	movs	r4, #0
 80028c4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80028c6:	23c0      	movs	r3, #192	; 0xc0
 80028c8:	035b      	lsls	r3, r3, #13
 80028ca:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80028cc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ce:	a808      	add	r0, sp, #32
 80028d0:	f7fe fcda 	bl	8001288 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d4:	2307      	movs	r3, #7
 80028d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d8:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028da:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028dc:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028de:	2101      	movs	r1, #1
 80028e0:	a804      	add	r0, sp, #16
 80028e2:	f7fe ff2d 	bl	8001740 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	025b      	lsls	r3, r3, #9
 80028ea:	9300      	str	r3, [sp, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028f2:	4668      	mov	r0, sp
 80028f4:	f7fe ffd4 	bl	80018a0 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80028f8:	f7fe ffcc 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80028fc:	21fa      	movs	r1, #250	; 0xfa
 80028fe:	0089      	lsls	r1, r1, #2
 8002900:	f7fd fc02 	bl	8000108 <__udivsi3>
 8002904:	f7fe f99e 	bl	8000c44 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002908:	2004      	movs	r0, #4
 800290a:	f7fe f9b7 	bl	8000c7c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2001      	movs	r0, #1
 8002914:	4240      	negs	r0, r0
 8002916:	f7fe f959 	bl	8000bcc <HAL_NVIC_SetPriority>
}
 800291a:	b015      	add	sp, #84	; 0x54
 800291c:	bd30      	pop	{r4, r5, pc}
	...

08002920 <main>:
{
 8002920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8002922:	f7fd fec7 	bl	80006b4 <HAL_Init>
  SystemClock_Config();
 8002926:	f7ff ffbf 	bl	80028a8 <SystemClock_Config>
  HAL_FLASH_Unlock();
 800292a:	f7fe facf 	bl	8000ecc <HAL_FLASH_Unlock>
  EE_Init();
 800292e:	f7ff fc2f 	bl	8002190 <EE_Init>
  MX_GPIO_Init();
 8002932:	f7ff fddd 	bl	80024f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002936:	f7ff fe45 	bl	80025c4 <MX_DMA_Init>
  MX_ADC_Init();
 800293a:	f7ff fe5b 	bl	80025f4 <MX_ADC_Init>
  MX_RTC_Init();
 800293e:	f7ff feab 	bl	8002698 <MX_RTC_Init>
  MX_TIM17_Init();
 8002942:	f7ff fed5 	bl	80026f0 <MX_TIM17_Init>
  EE_ReadVariable(VirtAddVarTab[9], &VarDataTab[9]);
 8002946:	4d37      	ldr	r5, [pc, #220]	; (8002a24 <main+0x104>)
 8002948:	002e      	movs	r6, r5
 800294a:	3612      	adds	r6, #18
 800294c:	4c36      	ldr	r4, [pc, #216]	; (8002a28 <main+0x108>)
 800294e:	8a60      	ldrh	r0, [r4, #18]
 8002950:	0031      	movs	r1, r6
 8002952:	f7ff fbe9 	bl	8002128 <EE_ReadVariable>
  VarValue  = VarDataTab[9];
 8002956:	8a69      	ldrh	r1, [r5, #18]
    EE_WriteVariable(VirtAddVarTab[7], VarValue++);
 8002958:	89e0      	ldrh	r0, [r4, #14]
 800295a:	4f34      	ldr	r7, [pc, #208]	; (8002a2c <main+0x10c>)
 800295c:	1c4b      	adds	r3, r1, #1
 800295e:	803b      	strh	r3, [r7, #0]
 8002960:	f7ff fdb8 	bl	80024d4 <EE_WriteVariable>
    EE_WriteVariable(VirtAddVarTab[8], VarValue++);
 8002964:	8a20      	ldrh	r0, [r4, #16]
 8002966:	8839      	ldrh	r1, [r7, #0]
 8002968:	1c4b      	adds	r3, r1, #1
 800296a:	803b      	strh	r3, [r7, #0]
 800296c:	f7ff fdb2 	bl	80024d4 <EE_WriteVariable>
    EE_WriteVariable(VirtAddVarTab[9], VarValue++);
 8002970:	8a60      	ldrh	r0, [r4, #18]
 8002972:	8839      	ldrh	r1, [r7, #0]
 8002974:	1c4b      	adds	r3, r1, #1
 8002976:	803b      	strh	r3, [r7, #0]
 8002978:	f7ff fdac 	bl	80024d4 <EE_WriteVariable>
    EE_ReadVariable(VirtAddVarTab[7], &VarDataTab[7]);
 800297c:	0029      	movs	r1, r5
 800297e:	310e      	adds	r1, #14
 8002980:	89e0      	ldrh	r0, [r4, #14]
 8002982:	f7ff fbd1 	bl	8002128 <EE_ReadVariable>
    EE_ReadVariable(VirtAddVarTab[8], &VarDataTab[8]);
 8002986:	0029      	movs	r1, r5
 8002988:	3110      	adds	r1, #16
 800298a:	8a20      	ldrh	r0, [r4, #16]
 800298c:	f7ff fbcc 	bl	8002128 <EE_ReadVariable>
    EE_ReadVariable(VirtAddVarTab[9], &VarDataTab[9]);
 8002990:	8a60      	ldrh	r0, [r4, #18]
 8002992:	0031      	movs	r1, r6
 8002994:	f7ff fbc8 	bl	8002128 <EE_ReadVariable>
  HAL_TIM_Base_Start_IT(&htim17);
 8002998:	4825      	ldr	r0, [pc, #148]	; (8002a30 <main+0x110>)
 800299a:	f7ff f9f5 	bl	8001d88 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA (&hadc, (uint32_t *)adc_buf, 8);
 800299e:	2208      	movs	r2, #8
 80029a0:	4924      	ldr	r1, [pc, #144]	; (8002a34 <main+0x114>)
 80029a2:	4825      	ldr	r0, [pc, #148]	; (8002a38 <main+0x118>)
 80029a4:	f7fd ffd6 	bl	8000954 <HAL_ADC_Start_DMA>
 80029a8:	e009      	b.n	80029be <main+0x9e>
			HAL_Delay(1000);
 80029aa:	20fa      	movs	r0, #250	; 0xfa
 80029ac:	0080      	lsls	r0, r0, #2
 80029ae:	f7fd fe9f 	bl	80006f0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB ,SW_down_Pin)==0)
 80029b2:	2108      	movs	r1, #8
 80029b4:	4821      	ldr	r0, [pc, #132]	; (8002a3c <main+0x11c>)
 80029b6:	f7fe fc55 	bl	8001264 <HAL_GPIO_ReadPin>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d02b      	beq.n	8002a16 <main+0xf6>
	  get_time();
 80029be:	f7ff fedd 	bl	800277c <get_time>
	  Count  ();
 80029c2:	f7ff feaf 	bl	8002724 <Count>
		if((HAL_GPIO_ReadPin(GPIOB ,SW_menu_Pin)==0)) //||
 80029c6:	2120      	movs	r1, #32
 80029c8:	481c      	ldr	r0, [pc, #112]	; (8002a3c <main+0x11c>)
 80029ca:	f7fe fc4b 	bl	8001264 <HAL_GPIO_ReadPin>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d10f      	bne.n	80029f2 <main+0xd2>
			MENU++;
 80029d2:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <main+0x120>)
 80029d4:	7813      	ldrb	r3, [r2, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	7013      	strb	r3, [r2, #0]
			if(MENU>10)
 80029dc:	7813      	ldrb	r3, [r2, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b0a      	cmp	r3, #10
 80029e2:	d902      	bls.n	80029ea <main+0xca>
			 MENU=1;
 80029e4:	2201      	movs	r2, #1
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <main+0x120>)
 80029e8:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 80029ea:	20fa      	movs	r0, #250	; 0xfa
 80029ec:	0080      	lsls	r0, r0, #2
 80029ee:	f7fd fe7f 	bl	80006f0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB ,SW_up_Pin)==0)
 80029f2:	2110      	movs	r1, #16
 80029f4:	4811      	ldr	r0, [pc, #68]	; (8002a3c <main+0x11c>)
 80029f6:	f7fe fc35 	bl	8001264 <HAL_GPIO_ReadPin>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d1d9      	bne.n	80029b2 <main+0x92>
			MENU--;
 80029fe:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <main+0x120>)
 8002a00:	7813      	ldrb	r3, [r2, #0]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	7013      	strb	r3, [r2, #0]
			if(MENU<=0)
 8002a08:	7813      	ldrb	r3, [r2, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1cd      	bne.n	80029aa <main+0x8a>
			 MENU=10;
 8002a0e:	220a      	movs	r2, #10
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <main+0x120>)
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e7c9      	b.n	80029aa <main+0x8a>
			HAL_GPIO_TogglePin(GPIOB ,BUZZER_Pin);
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	00c9      	lsls	r1, r1, #3
 8002a1a:	4808      	ldr	r0, [pc, #32]	; (8002a3c <main+0x11c>)
 8002a1c:	f7fe fc2f 	bl	800127e <HAL_GPIO_TogglePin>
 8002a20:	e7cd      	b.n	80029be <main+0x9e>
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	20000004 	.word	0x20000004
 8002a28:	20000024 	.word	0x20000024
 8002a2c:	20000066 	.word	0x20000066
 8002a30:	200000b8 	.word	0x200000b8
 8002a34:	20000134 	.word	0x20000134
 8002a38:	20000198 	.word	0x20000198
 8002a3c:	48000400 	.word	0x48000400
 8002a40:	20000001 	.word	0x20000001

08002a44 <_Error_Handler>:
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a48:	b500      	push	{lr}
 8002a4a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_MspInit+0x50>)
 8002a4e:	6999      	ldr	r1, [r3, #24]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4311      	orrs	r1, r2
 8002a54:	6199      	str	r1, [r3, #24]
 8002a56:	6999      	ldr	r1, [r3, #24]
 8002a58:	400a      	ands	r2, r1
 8002a5a:	9200      	str	r2, [sp, #0]
 8002a5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	0549      	lsls	r1, r1, #21
 8002a64:	430a      	orrs	r2, r1
 8002a66:	61da      	str	r2, [r3, #28]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	2005      	movs	r0, #5
 8002a76:	4240      	negs	r0, r0
 8002a78:	f7fe f8a8 	bl	8000bcc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2002      	movs	r0, #2
 8002a82:	4240      	negs	r0, r0
 8002a84:	f7fe f8a2 	bl	8000bcc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	4240      	negs	r0, r0
 8002a90:	f7fe f89c 	bl	8000bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a94:	b003      	add	sp, #12
 8002a96:	bd00      	pop	{pc}
 8002a98:	40021000 	.word	0x40021000

08002a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <HAL_ADC_MspInit+0x74>)
 8002aa4:	6802      	ldr	r2, [r0, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aaa:	b006      	add	sp, #24
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aae:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_ADC_MspInit+0x78>)
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	2680      	movs	r6, #128	; 0x80
 8002ab4:	00b6      	lsls	r6, r6, #2
 8002ab6:	4332      	orrs	r2, r6
 8002ab8:	619a      	str	r2, [r3, #24]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4033      	ands	r3, r6
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002ac2:	23ff      	movs	r3, #255	; 0xff
 8002ac4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ac6:	3bfc      	subs	r3, #252	; 0xfc
 8002ac8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2500      	movs	r5, #0
 8002acc:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	a901      	add	r1, sp, #4
 8002ad0:	2090      	movs	r0, #144	; 0x90
 8002ad2:	05c0      	lsls	r0, r0, #23
 8002ad4:	f7fe fb00 	bl	80010d8 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8002ad8:	480f      	ldr	r0, [pc, #60]	; (8002b18 <HAL_ADC_MspInit+0x7c>)
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_ADC_MspInit+0x80>)
 8002adc:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ade:	6045      	str	r5, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae0:	6085      	str	r5, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ae6:	6106      	str	r6, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002aee:	2320      	movs	r3, #32
 8002af0:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002af2:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002af4:	f7fe f900 	bl	8000cf8 <HAL_DMA_Init>
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d103      	bne.n	8002b04 <HAL_ADC_MspInit+0x68>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_ADC_MspInit+0x7c>)
 8002afe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002b00:	625c      	str	r4, [r3, #36]	; 0x24
}
 8002b02:	e7d2      	b.n	8002aaa <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8002b04:	2170      	movs	r1, #112	; 0x70
 8002b06:	4806      	ldr	r0, [pc, #24]	; (8002b20 <HAL_ADC_MspInit+0x84>)
 8002b08:	f7ff ff9c 	bl	8002a44 <_Error_Handler>
 8002b0c:	e7f6      	b.n	8002afc <HAL_ADC_MspInit+0x60>
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	40012400 	.word	0x40012400
 8002b14:	40021000 	.word	0x40021000
 8002b18:	20000154 	.word	0x20000154
 8002b1c:	40020008 	.word	0x40020008
 8002b20:	08002e4c 	.word	0x08002e4c

08002b24 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8002b24:	6802      	ldr	r2, [r0, #0]
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RTC_MspInit+0x18>)
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d000      	beq.n	8002b2e <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b2c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_RTC_MspInit+0x1c>)
 8002b30:	6a11      	ldr	r1, [r2, #32]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	430b      	orrs	r3, r1
 8002b38:	6213      	str	r3, [r2, #32]
}
 8002b3a:	e7f7      	b.n	8002b2c <HAL_RTC_MspInit+0x8>
 8002b3c:	40002800 	.word	0x40002800
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b44:	b500      	push	{lr}
 8002b46:	b083      	sub	sp, #12

  if(htim_base->Instance==TIM17)
 8002b48:	6802      	ldr	r2, [r0, #0]
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <HAL_TIM_Base_MspInit+0x38>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002b50:	b003      	add	sp, #12
 8002b52:	bd00      	pop	{pc}
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b54:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_TIM_Base_MspInit+0x3c>)
 8002b56:	6991      	ldr	r1, [r2, #24]
 8002b58:	2080      	movs	r0, #128	; 0x80
 8002b5a:	02c0      	lsls	r0, r0, #11
 8002b5c:	4301      	orrs	r1, r0
 8002b5e:	6191      	str	r1, [r2, #24]
 8002b60:	6993      	ldr	r3, [r2, #24]
 8002b62:	4003      	ands	r3, r0
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	2016      	movs	r0, #22
 8002b6e:	f7fe f82d 	bl	8000bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002b72:	2016      	movs	r0, #22
 8002b74:	f7fe f85c 	bl	8000c30 <HAL_NVIC_EnableIRQ>
}
 8002b78:	e7ea      	b.n	8002b50 <HAL_TIM_Base_MspInit+0xc>
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	40014800 	.word	0x40014800
 8002b80:	40021000 	.word	0x40021000

08002b84 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b84:	4770      	bx	lr

08002b86 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002b86:	e7fe      	b.n	8002b86 <HardFault_Handler>

08002b88 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b88:	4770      	bx	lr

08002b8a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8a:	4770      	bx	lr

08002b8c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002b8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8e:	f7fd fda1 	bl	80006d4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002b92:	f7fe f884 	bl	8000c9e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b96:	bd10      	pop	{r4, pc}

08002b98 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8002b98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002b9a:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <DMA1_Channel1_IRQHandler+0xc>)
 8002b9c:	f7fe f913 	bl	8000dc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	20000154 	.word	0x20000154

08002ba8 <TIM17_IRQHandler>:

/**
* @brief This function handles TIM17 global interrupt.
*/
void TIM17_IRQHandler(void)
{
 8002ba8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002baa:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <TIM17_IRQHandler+0xc>)
 8002bac:	f7ff f8fb 	bl	8001da6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002bb0:	bd10      	pop	{r4, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	200000b8 	.word	0x200000b8

08002bb8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <SystemInit+0x48>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	480f      	ldr	r0, [pc, #60]	; (8002c04 <SystemInit+0x4c>)
 8002bc6:	4002      	ands	r2, r0
 8002bc8:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	480e      	ldr	r0, [pc, #56]	; (8002c08 <SystemInit+0x50>)
 8002bce:	4002      	ands	r2, r0
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	480d      	ldr	r0, [pc, #52]	; (8002c0c <SystemInit+0x54>)
 8002bd6:	4002      	ands	r2, r0
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <SystemInit+0x58>)
 8002bde:	4002      	ands	r2, r0
 8002be0:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	200f      	movs	r0, #15
 8002be6:	4382      	bics	r2, r0
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bec:	4809      	ldr	r0, [pc, #36]	; (8002c14 <SystemInit+0x5c>)
 8002bee:	4002      	ands	r2, r0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]

}
 8002bfc:	4770      	bx	lr
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08ffb80c 	.word	0x08ffb80c
 8002c08:	fef6ffff 	.word	0xfef6ffff
 8002c0c:	fffbffff 	.word	0xfffbffff
 8002c10:	ffc0ffff 	.word	0xffc0ffff
 8002c14:	fffffeec 	.word	0xfffffeec

08002c18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c18:	480d      	ldr	r0, [pc, #52]	; (8002c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c1c:	480d      	ldr	r0, [pc, #52]	; (8002c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c1e:	490e      	ldr	r1, [pc, #56]	; (8002c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <LoopForever+0xe>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c24:	e002      	b.n	8002c2c <LoopCopyDataInit>

08002c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c2a:	3304      	adds	r3, #4

08002c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c30:	d3f9      	bcc.n	8002c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c32:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c34:	4c0b      	ldr	r4, [pc, #44]	; (8002c64 <LoopForever+0x16>)
  movs r3, #0
 8002c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c38:	e001      	b.n	8002c3e <LoopFillZerobss>

08002c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c3c:	3204      	adds	r2, #4

08002c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c40:	d3fb      	bcc.n	8002c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c42:	f7ff ffb9 	bl	8002bb8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002c46:	f000 f811 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c4a:	f7ff fe69 	bl	8002920 <main>

08002c4e <LoopForever>:

LoopForever:
    b LoopForever
 8002c4e:	e7fe      	b.n	8002c4e <LoopForever>
  ldr   r0, =_estack
 8002c50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c58:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8002c5c:	08002e80 	.word	0x08002e80
  ldr r2, =_sbss
 8002c60:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8002c64:	200001e8 	.word	0x200001e8

08002c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c68:	e7fe      	b.n	8002c68 <ADC1_IRQHandler>
	...

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2600      	movs	r6, #0
 8002c70:	4d0c      	ldr	r5, [pc, #48]	; (8002ca4 <__libc_init_array+0x38>)
 8002c72:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	2600      	movs	r6, #0
 8002c7e:	f000 f819 	bl	8002cb4 <_init>
 8002c82:	4d0a      	ldr	r5, [pc, #40]	; (8002cac <__libc_init_array+0x40>)
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <__libc_init_array+0x44>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	00b3      	lsls	r3, r6, #2
 8002c92:	58eb      	ldr	r3, [r5, r3]
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	00b3      	lsls	r3, r6, #2
 8002c9c:	58eb      	ldr	r3, [r5, r3]
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	08002e78 	.word	0x08002e78
 8002ca8:	08002e78 	.word	0x08002e78
 8002cac:	08002e78 	.word	0x08002e78
 8002cb0:	08002e7c 	.word	0x08002e7c

08002cb4 <_init>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cba:	bc08      	pop	{r3}
 8002cbc:	469e      	mov	lr, r3
 8002cbe:	4770      	bx	lr

08002cc0 <_fini>:
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc6:	bc08      	pop	{r3}
 8002cc8:	469e      	mov	lr, r3
 8002cca:	4770      	bx	lr
